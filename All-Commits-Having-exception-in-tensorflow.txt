commit c29e9f25e761df06e1d401868fbc0ff2071a0ed2
Author: Daniel Ellis <danielellis@google.com>
Date:   Thu Feb 18 16:34:42 2021 -0800

    Handle garbage collection race condition.
    
    An exception is being thrown when objects that use `CapturableResourceDeleter` are garbage collected at the end of a program's life.  This can happen in very normal circumstances, such as when using `saved_model_cli` to inspect a model.
    
    The cause of the exception appears to be a race condition with garbage collection between `CapturableResourceDeleter` and `ScopedTFFunction`. Both define a custom finalizer (`__del__`); `CaptureableResourceDeleter`'s finalizer ultimately calls a concrete function which calls an `_EagerDefinedFunction` which attempts to load and execute a `ScopedTFFunction`.
    
    In the case of multiple objects in a reference cycle all going unreachable during the same garbage collection cycle, we get no guaranteed ordering for which of the objects will be collected first. In the case of the exception, `ScopedTFFunction` is collected first and its underlying function is deleted. Later, `CapturableResourceDeleter` is called, which fails, since the function it's trying to call is gone.
    
    PiperOrigin-RevId: 358292164
    Change-Id: I9162d5de622f5c1ec9b2954647b9958a7d3d87b6

commit aae0fc015b531b23ecd46b096d19d45b64ba7d31
Author: Ron Shapiro <ronshapiro@google.com>
Date:   Mon Feb 8 23:45:46 2021 -0800

    Support `uint32` and `uint64` in `tf.get_static_value()` from within a `tf.function()`
    
    Attempting to do so without this change raises an exception:
    
    ```
    File ".../tensorflow/python/ops/check_ops.py", line 672, in assert_equal
      data, summarize, message, name)
    File ".../tensorflow/python/ops/check_ops.py", line 369, in _binary_assert
      x_static = tensor_util.constant_value(x)
    File ".../tensorflow/python/framework/tensor_util.py", line 876, in constant_value
      ret = _ConstantValue(tensor, partial)
    File ".../tensorflow/python/framework/tensor_util.py", line 681, in _ConstantValue
      return MakeNdarray(tensor.op.get_attr("value"))
    File ".../tensorflow/python/framework/tensor_util.py", line 641, in MakeNdarray
      raise TypeError("Unsupported tensor type: %s" % tensor.dtype)
    TypeError: Unsupported tensor type: 23
    ```
    PiperOrigin-RevId: 356437863
    Change-Id: I51d9adf8727bcf01ac3a862a608fa93e2cb6a88d

commit c8d44014fb7df6bbfa69d8040c2a8c7ab74479c3
Author: Suraj Upadhyay <usuraj35@gmail.com>
Date:   Thu Feb 4 00:42:59 2021 +0530

    Add missing exception to Model.fit() docstring
    
    The shuffle argument to the fit() method in the Model class gets ignored
    if the input x to the method is a tf.data.Dataset object. But this isn't
    documented in the docstring of the method.
    
    Signed-off-by: Suraj Upadhyay <usuraj35@gmail.com>

commit 5f3a2ca4a948935d008ea3cbf545c7c7d7199e24
Merge: e9c0ef30643 ace5b10475f
Author: Mihai Maruseac <mihaimaruseac@google.com>
Date:   Tue Jan 19 09:21:30 2021 -0800

    Merge pull request #46375 from geetachavan1/cherrypicks_VL6Y2
    
    [Cherrypick:2.4] Fix an exception when profiler is stopped twice

commit 3a06f0d4754c7b146af5a071ac2cbb419ef58e81
Author: Renjie Liu <renjieliu@google.com>
Date:   Tue Jan 19 02:37:23 2021 -0800

    [tf.lite] Re-land "Fix JNI memory leak when constructor exceptions are thrown"
    
    Properly dispose of native memory handles if an exception is thrown
    in the Interpreter constructor. This change landed previously but was rolled
    back due to a bug in how the ByteBuffer constructor argument was stored.
    That has been addressed in this change.
    
    PiperOrigin-RevId: 352525809
    Change-Id: I4f572aebe7a8afa56e8007f2c08622a3b5390cbb

commit 14d708ab72f36aa8ab69493e2474e475b5107bfa
Author: Bixia Zheng <bixia@google.com>
Date:   Thu Jan 14 15:59:15 2021 -0800

    [TF:TRT] Handle out of GPU memory when creating TensorRT execution context.
    
    Previously, we use ICudaEngine::createExecutionContext to create a TensorRT
    execution context along with the GPU needed to execute the Cuda Engine. This
    API doesn't handle out of GPU memory properly, instead propagates an exception.
    This change uses ICudaEngine::createExecutionContextWithoutDeviceMemory to
    create a TensorRT execution context without any GPU memory, and let TF-TRT
    create the needed GPU memory. In order to keep track of such GPU memory, we
    wrap the TensorRT execution context and the associated GPU memory in a new
    class callsed ExecutionContext.
    
    PiperOrigin-RevId: 351895192
    Change-Id: Ie01f0241578fadba8fad25bd110f937fd47082c8

commit 3d21db1f00fe9b0aaf0b2a5a9957cfe31124d816
Author: Jared Duke <jdduke@google.com>
Date:   Thu Jan 14 11:47:08 2021 -0800

    [tf.lite] Re-land "Fix JNI memory leak when constructor exceptions are thrown"
    
    Properly dispose of native memory handles if an exception is thrown
    in the Interpreter constructor. This change landed previously but was rolled
    back due to a bug in how the ByteBuffer constructor argument was stored.
    That has been addressed in this change.
    
    PiperOrigin-RevId: 351844621
    Change-Id: Ibd335a4d3a4412a910d859af9f3a5b0a60829cc0

commit ace5b10475f0f554996050ae469405722b9d4faa
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Fri Nov 20 16:05:08 2020 -0800

    [Cherrypick:2.4] Fix an exception when profiler is stopped twice

commit 708ffb11f6b237cf1375459f4bc31f2e8f761026
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Fri Jan 8 16:54:30 2021 -0800

    [tf.lite] Fix JNI memory leak when constructor exceptions are thrown
    
    Properly dispose of native memory handles if an exception is thrown
    in the Interpreter constructor.
    
    PiperOrigin-RevId: 350861120
    Change-Id: I0cedf9a943c57c16b6027c6f12752c1de3855da2

commit 9aae97c55cb049195268ac55d7490aef456ce12d
Author: Jared Duke <jdduke@google.com>
Date:   Fri Jan 8 14:44:12 2021 -0800

    [tf.lite] Fix JNI memory leak when constructor exceptions are thrown
    
    Properly dispose of native memory handles if an exception is thrown
    in the Interpreter constructor.
    
    PiperOrigin-RevId: 350840110
    Change-Id: Ie7f128f7a003d01b1e45654553b21bb16fa89d1e

commit 079a6c921528a6136db29eb8cf792db4f0552b8a
Author: Chris Leary <cdleary@gmail.com>
Date:   Wed Dec 30 23:07:26 2020 -0800

    Newline after printing ConfigError in configure.py.
    
    Fix error message printed on configuration exception to have a newline suffix
    in CUDA configuration, without this the two lines run into each other.
    
    Before:
    
    ```
    Please specify the comma-separated list of base paths to look for CUDA libraries and headers. [Leave empty to use the default]:
    
    Inconsistent CUDA toolkit path: /usr vs /usr/libAsking for detailed CUDA configuration...
    ```
    
    After:
    
    ```
    Please specify the comma-separated list of base paths to look for CUDA libraries and headers. [Leave empty to use the default]:
    
    Inconsistent CUDA toolkit path: /usr vs /usr/lib
    Asking for detailed CUDA configuration...
    ```

commit 19e60ce9138e087337f6e9cf1021f2cd432d1a24
Author: Advait Jain <advaitjain@users.noreply.github.com>
Date:   Wed Dec 16 16:58:53 2020 -0800

    also add exception for markdwon.

commit 5bd1fb482a3042eed236b32bfe29c850632424a3
Author: Advait Jain <advaitjain@users.noreply.github.com>
Date:   Wed Dec 16 15:37:47 2020 -0800

    Add exception for .resource files from the license check.
    
    These are config files for renode / robot and the exception is needed to
    merge PRs like https://github.com/tensorflow/tensorflow/pull/44729

commit cd67a1774554b147c6ff382f56aa2ce2acbde749
Author: Ryan Kuester <kuester@bdti.com>
Date:   Thu Dec 3 17:12:32 2020 -0600

    micro: list test and kernel files explicitly in Makefile
    
    List test and kernel files explicitly to provide an easy means of
    excluding files from the build that would have matched the
    now-removed wildcard patterns. Listing exceptions and using
    $(filter-out) would have been more ugly and prone to merge
    conflicts.
    
    These lists were verified to match those produced by the
    wildcards they replaced as of commit 5543ed6f.
    
    There are a few other wildcards in the Makefile for files other
    than kernels and kernel tests. Those aren't replaced in this
    commit, but should probably be replaced eventually for
    consistency's sake.

commit 2ad6aa9304e02b23757d6e379800fcc13b6fab60
Author: Jared Duke <jdduke@google.com>
Date:   Sun Nov 22 17:15:55 2020 -0800

    Properly namespace JNI exception strings
    
    This avoids collisions for clients who use both TF and TFLite JNI libraries
    
    PiperOrigin-RevId: 343765942
    Change-Id: Ibdc17b95bdaebac88fe23b1482cba7c8b611db11

commit 4f301f599748928f6a3471d466731cfe5b536670
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Fri Nov 20 16:05:08 2020 -0800

    fix an exception when profiler is stopped twice.
    
    PiperOrigin-RevId: 343582616
    Change-Id: I37fd9e677d2a3912d51c9f5f42b3ad2bdb481ec8

commit 35696cc3258aadd3fe4d4b8aafb09bf73ee1950e
Author: Edward Loper <edloper@google.com>
Date:   Fri Nov 20 12:36:42 2020 -0800

    Fix bug where int attributes >= 2**31 caused on exception on some platforms.
    
    PiperOrigin-RevId: 343544621
    Change-Id: I0881f6f77d6293a25b6804a1a8ebe4692222dd55

commit fb31adb04fb65869fdc985687da5ae453e3c62e8
Author: Edward Loper <edloper@google.com>
Date:   Mon Nov 9 10:20:17 2020 -0800

    Update RaggedTensor.merge_dims to return the ragged tensor as-is if outer_axis==inner_axis.  I.e.: `rt.merge_dims(x, x) == rt`.  (Previously, it raised an exception for outer_axis==inner_axis.)
    
    PiperOrigin-RevId: 341433226
    Change-Id: I0f02a782a9feb000ab00dd25583e0de360cd4e4b

commit cfe7aaed5278ad20d0d98992960e2189dfbe921f
Author: qqq.jq <895521320@qq.com>
Date:   Wed Nov 4 14:57:28 2020 +0800

    Use the name of the operation while throwing exception

commit 39b01258da64688fdec6430b6e56fec55f88dba6
Author: Ce Zheng <zce@google.com>
Date:   Tue Nov 3 12:51:30 2020 -0800

    [PJRT] Remove TPU v4 exception for D2D copy.
    
    PiperOrigin-RevId: 340505617
    Change-Id: Iaa2365e15d0c71f08d3cdfb418eeb37ed4c773d3

commit d724cdbce69862cbb80617dd6573baa83bd3e819
Author: oujiafan <oujiafan@gmail.com>
Date:   Thu Oct 29 15:46:23 2020 +0800

    Remove hardcoded int32 conversion
    
    We will have some silent failure if we convert int64 to int32: it will overflow and maybe get negative shape on Linux. I didn't test on Windows - seems array_ops.shape() no longer throw exception for large shape. So I revert the change here.
    To support larger shape than int32, user should change other places as well.

commit 16cab3e8ce1d988b81fbcf07c18e4e097706d29f
Author: Deven Desai <deven.desai.amd@gmail.com>
Date:   Mon Oct 26 20:22:20 2020 +0000

    Fix for unit test failures introduced by weekly sync - 201026
    
    The following tests started failing with the weekly merge
    
    ```
    //tensorflow/python:stateful_random_ops_test                             FAILED in 3 out of 3 in 6.1s
    //tensorflow/python:stateful_random_ops_test_gpu                         FAILED in 3 out of 3 in 6.1s
    ```
    
    The error message for those failures indicates that the failures are due to lack of support for the `Bitcast` operator on the ROCm platform, and this commit adds that missing support. The support was already available for the CUDA platform, so enabling it for ROCm is easy.
    
    example error message
    
    ```
    ======================================================================
    ERROR: testSameAsOldRandomOpsGPU (__main__.StatefulRandomOpsTest)
    testSameAsOldRandomOpsGPU (__main__.StatefulRandomOpsTest)
    ----------------------------------------------------------------------
    Traceback (most recent call last):
      File "/root/.cache/bazel/_bazel_root/efb88f6336d9c4a18216fb94287b8d97/execroot/org_tensorflow/bazel-out/k8-opt/bin/tensorflow/python/stateful_random_ops_test_gpu.runfiles/org_tensorflow/tensorflow/python/framework/test_util.py", line 1436, in decorated
        return f(self, *args, **kwargs)
      File "/root/.cache/bazel/_bazel_root/efb88f6336d9c4a18216fb94287b8d97/execroot/org_tensorflow/bazel-out/k8-opt/bin/tensorflow/python/stateful_random_ops_test_gpu.runfiles/org_tensorflow/tensorflow/python/framework/test_util.py", line 1502, in decorated
        return f(self, *args, **kwargs)
      File "/root/.cache/bazel/_bazel_root/efb88f6336d9c4a18216fb94287b8d97/execroot/org_tensorflow/bazel-out/k8-opt/bin/tensorflow/python/stateful_random_ops_test_gpu.runfiles/org_tensorflow/tensorflow/python/ops/stateful_random_ops_test.py", line 451, in testSameAsOldRandomOpsGPU
        self._sameAsOldRandomOps(test_util.gpu_device_name(), GPU_FLOATS)
      File "/root/.cache/bazel/_bazel_root/efb88f6336d9c4a18216fb94287b8d97/execroot/org_tensorflow/bazel-out/k8-opt/bin/tensorflow/python/stateful_random_ops_test_gpu.runfiles/org_tensorflow/tensorflow/python/ops/stateful_random_ops_test.py", line 430, in _sameAsOldRandomOps
        compare(dtype, old_normal, new_normal)
      File "/root/.cache/bazel/_bazel_root/efb88f6336d9c4a18216fb94287b8d97/execroot/org_tensorflow/bazel-out/k8-opt/bin/tensorflow/python/stateful_random_ops_test_gpu.runfiles/org_tensorflow/tensorflow/python/ops/stateful_random_ops_test.py", line 398, in compare
        self.assertAllEqual(run_old(), run_new())
      File "/root/.cache/bazel/_bazel_root/efb88f6336d9c4a18216fb94287b8d97/execroot/org_tensorflow/bazel-out/k8-opt/bin/tensorflow/python/stateful_random_ops_test_gpu.runfiles/org_tensorflow/tensorflow/python/ops/stateful_random_ops_test.py", line 395, in run_new
        return new(dtype, gen)
      File "/root/.cache/bazel/_bazel_root/efb88f6336d9c4a18216fb94287b8d97/execroot/org_tensorflow/bazel-out/k8-opt/bin/tensorflow/python/stateful_random_ops_test_gpu.runfiles/org_tensorflow/tensorflow/python/ops/stateful_random_ops_test.py", line 410, in new_normal
        return gen._standard_normal(shape, dtype=dtype)
      File "/root/.cache/bazel/_bazel_root/efb88f6336d9c4a18216fb94287b8d97/execroot/org_tensorflow/bazel-out/k8-opt/bin/tensorflow/python/stateful_random_ops_test_gpu.runfiles/org_tensorflow/tensorflow/python/ops/stateful_random_ops.py", line 576, in _standard_normal
        key, counter = self._prepare_key_counter(shape)
      File "/root/.cache/bazel/_bazel_root/efb88f6336d9c4a18216fb94287b8d97/execroot/org_tensorflow/bazel-out/k8-opt/bin/tensorflow/python/stateful_random_ops_test_gpu.runfiles/org_tensorflow/tensorflow/python/ops/stateful_random_ops.py", line 630, in _prepare_key_counter
        counter = array_ops.bitcast(counter_key[:counter_size], dtypes.uint64)
      File "/root/.cache/bazel/_bazel_root/efb88f6336d9c4a18216fb94287b8d97/execroot/org_tensorflow/bazel-out/k8-opt/bin/tensorflow/python/stateful_random_ops_test_gpu.runfiles/org_tensorflow/tensorflow/python/ops/gen_array_ops.py", line 598, in bitcast
        _ops.raise_from_not_ok_status(e, name)
      File "/root/.cache/bazel/_bazel_root/efb88f6336d9c4a18216fb94287b8d97/execroot/org_tensorflow/bazel-out/k8-opt/bin/tensorflow/python/stateful_random_ops_test_gpu.runfiles/org_tensorflow/tensorflow/python/framework/ops.py", line 6862, in raise_from_not_ok_status
        six.raise_from(core._status_to_exception(e.code, message), None)
      File "<string>", line 3, in raise_from
    tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:CPU:1]. [Op:Bitcast]
    ```

commit 68b74a30fae55a04570fbd3810d28a0fcf44ab17
Author: Andrew Audibert <aaudibert@google.com>
Date:   Mon Oct 26 22:15:16 2020 -0700

    [tf.data service] Fix bug with infinite repeat not working with distributed_epoch.
    
    To perform repeat when using a split provider (currently only done when using distributed_epoch  processing mode), we need to reset the split provider in addition to making a new iterator. Before this CL we did this correctly for FiniteRepeat dataset, but not for ForeverRepeat dataset. This CL fixes the issue for ForeverRepeat dataset.
    
    Without the change, the added test fails with a StopIteration exception.
    
    PiperOrigin-RevId: 339184323
    Change-Id: Ib669ca7ad4c6a1ce87599288587a769256de1a14

commit 0e8ea85a42d5c637d59403f22da381ba2bb2478d
Author: Geoffrey Martin-Noble <gcmn@google.com>
Date:   Mon Oct 26 13:37:57 2020 -0700

    Avoid setting unsupported "-fexceptions" with MSVC
    
    PiperOrigin-RevId: 339107576
    Change-Id: Ibf8ccf481ce604f6789220b59b6cb8e0f1ffa92f

commit 06505d9e18188316f52442ceda4b53868e8e7e24
Author: Jean-Baptiste Lespiau <jblespiau@google.com>
Date:   Thu Oct 22 08:57:12 2020 -0700

    Raise a meaningful exception in the C++ jax.jit on non-hashable object static argnum.
    
    This also fixes 2 tests that were passing non-hashable values to a jitted function.
    
    PiperOrigin-RevId: 338481880
    Change-Id: I62c897a13bb06688d46d84cbcb4b4d5f708b312b

commit c49c73559a7aa3bec8b0d4c42dd23d987ac71862
Author: yuanbopeng <yuanbopeng@tencent.com>
Date:   Wed Oct 21 12:37:35 2020 +0800

    Fix when hdfsBuilderConnect returns NULL, HadoopFileSystem::FileExists returns errors::NotFound exception

commit c3f422ffb978ce49bbbea119203be68b39298fd7
Author: Ran Chen <crccw@google.com>
Date:   Tue Oct 20 18:13:10 2020 -0700

    Support V2 collective in dist strat
    
    With V2 collective ops we can defer instance key assignment to execution time. This avoid the problem that different worker may retrace at different pace.
    
    We use capture_call_time_value instead of a instance key tf.Variable. The latter doesn't work if there're exceptions in the execution since the variable on different workers can go out of sync.
    
    PiperOrigin-RevId: 338175667
    Change-Id: Ie0f5e607a25485c4c10de4a6cae137cb2b7ad729

commit ef1567488ae40bcb3fe9e822d371cf1d4292398c
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Fri Sep 18 06:44:41 2020 -0700

    Correctly raise an error if the Python compilation failed.
    
    There was 2 errors:
    - capturing the error as std::exception was dropping the error message
    - We need to check unconditionally (line 741) that no error was raised, in presence of multithreading.
    
    PiperOrigin-RevId: 332441152
    Change-Id: I0aa663346a0b428050d212de22734b2eb362d488

commit 6178c32ac7df1e9b95961b4dce6b27ba2607f3aa
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Thu Sep 17 03:45:48 2020 -0700

    [MLIR][KernelGen] Make no exception for `constant_like` when lowering TF and
    CHLO to MHLO
    
    When legalizing TF operations to MHLO make no exception for the `constant_like`
    operation on unranked tensors.  To lower this on unranked operands the code can
    always be transformed to ranked operations first.
    
    PiperOrigin-RevId: 332199975
    Change-Id: Iade8f49b64a89fcc59223d4b5860bbcb0038bcce

commit 7f22b0678c973a555b71482aabe0b30008daaa05
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Fri Sep 11 16:28:06 2020 -0700

    Add a visibility exception for convert_to_constants.
    
    PiperOrigin-RevId: 331245577
    Change-Id: I45f7abcb781e0fafb98e87f373839c2f5aa10da0

commit 8811098244019388fb0c527c285b64a347ad6a72
Author: nyagato_00 <nyagato.eva@gmail.com>
Date:   Sat Aug 29 17:39:37 2020 +0900

    TFLITE_USE_DELEGATE has been changed to use GpuDelegateOptions instead of TFLGpuDelegateOptions.
    
    When I tried to run the sample using the GPU-supported version of TensorFlow Lite, I encountered an exception on line 419 of tensorflow/lite/examples/ios/camera/CameraExampleViewController.mm.
    
    The exceptions that occurred are as follows
    "Unknown type name 'TFLGpuDelegateOptions'; did you mean 'GpuDelegateOptions'?"
    
    Using GpuDelegateOptions seemed to be the right thing to do, so I modified the code to use this one.
    
    Official tutorial: https://www.tensorflow.org/lite/performance/gpu#ios_with_xcode

commit a05bb5559f80ef1401bada468414e30161845713
Author: Ongun Kanat <ongun.kanat@gmail.com>
Date:   Fri Aug 28 04:12:06 2020 +0200

    Use a ternary if for checking main_op is None
    
    Fixes a minor bug in saved_model which raises an
    exception since evaluating ops as booleans are
    forbidden in TF 2.x
    
    Fixes #38041

commit 54474d675c1c04710682eb8af1b8b22bfe8c9ead
Author: Advait Jain <advaitjain@google.com>
Date:   Mon Aug 24 17:42:37 2020 -0700

    Update guidance to use the SIG micro group to discuss exceptions to pause on
    accepting optimized kernel PRs.
    
    PiperOrigin-RevId: 328240994
    Change-Id: I5b5a58ae196cc5f9672dfad2e78459f69369f717

commit 70a041db8aa09ff6a59219c75c01ded9bfe8e8dd
Author: Yong Tang <yong.tang.github@outlook.com>
Date:   Wed Aug 19 20:02:32 2020 +0000

    Expand captured exception to ValueError+TypeError, for internal test fix
    
    Signed-off-by: Yong Tang <yong.tang.github@outlook.com>

commit bf9a705387b76ff9b58d89c71448dac5bd6b5092
Author: Yong Tang <yong.tang.github@outlook.com>
Date:   Thu Aug 13 19:11:53 2020 +0000

    Fix floating point exception when zero shape tensor passed to tf.reverse
    
    This PR tries to address the issue raised in 42248 where
    floating point exception was thrown out when zero shape tensor is passed
    to tf.reverse.
    
    This PR fixes 42248.
    
    Signed-off-by: Yong Tang <yong.tang.github@outlook.com>

commit 1e6fa32dfe9d3f1631ed6218985426d3f6ca4860
Author: Revan Sopher <rsopher@google.com>
Date:   Fri Aug 7 14:36:54 2020 -0700

    Exception grammar fix.
    
    PiperOrigin-RevId: 325510739
    Change-Id: Idc535c7c62629b53e51919e8cc417e89e7168175

commit 9ae671b9c7306d65250fa32b1cf808524f458bfc
Author: Rick Chao <rchao@google.com>
Date:   Wed Aug 5 23:25:14 2020 -0700

    MultiProcessRunner: Make MultiProcessRunnerResult available in the exception
    re-raised from subprocesses.
    
    PiperOrigin-RevId: 325172785
    Change-Id: If910cb898b6f5c0c9c532f789533bb5b9d15bd95

commit 0c2b2a3063dc4334b62eade3dace0e8c171df539
Author: Advait Jain <advaitjain@google.com>
Date:   Wed Aug 5 16:37:13 2020 -0700

    Remove logic that is no longer needed and make GetTensor availability strict.
    
     * Most kernels have been ported over to use the new EvalTensor API. The
             exceptions are kernels in arc_mli, ethos-u, xtensa_hifi and
       xtensa_hifimini_staging.
    
     * The kernel tests were previously changed to where they would fail unless they
       used EvalTensors
    
     * This change enforces the fact that kernels should no longer be using full
             TfLiteTensors in the Eval functions. Calling GetTensor from a kernel's Eval
       will now crash due to dereferencing a nullptr.
    
    PiperOrigin-RevId: 325126736
    Change-Id: I1a1c9af7dcca5765461794a60ef626387fa82638

commit 71bb46a15f6dffa16b11f597d2059028c9fd4440
Author: Sanjoy Das <sanjoy@google.com>
Date:   Fri Jul 31 19:12:08 2020 -0700

    Clean up error message differences between XLA and TF for convolutions
    
      1. The Conv2DTest.testOpEdgeCases test was enabled, and the two places where
         the XLA and TF error messages were different now check for different error
         messages.
    
      2. Change TF to return an Unimplemented error instead of an InvalidArgument
         error for unsupported convolution configurations.  This is what XLA does and
         seems more logical.
    
      3. Change the tests to use placeholders correctly as otherwise the XLA version
         throws an exception because of the missing feeds.
    
    PiperOrigin-RevId: 324338945
    Change-Id: Ib6999c31918987cc1db9c0ba220e229097157747

commit b4ba1cc89762213badea49807757f6788bb94bb2
Author: Lukas Geiger <lukas.geiger94@gmail.com>
Date:   Wed Jul 8 00:18:25 2020 +0200

    Support path-like objects in FileIO and GFile
    
    [Path-like objects](https://docs.python.org/3/glossary.html#term-path-like-object) as used in [`pathlib`](https://docs.python.org/3.8/library/pathlib.html?highlight=pathlib#module-pathlib) are the recommended way to interact with file paths in Python. This PR changes `FileIO` to allow for path-like objects which would otherwise raise an exception when passed to `compat.as_bytes`.
    `FileIO` and `GFile` emulate the API of [Python's builtin `open`](https://docs.python.org/3.8/library/functions.html#open) this possibility will be expected by users and should make switching between `open` and `GFile` easier.

commit 401dad16ea5a4b0fc13e373c347404b98f2b030a
Author: Nick Kreeger <kreeger@google.com>
Date:   Wed Jun 17 06:43:11 2020 -0700

    Add default values in MicroInterpreter constructors.
    
    The MicroInterpreter uses a few values to check state - there is a scenario where these values are not always defaulted to internal states. This can cause an exception when the interpreter tries to run. To ensure things work properly, default values.
    
    I also updated the MicroInterpreter test to use the new RecordingMicroAllocator. Two new tests have been added:
    
    1.) Ensure that the interpreter fails to allocate with too small an arena at Invoke() (insured by recording allocation APIs)
    
    2.) Ensure that the interpreter does not allocate anything at construction time - only at Invoke() (or manually with AllocateTensors()).
    
    This will give us better coverage when we add more tenant use cases.
    
    PiperOrigin-RevId: 316877994
    Change-Id: I0582080a1fb649276076371be991a13392324801

commit bfbec5fb039001aaf9ae7bff05d3dee3bbf54d82
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Mon Jun 15 16:39:39 2020 -0700

    Add a configuration option to BaseLayer/V1 that will throw an exception if a user tries to reconstitute a model with these layer objects in it but does not provide the base class.
    
    This CL also changes SavedModel serialization code to use the Keras serialization name (which is different from the class name when using the register_keras_serializable decorator). This should fully enable custom layers in SavedModels.
    
    PiperOrigin-RevId: 316570643
    Change-Id: I5755a59cb74db8bbe6c3f607804abfb67c9ea8e0

commit bef97131885096a15402e33051053240c3beda6a
Author: Reed Wanderman-Milne <reedwm@google.com>
Date:   Thu Jun 11 11:39:18 2020 -0700

    Add `get_device_details` API.
    
    This API can get details about physical devices. Right now, only GPUs are supported, and the only fields are "name" and "compute_capability". The primary motivation is to determine whether mixed precision will run well, as it only results in significant speedups on GPUs with compute capability 7.0 and greater. In general, it's rare that querying device details is necessary, as TensorFlow runs most ops well on all devices, but mixed precision is an exception.
    
    PiperOrigin-RevId: 315943445
    Change-Id: I077fdc8f87a713ace74037fd2d82eede48740067

commit b0375e267c55ae97e65b50ce51200e012ac3e8ad
Author: Yong Tang <yong.tang.github@outlook.com>
Date:   Sat Jun 6 01:24:20 2020 +0000

    Fix floating point exception with tf.unravel_index
    
    This PR tries to address the issue raised in 40204 where
    `tf.unravel_index` caused floating point exception when any one
    element is 0 in `dims`.
    
    The issue is that `indices` in `tf.unravel_index` should make sure
    it is not out of boundary compared to `dims`.
    
    This PR fixes the issue by adding a check before hand, though Eigen.
    
    This PR fixes 40204.
    
    Signed-off-by: Yong Tang <yong.tang.github@outlook.com>

commit e1b6966d43f734e7985433cfedcd4db415d95bab
Author: Haoyu Zhang <haoyuzhang@google.com>
Date:   Thu Jun 4 18:17:24 2020 -0700

    Use coordinator.join instead of joining threads to make sure thread exceptions are reliably thrown.
    
    PiperOrigin-RevId: 314842568
    Change-Id: I8be3f86eabeb4f44dd96b2303da720761bb1ea2a

commit e5dfc3bc38696060922b4d8a04d6e773467b9f08
Author: Advait Jain <advaitjain@google.com>
Date:   Wed Jun 3 13:41:18 2020 -0700

    Split OpResolvers out of micro_framework build target.
    
    As part of the OpResolver refactor to reduce the code size, the micro_framework
    target would become even more monolithic.
    
    This change:
     * splits out the OpResolvers to keep the build targets more modular.
     * moves AllOpsResolver and MicroMutableOpResolver implementation side-by-side
       and in the same cc_library for consistency.
     * put AllOpsResolver in the same namespace as MicroOpsResolver for consistency
       (and since the include path is being changed and dependencies need to be
        updated anyway).
     * make micro/kernels private visibility (with one exception).
    
    PiperOrigin-RevId: 314595574
    Change-Id: Ie0aa716e37472b57903896d2dd5e2f606585db98

commit 4bc4fa3cb7a15566f89f0347b3022249a2092e5c
Author: Kim, Young Soo <kimys@victech.io>
Date:   Thu May 28 13:51:35 2020 +0900

    Fix a python exception issue on using Sequence object of keras with MirroredStrategy

commit 1c2527fd1134753431796831dcf225ce0846862d
Author: Deven Desai <deven.desai.amd@gmail.com>
Date:   Wed May 27 17:17:39 2020 +0000

    [ROCm] Fix for ROCm CSB breakage - 200527
    
    The following commit introduces a new unit-test which fails on ROCm.
    
    https://github.com/tensorflow/tensorflow/commit/dbef0933ebe4d3d85be73e88cfe5f83cac0ae1d6
    
    I think that this unit-test is for checking the reduced memory usage of the gradient checkpointing method.
    
    The sub-test `test_does_not_raise_oom_exception` fails on ROCm, because on the ROCm platform the scratch space required for doing backward convolution pushes the total memory allocation just beyond the 1GB limit imposed by the testcase.
    
    This fix moves up the threshold by 128MB (from 1024 MB to 1152 MB). This still presevers the intent of the unit-test, i.e. the `test_raises_oom_exception` continues to raise the exception, while also allowing the `test_does_not_raise_oom_exception` sub-test to pass on the ROCm platform.

commit b847ff9b3067a101296d1d857358b5bdeefd2342
Author: Haoyu Zhang <haoyuzhang@google.com>
Date:   Wed May 27 09:37:50 2020 -0700

    Throw relevant exceptions based on status when copying Eager tensors.
    
    Instead of blindly throwing a RuntimeError, throw a registered OpError exception based on the status when executing EagerTensor `.numpy()`.
    
    PiperOrigin-RevId: 313405387
    Change-Id: I6ee8e804f96c9baf0c1af77a958bb1f4b26e614b

commit 2bbf57217f277f20be3d4eabc0fb839011251ab5
Author: Tres Popp <tpopp@google.com>
Date:   Fri May 15 13:08:27 2020 -0700

    Change XLA's default to disable cpu_fast_math options with the exception of min_max behavior.
    
    This is due to issues around inf/nan behavior on the cpu. tf_library still enables all fast math options though with the observation that currently most users of this are desiring performance and have tested their code already.
    
    PiperOrigin-RevId: 311787817
    Change-Id: Iab012d49435845dc5b7a5fcedca89bf159ec65a3

commit 6ef6c8d5e5c1661295d9e64c1ecf16d688ebb256
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Fri May 8 11:44:28 2020 -0700

    Change the logging from warning to error when there is an exception at session close.
    
    PiperOrigin-RevId: 310598070
    Change-Id: Id50e116527814ed945aaeb575d811d362afe502a

commit 06b9206d647e7ccf87eb7dbc95885ed99a7692fc
Merge: b8e808aa17f f17392238e8
Author: Andrew Cavanaugh <andrewc@xmos.com>
Date:   Wed May 6 16:14:26 2020 -0400

    Merge branch 'master' of github.com:tensorflow/tensorflow
    
    * 'master' of github.com:tensorflow/tensorflow: (931 commits)
      Update make_tensor_proto to support nested nparray values when dtype is specified.
      Add a script to install patchelf on docker containers and add it to multipython. Install auditwheel as well.
      Expose disable_per_channel in MLIR to be used experimentally by tflite tooling
      Improve TensorFlow arithmatic op folders
      Raises a more meaningful error when fdef is missing
      Fix layout_optimizer_test on Windows.
      [PropagatorState] Use `IterationState*` instead of `int64` iteration ID in `TaggedNode`.
      Disable only the TPU version of distribute_strategy_test
      Some tests fixes.
      Go: Update generated wrapper functions for TensorFlow ops.
      Replace safeguard against aliasing cond variables with a dynamic check. It is more verbose but more robust in the presence of exception-driven control flow.
      Internal change
      Include new op EnqueueTPUEmbeddingRaggedTensorBatch in the list of TPUEmbedding enqueue ops don't get auto control edges created so that they can be used in TF2/eager mode in tf.functions.
      Disable flaky test
      [WhileOp] Support forwarded inputs in the `ComputeAsync()` path.
      [ArgOp] Use `CanConsumeArg()` and `ConsumeArg()` when possible.
      Improve TensorFlow arithmatic op folders
      [tfdbg2] Implement the to_json() methods of two data classes
      Go: Update generated wrapper functions for TensorFlow ops.
      Disable flaky XLA test on GPU
      ...

commit 8181d041c800433ac74f4d81566bc1f0213c5093
Author: Dan Moldovan <mdan@google.com>
Date:   Wed May 6 09:44:36 2020 -0700

    Replace safeguard against aliasing cond variables with a dynamic check. It is more verbose but more robust in the presence of exception-driven control flow.
    
    PiperOrigin-RevId: 310169792
    Change-Id: If4c918c38daea1aa270b7d89d4ea9372707766f0

commit 5c9f025c55f9f76fd398b2ced9c9e1175552c6a5
Merge: 6d11f0fe339 7b4e8e2719d
Author: TensorFlower Gardener <gardener@tensorflow.org>
Date:   Wed May 6 08:04:54 2020 -0700

    Merge pull request #38899 from yongtang:29661-histogram_fixed_width_bins-exception
    
    PiperOrigin-RevId: 310151116
    Change-Id: If6f1eebf7517fd48a85dd6887154850422d111e5

commit 780cafeee30ac18afe484a0c3eada05e948f37b3
Author: Anjali Sridhar <anjalisridhar@google.com>
Date:   Fri May 1 12:57:50 2020 -0700

    Fix test by raising a class level exception during setup.
    
    PiperOrigin-RevId: 309458102
    Change-Id: I6b406a6b17726e409ab4798f40dd5f0791c696db

commit 30adc877170ce07ddd78648484b329292030a1bb
Author: Yong Tang <yong.tang.github@outlook.com>
Date:   Sat Apr 25 22:03:47 2020 +0000

    Add test case for exception handling in `tf.histogram_fixed_width_bins`
    
    Signed-off-by: Yong Tang <yong.tang.github@outlook.com>

commit 704c6eb8a6f766e2d4d2f3b004bc26e9a1d55f36
Author: Yong Tang <yong.tang.github@outlook.com>
Date:   Sat Apr 25 21:59:23 2020 +0000

    Fix exception handling of tf.histogram_fixed_width_bins
    
    This PR tries to address the issue in 29661 where
    tf.histogram_fixed_width_bins does not throw out an exception
    when (value_range[0] < value_range[1]) is not satified.
    This is dfferent from the documentation specified in the docstring.
    
    This is different from a similiar API `tf.histogram_fixed_width`
    where exception is thrown out correctly. The reason is that
    `tf.histogram_fixed_width_bins` is handled in python while
    `tf.histogram_fixed_width` has a C++ kernel.
    
    This PR uses tf.Assert to make sure `(value_range[0] < value_range[1])`
    satisty.
    
    This PR fixes 29661.
    
    Signed-off-by: Yong Tang <yong.tang.github@outlook.com>

commit b97cc6fd437e3ab8b788853558733f9420125245
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Fri Apr 24 13:14:04 2020 -0700

    handle the case where cupti subscribe return CUPTI_ERROR_MAX_LIMIT_REACHED.
    we will not touch other cupti API in this case ( probably with the exception of cutpiGetTimestamp, which I think it is okay, cupti timestamp looks like from wall clock).
    
    PiperOrigin-RevId: 308311957
    Change-Id: Id37a0304bffc268f2139f8a5d7c45277d20ddf43

commit f39aab3092598475eeab815b39efa70712d18c9d
Author: Edward Loper <edloper@google.com>
Date:   Mon Apr 20 08:00:45 2020 -0700

    Functions returned by the `get_concrete_function` method of `tf.Function` objects can now be called with arguments consistent with the original arguments or type specs passed to `get_concrete_function`.  In particular:
    
    * If a composite tensor (such as RaggedTensor or SparseTensor) was passed to `get_concrete_function`, then the returned function will accept a composite tensor of the same type for that argument.
    
    * If a nested structure (such as a list or dict) was passed to `get_concrete_function`, then the returned function will accept a value with the same nesting structure.  Each tensor or composite tensor value must have the same type as was used in the original argument; and each non-Tensor value (such as bools or ints) must be equal value that was used in the original argument.
    
    * If a non-tensor value (such as a bool or int) was passed to `get_concrete_function`, then the returned function no longer deletes that argument; instead, it updates the argument's default value to the value that was passed to `get_concrete_function`.  Passing in any other value will raise an exception.
    
    * Arguments are not renamed based on `TensorSpec.name`.
    
    For backwards compatibility, the functions returned by `get_concrete_function` will continue to accept arguments with the existing calling conventions (where nested structures and composite tensors are flattened; non-tensor arguments are deleted; suffixes are automatically added to disambiguate arguments with the same name; and TensorSpec.name is used to rename arguments).  However, the preferred calling convention is the one that is consistent with the original arguments or type specs passed to `get_concrete_function`.
    
    PiperOrigin-RevId: 307398918
    Change-Id: Ie4685b32d9f151c82f6c79a6c41379faa96b5ee8

commit 13ed57efaedb2c7995c02222f2f32523b4ddd703
Author: Edward Loper <edloper@google.com>
Date:   Fri Apr 17 06:41:13 2020 -0700

    Fix bug in test_concrete_function_backprop test in load_test.py.
    
    Function used input_signature with one shape, but was called with another shape.  This doesn't raise an exception in eager mode, but it does raise an exception in graph mode.
    
    PiperOrigin-RevId: 307033906
    Change-Id: I213c5e10056bf926963d2f4332fa7a5618f6c90d

commit 4ad6716cf6759432421e27181ee024897fbacc20
Author: Andrew Audibert <aaudibert@google.com>
Date:   Thu Apr 9 09:55:31 2020 -0700

    Improve error messages for invalid shapes/types.
    
    This CL adds more context to the error message when users give us invalid tensor shapes or types.
    
    Before, trying to use [tf.int64] as a type would produce the error "TypeError: unhashable type: 'list'". Now we will produce the error "Cannot convert value [tf.int64] to a TensorFlow DType".
    
    Before, trying to use [[1]] as a shape would produce the error "Dimension value must be integer or None or have an __index__ method, got [1]". Now we will produce the error
    "TypeError: Dimension value must be integer or None or have an __index__ method, got value '[1]' with type '<class 'list'>'
    
    The above exception was the direct cause of the following exception:
    
    TypeError: Failed to convert '[1]' from shape '[[1]]' to a dimension. A shape should either be single dimension (e.g. 10), or an iterable of dimensions (e.g. [1, 10, None])."
    PiperOrigin-RevId: 305704020
    Change-Id: I30c09faae1f44c4017ddbbb4e101c0b818dc14f1

commit e0567e372a9802c0ccf41421fecc2a5cda0efe25
Author: Yong Tang <yong.tang.github@outlook.com>
Date:   Tue Mar 31 23:24:26 2020 +0000

    Add int16 support for tf.math.minimum and tf.math.maximum
    
    I was working on lossless audio data which is primary int16 PCM data,
    when trying to do a simple minimum to my surprise I noticed that in16
    is not supported:
    ```
    >>> x = tf.constant(1, tf.int16)
    >>> y = tf.constant(2, tf.int16)
    >>> tf.math.minimum(x, y)
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
      File "/Library/Python/3.7/site-packages/tensorflow/python/ops/gen_math_ops.py", line 5961, in minimum
        _ops.raise_from_not_ok_status(e, name)
      File "/Library/Python/3.7/site-packages/tensorflow/python/framework/ops.py", line 6653, in raise_from_not_ok_status
        six.raise_from(core._status_to_exception(e.code, message), None)
      File "<string>", line 3, in raise_from
    tensorflow.python.framework.errors_impl.NotFoundError: Could not find valid device for node.
    Node:{{node Minimum}}
    All kernels registered for op Minimum :
      device='XLA_CPU_JIT'; T in [DT_FLOAT, DT_DOUBLE, DT_INT32, DT_INT64, DT_BFLOAT16, DT_HALF]
      device='CPU'; T in [DT_FLOAT]
      device='CPU'; T in [DT_HALF]
      device='CPU'; T in [DT_BFLOAT16]
      device='CPU'; T in [DT_DOUBLE]
      device='CPU'; T in [DT_INT32]
      device='CPU'; T in [DT_INT64]
      device='XLA_CPU'; T in [DT_FLOAT, DT_DOUBLE, DT_INT32, DT_INT64, DT_BFLOAT16, DT_HALF]
     [Op:Minimum]
    ```
    
    As such I used a workardound which looks quite awkward:
    ```
    >>> x = tf.constant(1, tf.int16)
    >>> y = tf.constant(2, tf.int16)
    >>> z = tf.stack([x, y])
    >>> tf.math.reduce_min(z)
    <tf.Tensor: shape=(), dtype=int16, numpy=1>
    >>>
    ```
    
    This PR adds int16 support for `tf.math.minimum` and `tf.math.maximum`.
    
    Signed-off-by: Yong Tang <yong.tang.github@outlook.com>

commit 367629f45afb7b876fc87d8aa4b4cdcc9be32547
Author: Jacques Pienaar <jpienaar@google.com>
Date:   Mon Mar 30 08:34:43 2020 -0700

    Remove old exceptions as post removal date
    
    PiperOrigin-RevId: 303746718
    Change-Id: Ie44c59dc00a84a58d6c68312e39ec47d51da34be

commit e24331bf116f5efc8d42bc888a0dbd271aa92aab
Author: RJ Skerry-Ryan <rjryan@google.com>
Date:   Sat Mar 28 10:02:22 2020 -0700

    Fix race condition in TensorArrayWrite grad.
    
    It was possible for a TensorArrayWrite/Scatter/Split to occur after its corresponding TensorArrayGrad op was executed. The TensorArrayGrad op must execute after the last write so that it is created with the correct size. Since TensorArrayGrad converts its source TensorArray to fixed-size, this causes an exception when the final TensorArrayWrite executes since it cannot grow the TensorArray. This fix introduces a control dependency on the TensorArrayWrite op, to ensure TensorArrayGrad runs after the last write.
    
    Also, fix a similar pattern in TensorArrayScatter and TensorArraySplit's gradients even though the race has not been observed for them.
    
    PiperOrigin-RevId: 303515506
    Change-Id: Ia363b94922b8855f01faa801818839559d55b0da

commit a0f63991647908b3e258c594bcfba9d15b8c16a0
Author: Dan Moldovan <mdan@google.com>
Date:   Fri Mar 27 11:09:26 2020 -0700

    Do not catch and warn for exceptions raised while calling a function without conversion. Fixes #36792.
    
    PiperOrigin-RevId: 303366732
    Change-Id: I579793f5625bf90e07ab8ea1cb97bd324bae9935

commit 53eed0cb296927dfc8933310f9a1b46b2c8d0c51
Merge: 5fb96e3d2f7 01e73ef18f7
Author: Goldie Gadde <ggadde@google.com>
Date:   Mon Mar 16 07:04:01 2020 -0700

    Merge pull request #37465 from tensorflow/haoyuzhang-2.2cp
    
    Trigger sync only if exiting async_scope without exception.

commit 0c79d3cdee83af0cf3bd7a9c7522ea88981159a6
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Tue Mar 10 12:13:59 2020 -0700

    Fix apparent typo in an exception message that refers to the input shape instead of the output shape.
    
    PiperOrigin-RevId: 300148776
    Change-Id: Idd3d40455e248688cb73d9d32f1ad11ef5fb389c

commit 01e73ef18f7335aeca9bf126d993107dbf41811b
Author: Haoyu Zhang <haoyuzhang@google.com>
Date:   Mon Mar 9 21:56:38 2020 -0700

    Trigger sync only if exiting async_scope without exception.
    
    If code in async_scope already throws an exception, triggering another remote sync might cause derived errors to be returned and lead to unexpected exception types.
    
    PiperOrigin-RevId: 300013192
    Change-Id: Id310ca105ce2fdfbc0f19c5362834a56906fb35f

commit 707fe9da7019a4543f630198c98018c74939be2f
Author: Haoyu Zhang <haoyuzhang@google.com>
Date:   Mon Mar 9 21:56:38 2020 -0700

    Trigger sync only if exiting async_scope without exception.
    
    If code in async_scope already throws an exception, triggering another remote sync might cause derived errors to be returned and lead to unexpected exception types.
    
    PiperOrigin-RevId: 300013192
    Change-Id: Id310ca105ce2fdfbc0f19c5362834a56906fb35f

commit ec6018383820c1bbd24689b8c657bb370ead8e77
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Wed Mar 4 00:35:28 2020 -0800

    Clean up profiler when exception happens.
    
    PiperOrigin-RevId: 298788827
    Change-Id: Ia420712cd0edf004aa4135cf45409d88528ed136

commit 58f761fe5158d5ddea427a840ffd11646afd09dd
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Wed Mar 4 00:35:28 2020 -0800

    Clean up profiler when exception happens.
    
    PiperOrigin-RevId: 298788827
    Change-Id: Ia420712cd0edf004aa4135cf45409d88528ed136

commit 63ff66a3abb1563e9ab33503b7ba1f53ba645c0c
Author: Dan Moldovan <mdan@google.com>
Date:   Sun Mar 1 18:11:59 2020 -0800

    Guard the function return flag with a try/except flag so that it retains its integrity when an exception is raised from the return value expression.
    
    PiperOrigin-RevId: 298246660
    Change-Id: Iac29f88c90d9c597b261f2791ddf74e57b287cc1

commit 4699e8462f24e59fd5c70f134762f39d70573d65
Author: Yuefeng Zhou <yuefengz@google.com>
Date:   Fri Feb 28 17:30:59 2020 -0800

    Throw an exception if steps_per_epoch is not specified in multi-worker training and dataset is sharded.
    
    PiperOrigin-RevId: 297971914
    Change-Id: I5cec1a58f89276cd1ea9fbfe6e9f633a4306319b

commit 49532786d823adb4dbdb7ba608ed3d9aa2ea12e8
Author: Ken Franko <kfranko@google.com>
Date:   Fri Feb 28 16:34:44 2020 -0800

    Add pure eager test for TPUStrategy, throws an unimplemented exception.
    
    PiperOrigin-RevId: 297962740
    Change-Id: Ib29b6a4ff85980fb2c85f87e4577c0adef594893

commit 957792181b672dbfe31bfed14e533fa25b81fc85
Author: Haoyu Zhang <haoyuzhang@google.com>
Date:   Mon Feb 24 22:03:49 2020 -0800

    Introduce async_wait and async_clear_error primitives.
    
    Add tests to demonstrate the usage of the primitives in handling exceptions thrown in remote async execution.
    
    PiperOrigin-RevId: 297041596
    Change-Id: Ibc9ffa7c5eaaa9b62c6849e815c0c933ff0ec86c

commit 9553f81edfd2b4f670ee2d05ca42132dc4d93f3c
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Thu Feb 20 15:58:51 2020 -0800

    Allow using tf.identity to explicitly copy tensors.
    
    When device placement policy is 'explicit', and a tensor copy is
    required for an operation input, the program will fail with an error
    message that suggests a solution of the form
    
      with tf.device(dev): x = tf.identity(x)
    
    This does not work currently. This change adds a policy exception for
    the "Identity" operation, so the above starts working.
    
    PiperOrigin-RevId: 296317942
    Change-Id: Ie2e79c8b095bed9376976a8dcd1b49a0af9b7dc9

commit 33d679e66ae05e79215ec32cf91565d1b07aba56
Author: Dan Moldovan <mdan@google.com>
Date:   Wed Feb 5 12:43:50 2020 -0800

    Mark `raise` as exit node in the CFG. This ensures liveness analysis correctly marks variables found in blocks that raise exceptions.
    Expand all CFG tests to explicitly verify the entry and exit nodes.
    Include additional tests in dependent components.
    
    PiperOrigin-RevId: 293428478
    Change-Id: Icf62593c52ac651fb9a8144043a3124f19849b75

commit dea01bb56459c35b77730ff1261c6306b75314d4
Author: Ran Chen <crccw@google.com>
Date:   Wed Feb 5 12:22:55 2020 -0800

    Implement AggregatingVariable.synchronization
    
    This should fix the Unimplemented exception when saving models under CentralStroageStrategy.
    
    PiperOrigin-RevId: 293424402
    Change-Id: I3ad270bb57c08032be47416e6675ec45aa00034f

commit ab0e8d2629e2eee10731014f7cc9ecce63d3a9ac
Author: Nick Felt <nickfelt@google.com>
Date:   Tue Feb 4 19:04:40 2020 -0800

    Fix EventFileWriter to surface writer thread exceptions and avoid deadlock
    
    Fixes the deadlock issue where the background thread used by EventFileWriter could die silently and leave the calling code that uses EventFileWriter blocked. The specific issue was blocking in flush() due to the queue.join() call that would never return, but the issue could also arise in close() since it calls flush(), as well as in add_event() since queue.put() would block forever once the queue fills up with no consumer alive to empty it.
    
    We fix these issues via a combination of techniques:
    
    1) Replace the standard library queue with a fork that strips out unused functionality (like task completion tracking, non-blocking get/put, and inheritance) and adds new close() functionality that does what we need - causes any pending or future calls to put() to raise an exception. This solves the deadlock issue for add_event() and ensures we can safely do blocking enqueues without risking deadlock.
    
    2) Re-implement flush() to avoid using queue.join() and task completion tracking. Instead, we change flush() to use a sentinel queue element, akin to close(), indicate the point in the queue we wish to flush until, and then to use a threading.Event to block on completion. This way we can notify the main thread either when the flush completes successfully or when the writer thread exits unexpectedly and solve the deadlock issue in flush().
    
    3) Add logic to propagate exceptions encountered by the writer thread, so that after it dies, the next call to add_event() or flush()/close() that encounters the closed queue can discover the exception and reraise it to the calling code.
    
    Lastly, I added four tests and confirmed that prior to these changes, they time out on deadlock (except for `raisedFromAddEvent` which fails at assertRaises, which is expected since it tests behavior that was made newly strict in the fixed code), and after these changes, they pass with `--runs_per_test=100`.
    
    PiperOrigin-RevId: 293278306
    Change-Id: Ib2ee8bbd34e31ed64d639a1b13eff094a8a7b971

commit 074ad73c37a447f046a046b1d5835d76542f4210
Author: Rahul Huilgol <huilgolr@amazon.com>
Date:   Wed Oct 16 00:53:59 2019 -0700

    Raise error if we hit an unknown exception while reading file from s3

commit 843a205b3ce0b4ae2b4395e598c1e0ff3f891e98
Author: Reed Wanderman-Milne <reedwm@google.com>
Date:   Sat Jan 25 00:05:58 2020 -0800

    Change AddLayer to MultiplyLayer.
    
    AddLayer triggered a race condition in certain codepaths.
    
    In particular, sometimes Keras would rely on the fact a Dataset iterator op would raise an error if the next element was retrieved when there was no remaining elements. In this case, Keras would catch the exception and mark that the epoch is done. However, in a model consisting of a single AddLayer whose loss is the output of AddLayer, the gradient does not depend on the input, as the gradient is always 1. This means the graph executor can apply the gradient to variables before the dataset iterator op is called. On the step where the iterator would normally throw an exception, it's possible for gradients to be applied before the exception is called. As a result, gradients are applied for one extra step, causing unit tests to fail.
    
    MultiplyLayer does not have this issue. The value of the gradient depends on the value of the input, so the exception would be thrown before the gradient was applied to the variable.
    
    This issue did not occur on any codepath run in the current unit tests. But I plan on adding new unit tests which exercise codepaths which would have caused this error.
    
    PiperOrigin-RevId: 291505658
    Change-Id: Ia529482e56986b63c4b705b2eab8970540cada10

commit 4363627ba26fd10192b68c6817929fe9aec075e6
Author: Davide Libenzi <dlibenzi@google.com>
Date:   Wed Jan 15 15:20:53 2020 -0800

    Remove noexcept from tstring defaulted move constructor to avoid versions of std::string which do not have that exception specifier in the signature, from fail to compile.
    
    ERROR: /tmp/pytorch/xla/third_party/tensorflow/tensorflow/compiler/xla/service/cpu/BUILD:588:1: C++ compilation of rule '//tensorflow/compiler/xla/service/cpu:runtime_matmul' failed (Exit 1)
    In file included from tensorflow/compiler/xla/service/cpu/runtime_matmul.cc:16:
    In file included from ./tensorflow/compiler/xla/service/cpu/runtime_matmul.h:20:
    In file included from ./tensorflow/core/platform/types.h:22:
    ./tensorflow/core/platform/tstring.h:141:12: error: exception specification of explicitly defaulted move assignment operator does not match the calculated one
      tstring& operator=(tstring&&) noexcept = default;
               ^
    1 error generated.
    PiperOrigin-RevId: 289948607
    Change-Id: I9578c6964e0f70dee6ff1a4186bf7b9c08089315

commit 0f57d4f0b3eb4278ea1127f6fcd9fcafa58dd59c
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Fri Jan 10 11:05:38 2020 -0800

    Fix a typo in exception message.
    
    PiperOrigin-RevId: 289125678
    Change-Id: I9fe754ce1764b9e0200eb030aaf542b6ddd46e4b

commit 30a3ac9cf325108b6c8ac92fd05f588326fbf2fc
Author: Lu Wang <luwa@google.com>
Date:   Mon Jan 6 11:37:22 2020 -0800

    Document exceptions for Interpreter in the base java API.
    
    PiperOrigin-RevId: 288342138
    Change-Id: I5532be5c598806f874eb777ee3e659c737646814

commit b4fd6a5963b9481cb0f4ae07e928536b154a676b
Author: Karim Nosir <karimnosseir@google.com>
Date:   Thu Jan 2 15:02:29 2020 -0800

    Throw UnsupportedOperationException if loading hexagon delegate shared library failed to load at startup.
    
    PiperOrigin-RevId: 287900992
    Change-Id: If6705db1a0ce842a792b193e681172ff2d7f001d

commit 7a878701c91f5569351ac598608fde217d37fe93
Author: Mehdi Amini <aminim@google.com>
Date:   Mon Dec 23 15:33:04 2019 -0800

    Update MLIR License to be Apache 2 with LLVM Exceptions as part of the migration to LLVM
    
    PiperOrigin-RevId: 286951326
    Change-Id: Ie079b4a9f8ce09397698c27267eda984441ccbb5

commit 90c36186535cb0a71544d541ccbef9901bf8463d
Author: Sergei Lebedev <slebedev@google.com>
Date:   Thu Dec 19 08:12:47 2019 -0800

    Do not use DCHECK in PyExceptionRegistry
    
    PiperOrigin-RevId: 286395088
    Change-Id: I91015bcde147b90457a8a20ac4d60e77bede0254

commit cf6c60c8075f54c9abdd5b0670076da3f397c87f
Merge: 89625fe50e8 92bb6256b50
Author: TensorFlower Gardener <gardener@tensorflow.org>
Date:   Mon Dec 16 05:50:14 2019 -0800

    Merge pull request #34941 from hugosjoberg:fix-undocumented-exception
    
    PiperOrigin-RevId: 285754455
    Change-Id: I8f1e4e662e9cd381ad99afeca99a51abfb87b45d

commit 92bb6256b50be501a365d89c87d3a7096b4ea939
Author: Hugo Sjöberg <hugo.sjoberg88@gmail.com>
Date:   Tue Dec 10 20:51:00 2019 +0100

    Update docstring to clarify exception

commit 77cdb31c8025c2d6051b943dc23f82dc7880a74f
Author: Hugo Sjöberg <hugo.sjoberg88@gmail.com>
Date:   Sun Dec 8 15:18:34 2019 +0100

    Use common exception for unsupported conversion
    
    Both ValueError and NotImplementedError was
    raised when a conversion in `convert_entity_to_ast`
    was unsupported.
    
    Common exception: `NotImplementedError`

commit aed40c077bc79212c095e56059399ab5b0be1886
Author: Taylor Robie <taylorrobie@google.com>
Date:   Tue Dec 10 09:50:08 2019 -0800

    Remove name-based Variable handling in keras Lambda layers, and add detailed exceptions and warnings for unsafe corner cases.
    
    PiperOrigin-RevId: 284789654
    Change-Id: Ie13c0505f89730114021ac80e21e2b11590af97f

commit ca587c0975f98789cf93531e22fcd42f633f318e
Merge: 7c9216d2396 60680137916
Author: Goldie Gadde <ggadde@google.com>
Date:   Tue Dec 10 09:23:12 2019 -0800

    Merge pull request #34979 from robieta/cherrypicks_Q614H
    
    [r2.1 Cherrypick] Remove name-based Variable handling in keras Lambda layers, and add detailed exceptions and warnings for unsafe corner cases.

commit f87a18ca9af22e072f4ad2d23d79134cd8a00457
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Mon Dec 9 17:06:34 2019 -0800

    Remove name-based Variable handling in keras Lambda layers, and add detailed exceptions and warnings for unsafe corner cases.
    
    PiperOrigin-RevId: 284666677
    Change-Id: Iad99d68b2d20298694e7d39dbf1ce6ae9bbf28c5

commit 9422eb1139b3163cf65950c6e713f39344ec33e4
Author: Taylor Robie <taylorrobie@google.com>
Date:   Mon Dec 9 16:25:35 2019 -0800

    Remove name-based Variable handling in keras Lambda layers, and add detailed exceptions and warnings for unsafe corner cases.
    
    PiperOrigin-RevId: 284658983
    Change-Id: Id3505fa1e3035d8b10dc14b0452a0d073e784f0f

commit 0baa58dd8a52f62b2f4f034ba714bc9fe32449aa
Author: Hugo Sjöberg <hugo.sjoberg88@gmail.com>
Date:   Sun Dec 8 15:18:34 2019 +0100

    Add documentation for undocumented exception
    
    The undocumented exception was:
    NotImplementedError
    
    The exception is raised when a conversion in
    the function ´convert_entity_to_ast´ is not yet supported

commit 2526bdf63fe1fb409b45cc3e2e8de446e1a6e807
Author: Sergei Lebedev <slebedev@google.com>
Date:   Wed Nov 20 09:39:37 2019 -0800

    Updated pybind11_status.h to allow raising a registered exeption
    
    The exception is resolved using PyExceptionRegistry.
    
    This is required for migrating I/O-related SWIG wrappers to pybind11.
    
    PiperOrigin-RevId: 281538309
    Change-Id: I249af425ed3e48d8fc710987c5e5aefca80b3adc

commit 6ae4b4705ac0d48d56b5e20d9d989dc9c482d11a
Author: Sergei Lebedev <slebedev@google.com>
Date:   Fri Nov 15 09:26:35 2019 -0800

    Cleaned up includes in py_exception_registry.h
    
    It doesn't need all of c_api.h, just the APIs in tf_status.h
    
    PiperOrigin-RevId: 280674323
    Change-Id: Ia7313b3342b40d38bd170ced04492e12da78be21

commit 7ea3866b3fc278b81bc053bdaeddcaf99bd1287f
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Tue Nov 12 11:08:54 2019 -0800

    Check for JSON conversion subprocess failure in visualize.py
    
    The flatc subprocess call was quietly segfaulting on my .tflite model, but visualize.py wasn't checking the return code and was generating out-of-date HTML using stale JSON from an earlier, successful conversion.
    
    Instead of os.system(), use subprocess.check_call() to check that the flatc invocation succeeds, and raise an exception if it doesn't.
    
    PiperOrigin-RevId: 280010077
    Change-Id: I6bb2526d5ce6a67fff44dae250f840fa72521646

commit f333c7affda5181608bb2a84a0eebc088d8ac372
Author: Eugene Brevdo <ebrevdo@google.com>
Date:   Tue Nov 5 08:06:19 2019 -0800

    Improvements to TFShouldUse
    
    (1) Add an option to raise an exception if an object is not used by the end
        of tf.function tracing.
    
    (2) Clean up support in eager mode (by improving introspection).
    
    This requires adding a slow path for checking if an object is an instance
    of a subclass of EagerTensor created by TFShouldUseWrapper.
    In this case, pull out the wrapped EagerTensor and operate on that.
    
    I also had to move a method from func_graph.py to ops.py to avoid a circular
    dependency between func_graph and ops/tensor_array_ops (ick!!)
    
    PiperOrigin-RevId: 278627366
    Change-Id: Idb4bb9bb0783f5d3ae66b568f101bd4b0be27b57

commit 720f7db2eb32bc39e3e9ed322c8baad059b7f494
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Sun Nov 3 13:40:13 2019 -0800

    Cleans up the visibility exception in the "tensorflow/core:framework/graph_pyclif" target.
    
    PiperOrigin-RevId: 278251588
    Change-Id: I4593df294ca0c467a88c49264e3491c61c484b4e

commit 6470ed4883ed8b0f434f1d54729d26367f6d4e55
Author: RJ Skerry-Ryan <rjryan@google.com>
Date:   Mon Oct 21 11:59:12 2019 -0700

    tf.keras.layers.RNN: Prevent list index out of range exception when RNN cell is stateless.
    
    TESTED:
    - unit test that fails without the change
    PiperOrigin-RevId: 275892536
    Change-Id: I22cddf52d051efe07b89d2349f566b3074de86b6

commit 1ecb21d426e9f2b8897f89251bf4da6d5b7ba8a2
Author: Rick Chao <rchao@google.com>
Date:   Wed Oct 16 00:20:32 2019 -0700

    In `multi_process_runner`, in the case where subprocess raises an error, re-raise the exception in addition to reporting it to the parent process, so that even if `--test_timeout` flag is set and the error doesn't make it to be shown in parent process before bazel's timeout, the log would still show what happens in this subprocess, instead of silently suppressing the error due to early bazel timeout.
    
    PiperOrigin-RevId: 274971961
    Change-Id: Ib046e9f2be48882cdefdfa81396e69e1f4dcbb0f

commit 95520a9fa608d48778108c4b2d3439b2f0539658
Author: Lena Martens <lenamartens@google.com>
Date:   Thu Oct 10 11:50:06 2019 -0700

    Allow tape.watched_variables() to be called after tape.gradient(..).
    
    Previously a NoneType exception was thrown for the following code block
    (calling gradient sets `tape._tape` to None if the tape is not persistent):
    
        grads = tape.gradient(loss, tape.watched_variables())
        optimizer.apply(grads, tape.watched_variables())
    
    By keeping a reference to the watched variables whenever they are accessed or
    when the tape is cleared by gradient(..) we allow the user to repeatedly call
    the method at the expense of caching a tuple of `tf.Variable`s. Since these
    variables are likely to be referenced elsewhere in the program this is unlikely
    to cause a memory leak.
    
    PiperOrigin-RevId: 274006599

commit fbf528fb0070d518bd805b42d11f85e2c14f0cfc
Author: Hye Soo Yang <hyey@google.com>
Date:   Wed Oct 9 12:32:56 2019 -0700

    Export the py_exception_registry functions from C++ to Python with pybind11 instead of swig. This is part of a larger effort to deprecate swig and eventually with modularization break pywrap_tensorflow into smaller components. It will also make exporting C++ ops to Python significantly easier. XLA is using the pybind11 macros already. Please refer to https://github.com/tensorflow/community/blob/master/rfcs/20190208-pybind11.md for more information.
    
    PiperOrigin-RevId: 273797800

commit 785de35b28ef695b8b4c654e6f077775b2122a86
Author: Ayush Dubey <ayushd@google.com>
Date:   Mon Oct 7 10:39:27 2019 -0700

    Raise the exception raised by subprocess in multi-process runner.
    
    Before this change, exceptions raised by processes spawned by the runner process would be converted to strings, and eventually raised as `RuntimeError` by runner.
    
    After this change we raise the same error thrown by the subprocess.
    
    PiperOrigin-RevId: 273325020

commit ab0a5278d81ef34096775d5d56f11694cca2a785
Author: Yong Tang <yong.tang.github@outlook.com>
Date:   Sat Oct 5 07:18:42 2019 +0000

    Fix tf.assert_equal issue when one tenor is empty and another is non-empty
    
    This fix tries to address the issue raised in 32082 where
    tf.assert_equal([], [1.0]) doesn't raise error.
    The reason was that in assert_equal `[1.0]` was broadcasted
    as `[]` and equal was in place in that situation.
    
    This PR updates the _binary_asesert so that it will check if
    x, y are both empty or both non-empty. If one is empty and another is
    non-empty, then assertion throws exception. This change is to not impact
    other ops that depends on the broadcast behavior.
    
    This fix fixes 32082.
    
    Signed-off-by: Yong Tang <yong.tang.github@outlook.com>

commit e7fb9e52029a0711b3bd9799ce70428cef918e86
Author: Jonathan Hseu <jhseu@google.com>
Date:   Wed Oct 2 12:46:51 2019 -0700

    Throw an exception if the slot variable is created under a different
    tf.distribute.Strategy from the original variable.
    
    PiperOrigin-RevId: 272498058

commit f7fd9b4fcebdd5b6b36f5604831b9b2a14de65ca
Author: Edward Loper <edloper@google.com>
Date:   Tue Sep 17 15:13:46 2019 -0700

    Fix segfault if sequence raises an exception when nest.flatten accesses an element.
    
    PiperOrigin-RevId: 269665689

commit 6a6e9bdaea8c66e1746b5c8337d94aea62fb85be
Author: Sergei Lebedev <slebedev@google.com>
Date:   Tue Sep 17 05:11:21 2019 -0700

    tensorflow::MaybeRaiseFromStatus now raises builtin exception types
    
    This allows to drop a dependency on py_exception_registry which brings
    in a lot of other transitive dependencies.
    
    Note also that it is no longer defined in tensorflow::pybind11 to
    avoid conflict with PYBIND11_MODULE which does not refer to the
    root pybind11 namespace (i.e. does pybind11:: instead of ::pybind11::)
    
    PiperOrigin-RevId: 269544908

commit f882f551d6fcd85cba9ffe3da1ce01453a68ef27
Author: Gaurav Jain <gjn@google.com>
Date:   Thu Sep 12 22:20:10 2019 -0700

    Disallow comparing ObjectIdentityWrapper to others
    
    When using the experimental_ref() API in Tensors & Variables. A common
    bug I hit was incorrectly comparing a wrapped object with an unwrapped
    object instead of first calling deref(). To avoid this we raise an
    exception now instead of returning False. This implies that if Tensors
    and Variables are kept in the same set or dictionary as other objects,
    an exception can be raised if there is a hash collision.
    
    PiperOrigin-RevId: 268837575
    (cherry picked from commit 57e8769bc4ef1c94ddbcfbe4a39afe8f73b433c5)

commit 97b6a54c41106fe43cfb8d7124928cde0627353f
Author: Gaurav Jain <gjn@google.com>
Date:   Thu Sep 12 22:20:10 2019 -0700

    Disallow comparing ObjectIdentityWrapper to others
    
    When using the experimental_ref() API in Tensors & Variables. A common
    bug I hit was incorrectly comparing a wrapped object with an unwrapped
    object instead of first calling deref(). To avoid this we raise an
    exception now instead of returning False. This implies that if Tensors
    and Variables are kept in the same set or dictionary as other objects,
    an exception can be raised if there is a hash collision.
    
    PiperOrigin-RevId: 268837575
    (cherry picked from commit 57e8769bc4ef1c94ddbcfbe4a39afe8f73b433c5)

commit 57e8769bc4ef1c94ddbcfbe4a39afe8f73b433c5
Author: Gaurav Jain <gjn@google.com>
Date:   Thu Sep 12 22:20:10 2019 -0700

    Disallow comparing ObjectIdentityWrapper to others
    
    When using the experimental_ref() API in Tensors & Variables. A common
    bug I hit was incorrectly comparing a wrapped object with an unwrapped
    object instead of first calling deref(). To avoid this we raise an
    exception now instead of returning False. This implies that if Tensors
    and Variables are kept in the same set or dictionary as other objects,
    an exception can be raised if there is a hash collision.
    
    PiperOrigin-RevId: 268837575

commit dda0b904c8824d7a2bce159f7eef861254661c13
Author: Penporn Koanantakool <penporn@google.com>
Date:   Thu Sep 5 23:25:15 2019 -0700

    Rollforward of PR #32169: Upgrading giflib to fix CVE-2019-15133
    Add a patch file to fix giflib's compilation issue on Windows (replace a call to strtok_r with strtok_s).
    
    # CVE-2019-15133
    
    **NVD**: 2019/08/17 - CVSS v2.0 Base Score: 4.3 - CVSS v3.0 Base Score: 6.5
    In GIFLIB before 2019-02-16, a malformed GIF file triggers a divide-by-zero exception in the decoder function DGifSlurp in dgif_lib.c if the height field of the ImageSize data structure is equal to zero.
    
    ## **References to Advisories, Solutions, and Tools**
    
    Source | Link | Type
    ---- | ---- | ----
    MISC | bugs.chromium.org | Mailing List, Third Party Advisory
    UBUNTU | usn.ubuntu.com | Third Party Advisory
    
    PiperOrigin-RevId: 267533902

commit 0dd61b286d1e6a56cbd03d7fd59f7cea80072e46
Author: Reed Wanderman-Milne <reedwm@google.com>
Date:   Tue Sep 10 11:02:38 2019 -0700

    Slightly improve two error messages in Python3.
    
    In Python 3, if an exception occurs during an "except" clause, it will show both exceptions, separated by the message "During handling of the above exception, another exception occurred:". This changes causes the first exception to be suppressed because only the second exception is useful.
    
    PiperOrigin-RevId: 268263428

commit 2ff39d00faf8f7e433ddcae0aa278f6e573b0c55
Author: Reed Wanderman-Milne <reedwm@google.com>
Date:   Mon Sep 9 14:37:13 2019 -0700

    ProgbarLogger: Do not crash if on_begin_batch is not called.
    
    on_begin_batch is not called if an exception is thrown by DistributionStrategy when distributing the dataset. Before this change, the exception would be replaced by a ProgbarLogger exception.
    
    PiperOrigin-RevId: 268079829

commit a3cdcc1c5576c52b5315eaafbc67b649ba5653d5
Author: Gaurav Jain <gjn@google.com>
Date:   Thu Sep 5 15:15:06 2019 -0700

    Add incompatible_shape_error attribute to equal op
    
    When tensor equality is enabled, if there is an incompatible shape we
    currently throw and exception. Ideally we'd like to return False when
    calling __eq__ and True when calling __ne__. We thus modify the Equal
    and NotEqual ops to return a boolean upon a shape incompatibility. Due
    to this change the shape inference logic needs to be changed to either
    return a scalar bool if the shapes are incompatible, or else return an
    unknown shape to allow for either a boolean Tensor or scalar to be
    returned.
    
    Note the behavior of tf.math.equal & tf.math.not_equal is unchanged as
    they both use optimistic shape inference logic when dealing with unknown
    dimensions which allows for more efficient graphs rather than inserting
    Rank operations.
    
    This distinction between __eq__ & tf.math.equal is also found in numpy
    and as a result the tf.debugging.assert_equal and
    tf.debugging.assert_none_equal APIs needed to be change to utilize the
    numpy operations.
    
    PiperOrigin-RevId: 267466043
    (cherry picked from commit e0e1efbe0811aa0913ad8400c532b33c76425427)

commit d47d3d27a525a4e4b675b7c93449d6a05f36e73d
Author: Yash Katariya <yashkatariya@google.com>
Date:   Fri Sep 6 15:01:45 2019 -0700

    Add IGNORE_EXCEPTION_DETAIL so that we don;t have to specify the module name in the exception.
    
    PiperOrigin-RevId: 267680230

commit a8d963daa290c80b0e017fa35652b2dcfc9bdd47
Author: Penporn Koanantakool <penporn@google.com>
Date:   Thu Sep 5 23:25:15 2019 -0700

    Rollforward of PR #32169: Upgrading giflib to fix CVE-2019-15133
    Add a patch file to fix giflib's compilation issue on Windows (replace a call to strtok_r with strtok_s).
    
    **NVD**: 2019/08/17 - CVSS v2.0 Base Score: 4.3 - CVSS v3.0 Base Score: 6.5
    In GIFLIB before 2019-02-16, a malformed GIF file triggers a divide-by-zero exception in the decoder function DGifSlurp in dgif_lib.c if the height field of the ImageSize data structure is equal to zero.
    
    Source | Link | Type
    ---- | ---- | ----
    MISC | bugs.chromium.org | Mailing List, Third Party Advisory
    UBUNTU | usn.ubuntu.com | Third Party Advisory
    
    PiperOrigin-RevId: 267533902

commit 3e08639766dcfe8189e42256761b56e07e416882
Author: Gaurav Jain <gjn@google.com>
Date:   Thu Sep 5 15:15:06 2019 -0700

    Add incompatible_shape_error attribute to equal op
    
    When tensor equality is enabled, if there is an incompatible shape we
    currently throw and exception. Ideally we'd like to return False when
    calling __eq__ and True when calling __ne__. We thus modify the Equal
    and NotEqual ops to return a boolean upon a shape incompatibility. Due
    to this change the shape inference logic needs to be changed to either
    return a scalar bool if the shapes are incompatible, or else return an
    unknown shape to allow for either a boolean Tensor or scalar to be
    returned.
    
    Note the behavior of tf.math.equal & tf.math.not_equal is unchanged as
    they both use optimistic shape inference logic when dealing with unknown
    dimensions which allows for more efficient graphs rather than inserting
    Rank operations.
    
    This distinction between __eq__ & tf.math.equal is also found in numpy
    and as a result the tf.debugging.assert_equal and
    tf.debugging.assert_none_equal APIs needed to be change to utilize the
    numpy operations.
    
    PiperOrigin-RevId: 267466043
    (cherry picked from commit e0e1efbe0811aa0913ad8400c532b33c76425427)

commit 1605d1778304164070c2591f8e4b246dca04fb88
Author: Sergei Lebedev <slebedev@google.com>
Date:   Fri Sep 6 05:38:29 2019 -0700

    Added a helper function for handling _NotOkStatusException
    
    PiperOrigin-RevId: 267579737

commit 8b330d28a0185d539b8b5b5f888d4fc0aa001790
Author: Penporn Koanantakool <penporn@google.com>
Date:   Thu Sep 5 23:25:15 2019 -0700

    Rollforward of PR #32169: Upgrading giflib to fix CVE-2019-15133
    Add a patch file to fix giflib's compilation issue on Windows (replace a call to strtok_r with strtok_s).
    
    # CVE-2019-15133
    
    **NVD**: 2019/08/17 - CVSS v2.0 Base Score: 4.3 - CVSS v3.0 Base Score: 6.5
    In GIFLIB before 2019-02-16, a malformed GIF file triggers a divide-by-zero exception in the decoder function DGifSlurp in dgif_lib.c if the height field of the ImageSize data structure is equal to zero.
    
    ## **References to Advisories, Solutions, and Tools**
    
    Source | Link | Type
    ---- | ---- | ----
    MISC | bugs.chromium.org | Mailing List, Third Party Advisory
    UBUNTU | usn.ubuntu.com | Third Party Advisory
    
    PiperOrigin-RevId: 267533902

commit e0e1efbe0811aa0913ad8400c532b33c76425427
Author: Gaurav Jain <gjn@google.com>
Date:   Thu Sep 5 15:15:06 2019 -0700

    Add incompatible_shape_error attribute to equal op
    
    When tensor equality is enabled, if there is an incompatible shape we
    currently throw and exception. Ideally we'd like to return False when
    calling __eq__ and True when calling __ne__. We thus modify the Equal
    and NotEqual ops to return a boolean upon a shape incompatibility. Due
    to this change the shape inference logic needs to be changed to either
    return a scalar bool if the shapes are incompatible, or else return an
    unknown shape to allow for either a boolean Tensor or scalar to be
    returned.
    
    Note the behavior of tf.math.equal & tf.math.not_equal is unchanged as
    they both use optimistic shape inference logic when dealing with unknown
    dimensions which allows for more efficient graphs rather than inserting
    Rank operations.
    
    This distinction between __eq__ & tf.math.equal is also found in numpy
    and as a result the tf.debugging.assert_equal and
    tf.debugging.assert_none_equal APIs needed to be change to utilize the
    numpy operations.
    
    PiperOrigin-RevId: 267466043

commit 8b0e6baeb342a41b32d221e499f39ce6f14b19ba
Author: Xiao Yu <fishx@google.com>
Date:   Wed Sep 4 13:43:48 2019 -0700

    This change includes:
    1. When failed to compute a eager tensor, let the EagerTensor throw proper computation exception instead of ValueError.
    2. Stop using StreamingEnqueueAsync for destroy tensor handle request.
    
    With this change, turning on streaming rpc won't break dataset iterator anymore.
    
    PiperOrigin-RevId: 267222175

commit bdc3ca8b84b1e87d0a688459e7ef0ce8181eccea
Author: Gunhan Gulsoy <gunan@google.com>
Date:   Wed Sep 4 13:41:02 2019 -0700

    Remove obsolete visibility exceptions referencing contrib.
    
    This specific target is not being depended on by the BUILD files in question anymore.
    
    PiperOrigin-RevId: 267221557

commit 093e00fee1c1447800e1cc5d80a9ca1c65e54256
Author: Anton Kachatkou <anton.kachatkou@arm.com>
Date:   Thu Aug 22 15:55:12 2019 +0100

    Fix for the test interpreter_test.py with PY3
    
    The test interpreter_test.py is failing when it is run using PY3.
    There are several issues due to difference between PY2 and PY3:
    
    The string in PY2 is stored as bytes by default, but as unicode in PY3 by default.
    In PY3 if the string is in bytes, it has the prefix 'b'.
    We convert all strings to be the same.
    
    There is an exception chaining in PY3.
    As result, the message thrown from the exception is different.
    
    There is a segmentation fault on Python3, when all tests in
    the file interpreter_test are run. The bug is that the global variable
    stores the pointer to the function, which goes away from the scope.

commit 661d302b9cc04aaba728ec64d6a4536cff88bf34
Author: autoih <ihjhuo@ibm.com>
Date:   Mon Aug 26 23:53:27 2019 -0700

    Limit the number of statements in exception raising test blocks to 1

commit 8eb16ebd0b211d2db2f8a340915409f386d155d8
Author: Allen Lavoie <allenl@google.com>
Date:   Fri Aug 23 09:18:38 2019 -0700

    Dont't swallow exceptions from custom gradients
    
    Requires checking PyErr_Occurred after RecordOperation, and returning a PyObject so we can return nullptr on exception.
    
    Not particularly forwardprop related, although forwardprop probably does more wrapping than backprop at this point.
    
    PiperOrigin-RevId: 265068599

commit 084caebb597f90f90cf1956f77b901ccbc6f4c86
Merge: 18760d74e6a b87481f910f
Author: TensorFlower Gardener <gardener@tensorflow.org>
Date:   Thu Aug 22 11:22:15 2019 -0700

    Merge pull request #31626 from kmh4321:div_no_nan_exception_fix
    
    PiperOrigin-RevId: 264876267

commit b87481f910ff63c24fb8c6540d20e8a38af5f094
Author: Karthik Muthuraman <karthik.muthuraman@ibm.com>
Date:   Mon Aug 19 17:18:29 2019 -0700

    removed exception and related test.

commit a8616145c07321658f335924e57f327df9845872
Author: Karthik Muthuraman <karthik.muthuraman@ibm.com>
Date:   Mon Aug 19 17:15:59 2019 -0700

    removed exception and related test.

commit e5f8043742f927ed0e1711bb48f3e1a153b7a997
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Fri Aug 16 05:13:47 2019 -0700

    :
    Make adding "-fno-exceptions" through `tf_copts()` conditional on `allow_exceptions` parameter
    
    The implementation of `tf_mkl_kernel_library` (https://github.com/tensorflow/tensorflow/blob/f63a72d992335f695b2aa398301c15c72afb23df/tensorflow/tensorflow.bzl#L1504) adds the "-fno-exceptions" flag through `tf_copts()` only to filter it out through `nocopts`. With this change, the flags passed to `tf_mkl_kernel_library` don't contain "-fno-exceptions", thus there is no need to filter it out.
    
    This change allows Bazel team to move forward with removing `nocopts` from C++ rules: https://github.com/bazelbuild/bazel/issues/8706
    
    PiperOrigin-RevId: 263751361

commit fdb6886ff8c0b21ac9de61bf7ae804fbc10bae3d
Merge: 184883aa8f0 14eb05d66cc
Author: TensorFlower Gardener <gardener@tensorflow.org>
Date:   Wed Aug 14 15:49:21 2019 -0700

    Merge pull request #31599 from Intel-tensorflow:amin/mkldnn-enable-exceptions
    
    PiperOrigin-RevId: 263444839

commit f5c6ce7428aa41a881c08fc20b3efa2a6f729804
Author: Karthik Muthuraman <karthik.muthuraman@ibm.com>
Date:   Tue Aug 13 17:29:18 2019 -0700

    added exception handling test for div_no_nan.

commit 14eb05d66cc06f877299feb25c7c1ede6d22b346
Author: mdfaijul <md.faijul.amin@intel.com>
Date:   Tue Aug 13 14:49:58 2019 -0700

    Added -fno-exceptions flags.

commit ddde447e792231cdf83b435b0eeb59dd59bf4044
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Tue Aug 13 00:16:00 2019 -0700

    Remove nocopts attribute from cc_* rules from Tensorflow.
    
    This attribute will be removed soon: https://github.com/bazelbuild/bazel/issues/8706
    The only nocopts values passed are "-fno-exceptions" and "-[W]error". Bazel's crosstool doesn't provide either of them.
    
    PiperOrigin-RevId: 263082078

commit 970cf44c28d238038bb1fb47da33b51e821f761c
Author: Xiao Yu <fishx@google.com>
Date:   Mon Aug 12 15:08:00 2019 -0700

    Set py_func private executor in c++ instead of python.
    
    When py_func throws a exception, the resources will be held until the exception is decref in C++. If the resource is a remote TensorHandle, it will enqueue a destroy_tensor node into executor. This change ensures that these destroy_tensor nodes are executed by the pyfunc private executor.
    
    PiperOrigin-RevId: 263014289

commit e71274735afc4a60701ea1e712073b36c565203c
Author: Philip Pham <phillypham@google.com>
Date:   Tue Aug 6 18:06:59 2019 -0700

    Fix remote device placement of int32 tensors
    
    There's an exception carved out for int32 eager tensors since we want to keep
    them on the host. For remote execution, they should be copied to the remote
    host, however.
    
    PiperOrigin-RevId: 262036990

commit 26c495581febbc94e7ecf62977804e4aeedda32a
Author: Edward Loper <edloper@google.com>
Date:   Wed Jul 31 09:36:14 2019 -0700

    Fix bug in `TypeSpec.__eq__(self, other)` -- do not raise an exception if `other` is a non-TypeSpec value.
    
    PiperOrigin-RevId: 260942114

commit 264f13ec5b57ec2f2745609748b0b7e4cf7e1ed3
Author: Yong Tang <yong.tang.github@outlook.com>
Date:   Mon Jul 29 14:29:45 2019 -0700

    Fix duplicate node name in graph for tf.concat
    
    This fix tries to address the issue raised in 31137 where
    `Duplicate node name in graph: 'concat'` shown up with the
    following:
    ```
    import tensorflow as tf
    from tensorflow.keras import Input
    
    print('Using Tensorflow version {} (git version {})'.format(tf.version.VERSION, tf.version.GIT_VERSION))
    
    i = Input(shape=3)
    j = Input(shape=4)
    try:
        print(tf.concat([i, j], axis=-1))
    except Exception as e:
        print(type(e))
        print(e)
    try:
        print(tf.concat([i, j], axis=-1))
    except Exception as e:
        print(type(e))
        print(e)
    try:
        print(tf.concat([i], axis=-1))
    except Exception as e:
        print(type(e))
        print(e)
    try:
        print(tf.concat(i, axis=-1))
    except Exception as e:
        print(type(e))
        print(e)
    ```
    
    The issue was that `identity` node passed the scope as the name.
    This fix fixes the issue.
    
    This fix fixes 31137.
    
    Signed-off-by: Yong Tang <yong.tang.github@outlook.com>

commit 8eadaa47160123624480a24bb0f60c33aba9a1af
Author: Karthik Muthuraman <karthik.muthuraman@ibm.com>
Date:   Fri Jul 26 15:08:46 2019 -0700

    Removed exception handling test for reciprocal_no_nan().

commit 33b3c2e17180795d9f377a6ff278e71f51a07057
Author: Karthik Muthuraman <karthik.muthuraman@ibm.com>
Date:   Fri Jul 26 14:39:09 2019 -0700

    Removed explicit exception handling from reciprocal_no_nan().

commit 3ae48d234b05c94062a812d37751633194167d29
Author: I-Hong <ihjhuo@ibm.com>
Date:   Thu Jul 25 01:52:43 2019 -0700

    locate a statement for the exception is raised

commit fbe76c092a1cce865973d84502032d4b827ccfed
Author: Karthik Muthuraman <karthik.muthuraman@ibm.com>
Date:   Fri Jul 19 11:06:23 2019 -0700

    Add exception handling for reciprocal_no_nan()

commit 1129d27c15b31f2ae8b3fd80db1612c1cac130f6
Author: Igor Saprykin <isaprykin@google.com>
Date:   Wed Jul 17 15:19:50 2019 -0700

    Don't distribute Keras models using cloning in Eager mode.
    
    This behavior isn't going to be available with the `compile(cloning=...)` flag.
    
    The tests had to updated for this change for a few reasons: 1) Cloning and no-cloning supports different features, so the expected thrown exceptions are different.  2) TFOptimizer-wrapped optimizers don't work due to internal bug issue # 130808953.
    
    PiperOrigin-RevId: 258652546

commit 02433bb9c31e7c172145b8dd86af3e66005ab8f9
Author: Christopher Suter <cgs@google.com>
Date:   Tue Jul 16 14:53:39 2019 -0700

    Don't specify `e` when re-raising an error; it loses stack trace info
    
    (see, e.g., https://stackoverflow.com/questions/4825234/exception-traceback-is-hidden-if-not-re-raised-immediately)
    
    PiperOrigin-RevId: 258445844

commit 66ad0e0c39db5e48e4cac3aecffca4bb47b89a2c
Author: Edward Loper <edloper@google.com>
Date:   Fri Jul 12 08:32:40 2019 -0700

    Raise an exception if a TensorSpec is created with an invalid tensor name.
    
    PiperOrigin-RevId: 257807867

commit 89901f842d029ed8f20bc6d3a01ffb93633baef3
Author: Dayananda-V <dayananda.v1@huawei.com>
Date:   Wed Jul 3 14:49:02 2019 +0530

    [Lite]Bugfix System.loadLibrary exception handle when application fail to load

commit 678edaa6af6124b3ba1c4e8b3dc3f549335c0272
Author: Andy Davis <andydavis@google.com>
Date:   Wed Jul 3 10:35:03 2019 -0700

    Globally change load/store/dma_start/dma_wait operations over to affine.load/store/dma_start/dma_wait.
    In most places, this is just a name change (with the exception of affine.dma_start swapping the operand positions of its tag memref and num_elements operands).
    Significant code changes occur here:
    *) Vectorization: LoopAnalysis.cpp, Vectorize.cpp
    *) Affine Transforms: Transforms/Utils/Utils.cpp
    
    PiperOrigin-RevId: 256395088

commit 45ab4c2dbdefbc10a426cb747ba022054d4a8fd8
Author: Akshay Modi <nareshmodi@google.com>
Date:   Tue Jul 2 11:21:18 2019 -0700

    Fix memory leak in exception code.
    
    PiperOrigin-RevId: 256203458

commit 4a53569e35358181fe321c7393f419146f72db3d
Author: Andy Davis <andydavis@google.com>
Date:   Fri Jun 28 13:31:31 2019 -0700

    Add new operations affine.dma_start and affine.dma_wait which take affine maps for indexing memrefs by construction.
    These ops are analogues of the current standard ops dma_start/wait, with the exception that the memref operands are affine expressions of loop IVs and symbols (analogous to affine.load/store).
    The addition of these operations will enable changes to affine transformation and analysis passes which operate on memory dereferencing operations.
    
    PiperOrigin-RevId: 255658382

commit 743544729ff03ed78d464f7a723fd7e4c33c14d9
Author: Xiao Yu <fishx@google.com>
Date:   Mon Jun 24 11:21:11 2019 -0700

    Avoid ignored exception in SessionRelease.
    
    PiperOrigin-RevId: 254797661

commit 9f3d384cfcab3cbfd89d231f2a59c270e743dd33
Author: Yong Tang <yong.tang.github@outlook.com>
Date:   Fri Jun 21 01:37:21 2019 +0000

    Add Raises in the docstring of tf.histogram_fixed_width_bins
    
    This fix adds exception conditions for tf.histogram_fixed_width_bins in the docstring.
    
    This fix fixes 29279.
    
    Signed-off-by: Yong Tang <yong.tang.github@outlook.com>

commit 971a2d5d03194be5735b69ecd62de75c975b1395
Author: Yong Tang <yong.tang.github@outlook.com>
Date:   Wed Jun 19 17:57:47 2019 +0000

    Add Raises in the docstring of tf.histogram_fixed_width
    
    This fix adds exception conditions for tf.histogram_fixed_width
    in the docstring.
    
    This fix fixes 29276.
    
    Signed-off-by: Yong Tang <yong.tang.github@outlook.com>

commit 64c6722cd8c34fbcbd9d9f3db64d2b93d7360427
Author: Derek Murray <mrry@google.com>
Date:   Thu Jun 20 08:38:30 2019 -0700

    In VariableScope.__enter__() only exit the graph context manager if an exception occurred.
    
    This change also fixes the VariableScope.__exit__() logic so that the component contexts are exited even if an exception is raised in one of their exit methods.
    
    PiperOrigin-RevId: 254203734

commit eb34b008186095c7cf8e21ce171d90a56ff78012
Author: Yong Tang <yong.tang.github@outlook.com>
Date:   Wed Jun 19 00:28:22 2019 +0000

    Update docstring of tf.sets.difference to include Raises
    
    This fix updated docstring of tf.sets.difference to include
    conditions that raises exceptions.
    
    This fix fixes 29897.
    
    Signed-off-by: Yong Tang <yong.tang.github@outlook.com>

commit e6bce77bedaf55f1aae588f3f45bf042a6f6a697
Author: Benjamin Kramer <kramerb@google.com>
Date:   Fri Jun 14 10:02:51 2019 -0700

    [XLA] algsimplify: Push type check to where its actually needed
    
    All of the dot transformations are type-independent, with the exception of
    dot->reduce(mul), which always does the reduce step in F32.
    
    While there enable it for F16, which we can safely upcast to F32.
    
    PiperOrigin-RevId: 253247428

commit acc798b02d45bf60c0c21a7980f27c1e16ef0a9f
Author: Peter Buchlovsky <petebu@google.com>
Date:   Thu Jun 13 08:42:34 2019 -0700

    Fix spelling in comments/docstrings/exception messages.
    
    PiperOrigin-RevId: 253034997

commit f7bcc7a42f3de2b813cc9c4379d7d9f4043a97c7
Author: Dan Moldovan <mdan@google.com>
Date:   Mon Jun 10 09:52:04 2019 -0700

    Generalize the repacking of errors to all subclasses of Exception that don't override the constructor of Exception. This constructor is known to take the error message as single string argument.
    
    PiperOrigin-RevId: 252424118

commit 603018d47ea79995027326f395d17212fe70976e
Author: Gaurav Jain <gjn@google.com>
Date:   Thu Jun 6 09:24:50 2019 -0700

    Raise exception for mismatched argument type
    
    PiperOrigin-RevId: 251865629

commit 681f92e4ccf97b154e2035cdb995a63806e15d52
Author: Imran Salam <imran.salam.24@gmail.com>
Date:   Wed Jun 5 01:05:52 2019 +0500

    added attribute error exception
    
    Raises attribute error when dtype is neither float nor integer type

commit 5143891e8aed7a4285d93284c0f4d34f3befbe6c
Author: I-Hong <ihjhuo@ibm.com>
Date:   Wed May 22 17:38:54 2019 -0700

    correct valueError to TypeError
    
    This is a TypeError instead of ValueError because, in the `if` clause, we are checking the type of `identifier`. See https://docs.python.org/3/library/exceptions.html#TypeError :
    
    > Passing arguments of the wrong type (e.g. passing a list when an int is expected) should result in a TypeError, but passing arguments with the wrong value (e.g. a number outside expected boundaries) should result in a ValueError.
    
    The change from `constructor(str, arg)` to `constructor(str.format(arg))` is because the former is undocumented.

commit 43b836cc470810239ae9b462cda5322d3707b291
Merge: 758880a9809 4d34d87b86f
Author: Sundeep Gottipati <42554856+bananabowl@users.noreply.github.com>
Date:   Thu May 23 09:21:44 2019 -0700

    Merge pull request #28970 from bananabowl/cherrypicks_SSO7Z
    
    BUG: tf.function cannot handle exception raised by custom op

commit 1fd085326b6b8244df25936b38e5626b03b999d1
Author: Yan Facai (颜发才) <facai.yan@gmail.com>
Date:   Wed May 22 21:50:06 2019 +0800

    BUG: tf.function cannot handle exception raised by custom op

commit f8b824b2e16629962d9b800dac94c4f8cc9fb249
Merge: 332f83b5116 472450176c0
Author: TensorFlower Gardener <gardener@tensorflow.org>
Date:   Thu May 23 08:59:26 2019 -0700

    Merge pull request #28930 from facaiy:BUG/tf_function_cannot_handle_exception
    
    PiperOrigin-RevId: 249652199

commit 7efeb731877936dc73b8324abed24c4f6428b047
Author: Allen Lavoie <allenl@google.com>
Date:   Wed May 22 17:36:59 2019 -0700

    Disable Tensor slice assign, since it's currently broken and throwing hard-to-understand exceptions
    
    The code path being reverted only fires if var=None, which gets converted to a Tensor and always fails.
    
    This is a partial revert of #27327
    
    It's relatively trivial to instead make this work (s/var/input_/), but I'm not convinced that it's a good API, since we've seen at least one person who accidentally got a Tensor here and was using it like variable slice assignment (which of course doesn't modify the Tensor in-place and so doesn't do what they were expecting). But for `var` always being None and so throwing an opaque exception their code would have silently done the wrong thing.
    
    So if someone else wants to re-do Tensor assignment working this time I think that's fine. But as a temporary measure we should have the more informative error we were throwing before.
    
    PiperOrigin-RevId: 249555761

commit 5e82118d2b37c07465b9b00f6a4ab7380bd8a4e3
Author: Yan Facai (颜发才) <facai.yan@gmail.com>
Date:   Wed May 22 21:50:06 2019 +0800

    BUG: tf.function cannot handle exception raised by custom op

commit 5177ef7cf314267db20529aa6ad94df0e2c7e60a
Author: Dan Moldovan <mdan@google.com>
Date:   Mon May 20 13:03:36 2019 -0700

    Rewrite messages of errors raised at raised graph construction to include a stack trace relative to original code before conversion.
    This is done by attaching metadata (as new attributes) to errors raised in converted code. This metadata includes the necessary information to indicate the location in the original code that corresponds to these exceptions' actual stack trace. The location is then included in the error message.
    In the common cases, the type of the error raised is preserved, however unknown error types will be replaced by a dedicated AutoGraph error when leaving the converted code. The error type remains the same within the converted code.
    
    The approach is much less intrusive than wrapping an error, as it allows preserving the exception type within graph code. The risk of conflicting with existing attributes is extremely low, and since the names are internal, they are easily changed.
    However, it would be better to reserve standard names for this.
    
    PiperOrigin-RevId: 249109716

commit c07c274fd6ba50bd3944fa2b03a30bf155045277
Author: Dan Moldovan <mdan@google.com>
Date:   Mon May 20 13:03:36 2019 -0700

    Rewrite messages of errors raised at raised graph construction to include a stack trace relative to original code before conversion.
    This is done by attaching metadata (as new attributes) to errors raised in converted code. This metadata includes the necessary information to indicate the location in the original code that corresponds to these exceptions' actual stack trace. The location is then included in the error message.
    In the common cases, the type of the error raised is preserved, however unknown error types will be replaced by a dedicated AutoGraph error when leaving the converted code. The error type remains the same within the converted code.
    
    The approach is much less intrusive than wrapping an error, as it allows preserving the exception type within graph code. The risk of conflicting with existing attributes is extremely low, and since the names are internal, they are easily changed.
    However, it would be better to reserve standard names for this.
    
    PiperOrigin-RevId: 249109716

commit 5a02c64e27b4abf0ed552e1b64342455c9da23b1
Author: Yuefeng Zhou <yuefengz@google.com>
Date:   Mon May 20 12:46:25 2019 -0700

    Use warning instead of exception if local collective ops is not configured at program startup.
    
    PiperOrigin-RevId: 249106300

commit 579e094ca7f4b1c3f2ca69c5019ef31b65420935
Author: Dominik Schlösser <dominik.schloesser@gmail.com>
Date:   Fri May 17 09:24:33 2019 +0200

    Use qualified exception as suggested by skye
    
    UnicodeDecodeError added.

commit 7bc1c3c37ce4e591012f4325ab7a25ae387773c7
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Tue May 14 01:35:04 2019 -0700

    Migrate TFs third_party/gpus/crosstool to Starlark
    
    This cl makes this toolchain forward compatible for Bazel's incompatible flags:
    * https://github.com/bazelbuild/bazel/issues/7008
    * https://github.com/bazelbuild/bazel/issues/6861
    * https://github.com/bazelbuild/bazel/issues/7320
    
    The current change creates a drop-in replacement for the proto crosstool, with the exception that:
    * all legacy fields are removed
    * templated variables are replaced by rule attributes
    * instead of empty paths in msvc toolchain we now use 'msvc_not_used' path (CcToolchainConfigInfo doesn't allow empty strings for paths).
    * introduced to_list_of_strings function so we can pass list of starlark string around
    
    The mechanical transformation makes the crosstool definition less readable than before - this will be addressed in a subsequent change.
    
    This change was tested by:
    1) running cuda_configure.bzl and retrieving generated BUILD and CROSSTOOL files
    2) applying this change
    3) running cuda_configure.bzl and retrieving generated BUILD and cc_toolchain_config.bzl files
    4) Using [cc_toolchain_compare_test](https://github.com/bazelbuild/rules_cc/blob/master/tools/migration/ctoolchain_compare.bzl#L24) rule to verify both CROSSTOOL and cc_toolchain_configs configure the C++ toolchain identically
    
    PiperOrigin-RevId: 248094053

commit 49c8db382877ea8b2dd01bee5abaefd139f56cc4
Author: Gaurav Jain <gjn@google.com>
Date:   Tue May 7 12:02:59 2019 -0700

    Avoid RuntimeException if device placement is nop
    
    This benefits colab tutorials, allowing a block of code to be re-run
    without throwing an exception.
    
    PiperOrigin-RevId: 247064427

commit 49e207c57730736f55e11a30dc307a96e46317e4
Author: Allen Lavoie <allenl@google.com>
Date:   Mon May 6 09:51:39 2019 -0700

    Add a bit of detail to the SavedModel import exception when a placeholder isn't fed.
    
    PiperOrigin-RevId: 246842954

commit e78cbfa8590d050e0692cf12f42ab1517e0cee21
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Fri May 3 01:46:10 2019 -0700

    Exposing the correct exception in BatchNormalization __init__().
    
    PiperOrigin-RevId: 246471629

commit c5a75c28213b5780165ef42e5165499dbfc44665
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Mon Apr 29 14:00:33 2019 -0700

    Unnecessary newline in exception message
    
    PiperOrigin-RevId: 245818022

commit 24cc2f6d0b86674a34e831357eb60d70d54190e7
Author: Allen Lavoie <allenl@google.com>
Date:   Mon Apr 22 16:13:21 2019 -0700

    Some usability tweaks for tf.saved_model.save with tf.keras.Model
    
    Has Model call super for _list_functions_for_serialization so we pick up any custom methods, and stops throwing exceptions if .inputs has not been set for whatever reason (sometimes eager execution doesn't record inputs currently). Models can be nested deeply, so having the whole save fail because of a missing .inputs is somewhat annoying.
    
    PiperOrigin-RevId: 244755415

commit 3afb32ce1f04c4ab4ffca6e716aeb03aa1568f2e
Author: Gaurav Jain <gjn@google.com>
Date:   Wed Apr 17 12:51:53 2019 -0700

    Use TF_Status* SWIG typemap
    
    This avoids the need to use raise_exception_on_not_ok_status
    which has been removed from the v2 API.
    
    PiperOrigin-RevId: 244049607

commit ea3f474c5ff94152f72b5417eff2046111bb77e3
Author: Gaurav Jain <gjn@google.com>
Date:   Fri Apr 12 15:52:03 2019 -0700

    Remove deprecated error handling symbols from v2
    
    Also remove most uses of raise_exception_on_not_ok_status()
    
    PiperOrigin-RevId: 243348221

commit ee45529b5b8f89726eb4346995c685bd5c605c02
Author: Brian Lee <brianklee@google.com>
Date:   Thu Apr 4 10:39:57 2019 -0700

    Reword exception message for failed AutoGraph conversion
    
    PiperOrigin-RevId: 241957881

commit 99528b124e8366996f38c7869add9c455ea8b0dd
Author: Francois Chollet <fchollet@google.com>
Date:   Tue Mar 12 15:36:26 2019 -0700

    Do not raise exception when graphviz isn't installed while running IPython.
    
    PiperOrigin-RevId: 238112129

commit b04fb4866d577bc38e066d7a43afb090f0a4447c
Author: Siju <siju.samuel@huawei.com>
Date:   Mon Mar 11 09:22:51 2019 +0530

    Update exception_jni.cc

commit ebeb598c2d1f341d6d641bf58c370cf7b43f6e37
Author: Joshua V. Dillon <jvdillon@google.com>
Date:   Fri Mar 1 17:24:16 2019 -0800

    Correctly check shape not None in Keras `add_weight`.
    When calling Keras add_weight with a np list, as written the `shape or
    ()` "trick" results in the following exception:
    """ValueError: The truth value of an array with more than one element is
    ambiguous. Use a.any() or a.all()"""
    This change fixes the problem by using an explicit `if`.
    
    PiperOrigin-RevId: 236407103

commit 1bbca7cfb6f01eb3536577102e3e0088c57c6a31
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Tue Feb 26 12:45:38 2019 -0800

    tf.max will return -inf if the input is empty, which results in exception in tf.range() below.
    
    PiperOrigin-RevId: 235773577

commit 2dae893f00aaee6dbb6271c4cd24adae83ad6aa2
Author: Nick Felt <nickfelt@google.com>
Date:   Tue Feb 26 00:58:47 2019 -0800

    Introduce settable default step for TF 2.0 summary API (experimental)
    
    This adds tf.summary.experimental.set_step() and tf.summary.experimental.get_step() functions to the TF 2.0 summary API. Their purpose is to allow setting a default value for the `step` parameter that had up until now been required on the new summary API writing functions like scalar(), image(), etc. Those parameters are now optional, though if there is no default step configured an exception will still be raised.
    
    The step can be manually set to a constant value in each iteration of the train loop, or you can set the step to a tf.Variable and then update the variable independently. Only the latter works well across a tf.function boundary because constant values will be captured when the function is traced, so updates outside the function won't be reflected inside it.
    
    PiperOrigin-RevId: 235675144

commit 16be3a49567277ce839a2c6d606f002f26c49826
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Mon Feb 25 16:56:15 2019 -0800

    Minor description change in exception.
    
    PiperOrigin-RevId: 235628140

commit de67faa9ef9fce83bed49ddc99afcf1706b39877
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Thu Feb 21 10:04:44 2019 -0800

    Raise an exception at runtime if a Dataset loop returns or breaks. These are not allowed in Datasets at present. The Dataset API should be used instead.
    
    PiperOrigin-RevId: 235015557

commit beee93fe237d7ee1ea3942f44bdf224e4debd4a4
Author: Russell Power <power@google.com>
Date:   Tue Feb 19 14:38:26 2019 -0800

    tf-session: run session.close() in a thread when handling an exception.
    PiperOrigin-RevId: 234676871

commit fbd56732738cb74a8d4afc19c9d1a6cfb6712bce
Author: Dayananda-V <dayanandasiet@gmail.com>
Date:   Tue Feb 12 11:35:05 2019 +0530

    TF Android Example compile warning fixes
    1. The minSdk and targetSdk version should not be declared in the android manifest file. You can move the version from the manifest to the defaultConfig in the build.gradle file.
    Reference : https://developer.android.com/guide/topics/manifest/manifest-intro#uses-sdk
    2. Configuration 'compile' is obsolete and has been replaced with 'implementation' and 'api'.
    Reference : http://d.android.com/r/tools/update-dependency-configurations.html
    3. Caused by: java.io.FileNotFoundException: imagenet_comp_graph_label_strings.txt this error reported after application compile and run first time using Studio, this fix solves the exist problem.

commit 3f8dcd3e288f213001eace4aea0f22cfb1b65946
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Wed Feb 6 12:05:05 2019 -0800

    Allow exceptions in code that will be staged. Consider all exceptions to be exiting the CFG, with no explicit support for exception-based control-flow. It may incidentally work to use exception-based control flow in code that is never staged.
    
    PiperOrigin-RevId: 232719435

commit 761a98c6f12c4e3714d47cc402aef30fafe2ba6b
Author: Peter Hawkins <phawkins@google.com>
Date:   Tue Feb 5 13:09:22 2019 -0800

    [XLA] Remove XlaBuilder methods for unary and binary operators.
    
    These methods (with one exception) had only one caller?the corresponding free function in the xla namespace. This change inlines the methods into their callers.
    
    PiperOrigin-RevId: 232543596

commit 656c8f1da9656e21e7d7502b367b87e037341cbb
Author: Peter Hawkins <phawkins@google.com>
Date:   Sun Feb 3 18:29:11 2019 -0800

    [XLA:Python] Raise an exception if a platform has no visible devices during initialization.
    
    PiperOrigin-RevId: 232226157

commit 3266f527cc6f73682b3d9259ece60c73586b03b6
Merge: 5bfa62f0300 0b12d0d1ef2
Author: TensorFlower Gardener <gardener@tensorflow.org>
Date:   Fri Feb 1 17:06:13 2019 -0800

    Merge pull request #21608 from kouml:avoid_url_error_exception
    
    PiperOrigin-RevId: 232060746

commit 24ce9f5bb519a10a6f431a425487561ffbceda2e
Author: Dayananda-V <dayanandasiet@gmail.com>
Date:   Mon Jan 28 16:25:20 2019 +0530

    TF Framework error_test missing test case add
    1-error_code_from_exception_type api test case

commit 7b48d11a5a45ca5d19a994f5a60a53f47339f57a
Author: Christopher Suter <cgs@google.com>
Date:   Tue Jan 29 16:52:20 2019 -0800

    Preserve stack trace when conditionally re-raising.
    
    The error handling code in question looks to see if a raised exception is of type TypeError, and if so, if its message matches a pattern, in which case it raises a more informative message about dynamic control flow. However, If it doesn't match the message, it seeks just to reraise the underlying exception. When doing this with "raise e", the underlying stack trace is lost; instead, we should just use "raise", which keeps the source stack trace.
    
    Source for the re-raise behavior: https://stackoverflow.com/questions/8146386/python-conditionally-catching-exceptions
    
    PiperOrigin-RevId: 231500445

commit a9496f3001a20e8343668c5d1b25a08baf080bcd
Author: Igor Ganichev <iga@google.com>
Date:   Fri Jan 25 18:10:51 2019 -0800

    Remove unnecessary messing with colocation root device.
    
    ColocateNodes chooses the which of the two colocation groups' roots
    should become the new root. Then, it merges the device_names of the
    two roots and assigns the merged name to the new root. The merged name
    is always more (or equal) specific than the original names.
    
    The removed code did the same thing with the only exception of
    sometimes changing the device_name of the node that will not be the new
    root. This has no effect because device selection for all the nodes in
    a group is done using the information in the root of the group.
    
    PiperOrigin-RevId: 231004097

commit 6be9e9b573bfe09aefde442288104e962d62f5a7
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Thu Jan 24 01:24:01 2019 -0800

    [TF:XLA] Disable more XLA:GPU tests that were failing.
    
    All tests that XLA:GPU is failing on are now disabled with the exception of kernel_tests:control_flow_ops_py_test_xla_gpu which is failing without XLA also.
    
    PiperOrigin-RevId: 230679574

commit fa8ed584884fae406e2398718bbcd6e20498c7a2
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Tue Jan 8 17:24:16 2019 -0800

    Mark certain tests in export_output_test as v1 only as export_output.as_signature_def does not support v2 due to its dependent method saved_model.build_tensor_info not working in eager. Also raise a runtime exception inside build_tensor_info when running in eager.
    
    PiperOrigin-RevId: 228429679

commit 6612e1994c26ee4e40fab02b270bd79cdc7b0a74
Author: Dayananda V <dayanandasiet@gmail.com>
Date:   Mon Jan 7 17:20:25 2019 +0530

    TF Android Example first time compile and run FileNotFoundException bug fix
    
    java.lang.RuntimeException: java.io.FileNotFoundException: mobilenet_v1_1.0_224_quant.tflite
    this error reported after application compile and run first time using Studio, this fix solves the exist problem.

commit 7cc1ff9072ce4c2c7f36b7011e24486071ad13ee
Author: Allen Lavoie <allenl@google.com>
Date:   Fri Jan 4 14:35:17 2019 -0800

    Better exception for tf.constant(tf.constant(x))
    
    PiperOrigin-RevId: 227915529

commit 6932e795621a76a7e520bee529d915265b40e9bd
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Thu Jan 3 15:26:41 2019 -0800

    In tf.name_scope, throw an exception when the `default_name` arg is passed in but not a string and warn the user that they likely meant to pass it in as the `values` kwarg.
    
    PiperOrigin-RevId: 227760445

commit f6fa3515db311b666dd4bd529f9b8b87575ce978
Author: Allen Lavoie <allenl@google.com>
Date:   Thu Jan 3 10:44:43 2019 -0800

    Silence a noisy __del__
    
    Popped up sometimes, looking something like:
    
    Exception ignored in: <bound method BaseSession.__del__ of <tensorflow.python.client.session.Session object at 0x7ff8f47827f0>>
    Traceback (most recent call last):
      File "[...]tensorflow/python/client/session.py", line 738, in __del__
    TypeError: 'NoneType' object is not callable
    
    Which I'm guessing is TF_DeleteSession being None.
    
    PiperOrigin-RevId: 227712751

commit a5b70b7cb46e18846ba8875a13da08e7444c5136
Author: Allen Lavoie <allenl@google.com>
Date:   Thu Jan 3 09:20:12 2019 -0800

    Fix for an optimizer.get_config() exception when exporting a SavedModel
    
    Tests tf.saved_model.save() with Optimizerv2 instead of v1
    
    PiperOrigin-RevId: 227699428

commit 94960538763e287b9998cac0645ae70a669fd1d4
Author: Christoph Boeddeker <boeddeker@users.noreply.github.com>
Date:   Mon Dec 4 15:15:52 2017 +0100

    improve tf.saved_model.loader.load exception

commit ca24162a806e63d6a058489863b989b09edf43e9
Author: Allen Lavoie <allenl@google.com>
Date:   Wed Dec 19 13:31:26 2018 -0800

    Silence __del__ exceptions
    
    We have tests that they do their job, so printing exceptions is pointless
    
    PiperOrigin-RevId: 226224643

commit 601a65952851d4ddb959a8481d9ea6e00c76bb04
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Mon Dec 17 18:15:28 2018 -0800

    Explicitly pass values kwarg as it is currently being treated as the default_name kwarg instead. This causes an exception to be thrown in eager mode.
    
    PiperOrigin-RevId: 225923506

commit 6603c69fa71d6ebdee717863079ca34308c9ddb1
Author: Allen Lavoie <allenl@google.com>
Date:   Wed Dec 12 14:28:32 2018 -0800

    Switch tf.saved_model.save back to experimental in 1.x since it doesn't work when graph building
    
    Adds some explanation of this in the docstring and some better exceptions. Having it non-experimental would be pretty confusing, since most users would try it without enable_eager_execution() and run into strange errors which we don't plan to fix.
    
    PiperOrigin-RevId: 225254705

commit 9aa32a6eacd0e8f507d1c57f0658d6c3ecaecaba
Author: Francois Chollet <fchollet@google.com>
Date:   Mon Dec 10 17:32:56 2018 -0800

    Enable mixing value tensors (eager tensors or numpy arrays) and Keras symbolic tensors when building Keras graphs-of-layers in an eager scope.
    In these cases, the value tensors are treated as symbolic constants.
    
    This enables the following pattern to work in the same way in both V1 and V2:
    
    ```
    lstm = LSTM(2)
    inputs = keras.Input((None, 3))
    outputs = lstm(inputs, initial_state=tf.ones(shape))
    ```
    
    (without this change, the above code works in V1 but fails in V2 with an artificial exception).
    
    Known issue: in case a random tensor is used, there is a (usually harmless) behavior discrepancy remaining between V1 and V2, which is that in V2 we'd be using the same random value every time, whereas in V1 we'd be drawing new random values (since the tensor would be treated as a random op and not as a constant). We think this is not a problem because in V2 users should have the mental model "tensors are values" and thus would be expecting a random tensor to behave like a constant value and not like a random generator.
    
    PiperOrigin-RevId: 224915621

commit 7578e120de2a3a5282ced8d41881f19363f83466
Author: Dan Jarvis <daj@users.noreply.github.com>
Date:   Thu Nov 23 13:06:02 2017 -0500

    Fix crash on closing the app when classifier failed to initialize
    
    When testing on an API 21 emulator, the classifier fails to initialize.
    `E/TfLiteCameraDemo: Failed to initialize an image classifier.`
    
    In this situation, the app crashes when pressing Back to exit.  Here's the cause:
    ```
    java.lang.NullPointerException: Attempt to invoke virtual method 'void com.example.android.tflitecamerademo.ImageClassifier.close()' on a null object reference
                                                                                            at com.example.android.tflitecamerademo.Camera2BasicFragment.onDestroy(Camera2BasicFragment.java:331)
                                                                                            at android.app.Fragment.performDestroy(Fragment.java:2266)
    ```
    The fix is to check for null before calling `.close()`.
    
    I'll investigate why the classifier is failing to initialize separately. :-)

commit 2e2f34b0922f98798befbceb14a150f816390ed3
Author: Gaurav Jain <gjn@google.com>
Date:   Sun Dec 2 21:28:07 2018 -0800

    Fix function test to trigger and catch correct exception
    
    In v1 testInputSignatureForFunctionWithNonTensorInputsNotAllowed was
    raising a TypeError when it should have triggered a ValueError. This
    was due to the signature being invalid. Once the signature is fixed the
    test works in both v1 and v2 mode.
    
    PiperOrigin-RevId: 223740912

commit 0d40f081369150bdab2ca49fe173d2a19717c0f7
Author: Francois Chollet <fchollet@google.com>
Date:   Wed Nov 28 12:16:50 2018 -0800

    Simplify semantics of `build`:
    
    `build(input_shape)` is a method that implementers of subclasses of Layer or Model can override if they need a state-creation step in-between layer instantiation and layer call. This is typically used to create the weights of Layer subclasses.
    
    If you do not override it, it is never called by the framework (i.e. default implementations of `build` are *never called* unless you explicitly call `model.build()` yourself, therefore they never introduce surprising issues).
    
    In addition, you can call `model.build(input_shape)` on a Model instance in a standalone way, as a substitute for calling the model on some data to create its weights. This may raise an exception if the request is impossible (then you have to call the model on some data yourself in order to build it).
    
    The change also fixes two related issues:
    - enable `build` to be called on Model subclasses with a signature containing keyword arguments with default values (e.g. `call(self, inputs, training=False, mask=None)`.
    - enable a Model subclass to be nested in a Sequential model without having to implement `compute_output_shape` on the Model subclass.
    
    PiperOrigin-RevId: 223213320

commit d2e1b8000bcd8746622b6397c26f3f7f5af9f1db
Author: Philip Pham <phillypham@google.com>
Date:   Wed Oct 31 10:09:06 2018 -0700

    Fix typo in documentation for TPUEmbedding
    
    Current documentation says optimization_parameters must not be `None`. The exception raised in the constructor says otherwise.
    
    PiperOrigin-RevId: 219492950

commit 8c33e02e66b936d947245e6a0943898b810b16c4
Author: Allen Lavoie <allenl@google.com>
Date:   Fri Oct 26 11:33:09 2018 -0700

    Clarify concrete function calling conventions
    
    Throws an exception if Tensor inputs have non-unique names. These names become keyword arguments to the concrete function.
    
    A bunch of extra documentation and error checking around the creation of concrete functions, since it will be part of the SavedModel export workflow. The new calling conventions are relatively close to SavedModel signatures, which will hopefully mean fewer surprises when people try to serve a model.
    
    PiperOrigin-RevId: 218886883

commit e89ca12c736adca2343df437e9f2ac1d8fa4ac5a
Author: Saurabh Saxena <srbs@google.com>
Date:   Fri Oct 26 11:18:14 2018 -0700

    Support nested while_v2's (see change to _get_body_graph).
    Fix gradient logic when loop body has an Identity node whose output value is needed for computing a gradient. Since we do not accumulate outputs of Identity nodes we instead try to use the output of the first non-Identity node in the parent hierarchy.
    Raise exception when taking gradient of a while loop which creates a resource in its body, i.e., the resource is not captured.
    
    PiperOrigin-RevId: 218884162

commit 85b85a46c625d0b47cddfa8c7b399f32fe5a3ccc
Author: Yu-Cheng Ling <ycling@google.com>
Date:   Thu Oct 25 21:59:56 2018 -0700

    Raise an exception when Toco returns TF error status.
    
    PiperOrigin-RevId: 218803395

commit 502aad6f1934230911ed0d01515463c829bf845d
Author: Jonathan J Hunt <jjhunt@google.com>
Date:   Mon Oct 22 16:30:10 2018 -0700

    Added rejection sampler based on sampling from untruncated normal for
    parametrized_truncated_normal.
    
    Modifies the behavior of all samplers to raise an Exception if no sample is
    accepted (current behavior is returning a sample from a uniform
    distribution which is confusing behavior). This situation should only arise
    if none of the existing rejection samplers are a good fit for the parameter
    regime.
    
    PiperOrigin-RevId: 218254962

commit 6044558950947a667ab0c00557e13c89ba64fd05
Author: Mark Daoust <markdaoust@google.com>
Date:   Thu Oct 18 20:25:57 2018 -0700

    fix error message when running toco from python3.
    
    Otherwize it's still bytes, so the exception reports the entire console output on a single line, making it unreadable.
    
    PiperOrigin-RevId: 217813440

commit 4513f1910bf435c4cc46d0f0dfb3e0641286ce21
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Wed Oct 17 09:51:13 2018 -0700

    Raise ValueError in tf.einsum() when passed unsupported input.
    
    The case where an axis appears more than once for a single input
    was listed in the docstring as unsupported, but the code didn't
    raise an exception in this case, and instead returned an incorrect
    result.
    
    This change also fixes an unrelated bug in the docstring.
    
    PiperOrigin-RevId: 217535799

commit dee02afef2f001f30e7f2415515e8bf963a5f4a4
Author: Tiezhen WANG <wangtz@google.com>
Date:   Mon Oct 15 20:34:13 2018 -0700

    Keras TPU support: Fix minior usability issue.
    
    The current code fails with the following code:
    use_pipeline = magic_function()
    model.fit(..., _pipeline=use_pipeline)
    
    when use_pipeline is True, it's not pop out from kwargs thus causing exceptions in line 1559
    
    PiperOrigin-RevId: 217256095

commit b72265dc002e712fc3d0f33434f13c7a36a484b2
Author: Derek Murray <mrry@google.com>
Date:   Mon Oct 1 16:45:11 2018 -0700

    [tf.data] Deprecate `tf.contrib.data` and introduce `tf.data.experimental` to replace it.
    
    This change prepares `tf.data` for TensorFlow 2.0, where `tf.contrib` will no longer exist. It retains the pre-existing endpoints in `tf.contrib.data` with deprecation warnings.
    
    Note there are some exceptions to the move:
    
    * Deprecated symbols in `tf.contrib.data` have not been moved to `tf.data.experimental`, because replacements already exist.
    * `tf.contrib.data.LMDBDataset` has not been moved, because we plan to move it to a SIG-maintained repository.
    * `tf.contrib.data.assert_element_shape()` has not yet been moved, because it depends on functionality in `tf.contrib`, and it will move in a later change.
    * `tf.contrib.data.AUTOTUNE` has not yet been moved, because we have not yet determined how to `tf_export()` a Python integer.
    * The stats-related API endpoints have not yet appeared in a released version of TensorFlow, so these are moved to `tf.data.experimental` without retaining an endpoint in `tf.contrib.data`.
    
    In addition, this change includes some build rule and ApiDef refactoring:
    * Some of the "//third_party/tensorflow/python:training" dependencies had to be split in order to avoid a circular dependency.
    * The `tf.contrib.stateless` ops now have a private core library for the generated wrappers (and accordingly are hidden in their ApiDef) so that `tf.data.experimental.sample_from_datasets()` can depend on them.
    
    PiperOrigin-RevId: 215304249

commit b874ada5731ca2315600f97a2703561a30b82b89
Author: Benjamin Kramer <kramerb@google.com>
Date:   Thu Sep 20 11:06:21 2018 -0700

    [SE] Use absl instead of TF classes where an absl version exists
    
    With the exception of StrCat all of these are using absl already, this change
    just removes one layer of indirection.
    
    PiperOrigin-RevId: 213846036

commit 7bc9f39687ef41372acb3e5e25b43eeaa66d2c6b
Author: Brian Patton <bjp@google.com>
Date:   Wed Sep 19 06:37:43 2018 -0700

    Distributions should raise the original exception (log_prob not implemented) instead of the fallback exception (prob not implemented).
    
    Additionally, in a nested structure of transformed distributions, it can be useful to know which distribution is raising this error.
    
    PiperOrigin-RevId: 213618306

commit 28dd4d9fcbf8cac1008b2ccd2b4be3fa3c25afd1
Author: Allen Lavoie <allenl@google.com>
Date:   Mon Sep 17 14:24:17 2018 -0700

    Keep only weak references to variables in graph functions
    
    This enables cleanup of the variables referenced in defunned methods of objects when the object is garbage collected. Since one PolymorphicFunction is created per @defun, decorated methods before this change held on to all of the variables referenced in that method for any instance of the class (i.e. variables which should have been object-scoped were scoped to the lifetime of the class definition).
    
    Raises an exception if variables used in the function have been deleted when it is called, which means no local variables.
    
    PiperOrigin-RevId: 213337256

commit 204ef67242ce7fbba067b631c4d6c4bcd64288c2
Author: Yan Facai (颜发才) <facai.yan@gmail.com>
Date:   Sat Sep 1 21:06:52 2018 +0800

    CLN: remove print method, and append error msg to exception

commit 2c97ee31b0cb584b255232d46d4e42db4cbcb1c2
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Thu Aug 30 15:26:20 2018 -0700

    We now also log the exception which is thrown while running the session.
    
    PiperOrigin-RevId: 210991606

commit 3e262b9efdb537531bb732a12d088b113818d16d
Author: Sergei Lebedev <s.lebedev@criteo.com>
Date:   Thu Aug 30 11:57:33 2018 +0200

    tf.errors.OpError and its subclasses are pickleable
    
    The builtin BaseException class defines a generic __reduce__ method which
    uses the args attribute, see BaseException_reduce in Objects/exceptions.c.
    tf.errors.OpError keeps args empty and therefore cannot be pickled via
    BaseException.__reduce__. This commit fixes  the issue by defining
    OpError.__reduce__.

commit 0f443619fb13fcd5c34cb7d8c867b64339afdcfc
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Wed Aug 29 08:58:12 2018 -0700

    Missing space in line-broken exception string caused grammatical error ("...initializer function thatexpects no arguments...").
    
    PiperOrigin-RevId: 210729493

commit f8ee9799e6a72d4fe24f9fad76d6e6b1b3a01af1
Author: Yan Facai (颜发才) <facai.yan@gmail.com>
Date:   Sat Aug 25 07:03:07 2018 +0800

    ENH: raise exception if unsupported features/columns is given

commit 0b12d0d1ef24d667199d097c200ab65042e4e697
Author: kouml <key.mtrgtring@gmail.com>
Date:   Wed Aug 15 00:55:43 2018 +0900

    avoid url error exception

commit c38bf1ca5051b15356fe4219f36f7f44829fb2ae
Author: Piotr Padlewski <prazek@google.com>
Date:   Thu Aug 9 16:24:38 2018 -0700

    Fix emplace_back(new) calls
    
    Doing v.emplace_back(new Type) on a std::vector<std::unique_ptr<Type>>
    is not exception safe.
    This is because it cause a leak of passed pointer if emplace_back would throw exception before emplacement (e.g. not enough memory to add a new element).
    
    PiperOrigin-RevId: 208130121

commit c216a1be9564bd6b83b1e81b1eea65cc381bd82e
Author: Piotr Padlewski <prazek@google.com>
Date:   Thu Aug 9 12:48:32 2018 -0700

    Fix emplace_back(new) calls
    
    Doing v.emplace_back(new Type) on a std::vector<std::unique_ptr<Type>>
    is not exception safe.
    This is because it cause a leak of passed pointer if emplace_back would throw exception before emplacement (e.g. not enough memory to add a new element).
    
    PiperOrigin-RevId: 208095516

commit 72023ba74dd6f18a215925c4d1bc86c9f25f6a7a
Author: Allen Lavoie <allenl@google.com>
Date:   Wed Aug 1 11:05:57 2018 -0700

    Fix custom mapping comparisons in the nest utility
    
    Previously it checked that one object was a mapping before using PyDict methods on the second one being compared. Now checks that both are dicts and falls back to PyMapping methods otherwise.
    
    Also fixes exception propagation for this section of code.
    
    PiperOrigin-RevId: 206957412

commit cc214186a15e6c5086e1409443032ba67f4bf04c
Author: Allen Lavoie <allenl@google.com>
Date:   Tue Jul 31 11:14:25 2018 -0700

    Checkpointable: Fix initialize_or_restore() for unhashable types
    
    e.g. auto-generated list wrappers would raise exceptions.
    
    PiperOrigin-RevId: 206793775

commit 2cd10fad524f99048033c99fdac310487fe8173b
Author: Jared Duke <jdduke@google.com>
Date:   Wed Jul 25 10:22:33 2018 -0700

    Refine JNI exception when tensor allocation fails
    
    PiperOrigin-RevId: 206013732

commit 67b9e8eafd826d3f430eb7f6780e815fcac5859e
Author: Russell Power <power@google.com>
Date:   Wed Jul 25 10:14:04 2018 -0700

    Reraise full exception context when handling errors.
    
    PiperOrigin-RevId: 206012390

commit 21f139075de212ccaab69bb89bb96d8b98282523
Author: Allen Lavoie <allenl@google.com>
Date:   Wed Jul 25 09:56:29 2018 -0700

    Fix dependency overwriting in _add_variable_with_custom_getter
    
    Removes an exception which should have been removed in cl/203156155 (there is an equivalent exception slightly deeper which is more nuanced). The conditional as-is makes no sense.
    
    PiperOrigin-RevId: 206009242

commit 6d0bb6f647a73e394666d1d8821f0427053a8803
Author: Yan Facai (颜发才) <facai.yan@gmail.com>
Date:   Tue Jul 24 11:35:15 2018 +0800

    TST: check message of exception

commit 4d876cd4b1187a839c3f6b12283eaa599218c0b6
Author: Shaba Abhiram <shabarivas.abhiram@gmail.com>
Date:   Mon Jul 23 18:17:24 2018 -0700

    [Review Feedback] apply dtype to _convert on non list inputs to py_func
    
    Disabled the `testBadNumpyReturnType` which should allow for a
    conversion of an arbitrary np.array into a list of a specified dtype.
    
    Modified the exception expectation for the `testBadReturnType` test.

commit 989819a78d59387aea728eb1807fb59f9d101411
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Mon Jul 23 12:14:01 2018 -0700

    Broaden dropped exception set in error handler in `transformer.Base.visit`.
    
    Test with an example that breaks error reporting in said
    `transformer.Base.visit` without this change.  (Admittedly, by
    directly calling `visit` and committing a type error in the API.)
    
    PiperOrigin-RevId: 205702348

commit 2ff8c85dfca8afb2a4129e8fa86802bd5f25a1c6
Author: Asim Shankar <ashankar@google.com>
Date:   Fri Jul 20 09:28:37 2018 -0700

    [eager]: Correctly handle operation arguments of mixed types in the slow path.
    
    Consider the following:
    
    import tensorflow as tf
    tf.enable_eager_execution()
    x = tf.Variable(1.0)
    tf.Print(x, ["foo", x])
    
    Prior to this commit, this snippet would fail with an error:
    
    ValueError: exceptions.TypeError: object of type 'ResourceVariable' has no len()
    
    raised from the call to ops.EagerTensor in convert_to_mixed_eager_tensors.
    
    With this commit, the tf.Print call works correctly.
    Note that convert_to_mixed_eager_tensors is only called in the slow path of operation execution (i.e., when TFE_Py_FastPathExecute fails). Which happens rarely (e.g., when mixing primitive string and EagerTensor/ResourceVariable arguments).
    
    PiperOrigin-RevId: 205408407

commit ec85fc632651324cb674793ae9741fb9a9a9c4f6
Author: Andrew Selle <aselle@google.com>
Date:   Wed Jul 18 10:25:51 2018 -0700

    Correct exception handling in TFLite Python interpreter.
    
    We were incorrectly returning nullptr all the time. We need
    to return None sometimes and check for it.
    
    PiperOrigin-RevId: 205098110

commit 4b22c6ba0145f64db40cf53df8fec885cd65738c
Merge: e6ce9ea5a15 86ad3363e18
Author: TensorFlower Gardener <gardener@tensorflow.org>
Date:   Sun Jul 15 12:49:28 2018 -0700

    Merge pull request #20542 from rongjiecomputer:exception
    
    PiperOrigin-RevId: 204662666

commit a13948083e6a8100379cf02afecb8f37ce33f40a
Author: Andrew Selle <aselle@google.com>
Date:   Wed Jul 11 10:38:07 2018 -0700

    Improve error handling and usability of Python interpreter
    
    - Break dependency on tensorflow platform and logging and absl
    - Propagate exceptions that capture the TensorFlow lite errors
      in a buffer.
    
    PiperOrigin-RevId: 204148724

commit d4c3d3f8d7ce94ad7569feead442fa08b6dfe96c
Author: Jared Duke <jdduke@google.com>
Date:   Mon Jul 9 13:18:37 2018 -0700

    Avoid exceptions in the Interpreter finalizer
    
    PiperOrigin-RevId: 203817866

commit 86ad3363e18f7df3f86f30150f7b13d389c459e5
Author: Loo Rong Jie <loorongjie@gmail.com>
Date:   Wed Jul 4 19:32:20 2018 +0800

    Suppress /wd4577 'noexcept with no exception handling mode' warning

commit 3db3f1f83a562587cc207106258751d089c48ae4
Author: Loo Rong Jie <loorongjie@gmail.com>
Date:   Wed Jul 4 13:18:02 2018 +0800

    [MSVC] Disable C++ exceptions

commit 54fee8b09ed3a3b6f87dcd76dc6fb7c388e6482f
Author: naurril <naurril@gmail.com>
Date:   Tue Jul 3 00:36:19 2018 +0800

    cleanup CondContext at exception

commit 7479d62c618afed006f0bc643c4448cb1bbe2539
Author: Dan Moldovan <mdan@google.com>
Date:   Fri Jun 29 09:49:16 2018 -0700

    Broad refactor (part 4): Split the CFG construction part into a component separate from the dataflow analysis. Extend it to cover return statements, nested functions and finally blocks.
    Note: AutoGraph doesn't support exceptions and will reject try/finally constructs, but they were easy enough to add.
    This is not used yet.
    
    PiperOrigin-RevId: 202661509

commit 0682dbb8acf47ede892c5185cc6ff3d18ce79c29
Author: Peter Hawkins <phawkins@google.com>
Date:   Wed Jun 27 17:03:28 2018 -0700

    [TF:XLA] Implement QuantizeAndDequantizeV3.
    
    Change XLA lowering of QuantizeAndDequantizeV2/V3 to match the TF kernel much more closely. The main exception is the min_quantized and max_quantized values are calculated as floats to avoid the need for 64-bit integer math, which is not present on all accelerators.
    
    Reformats unary_ops_test.py in passing, but on the whole I don't mind the reformatting.
    
    PiperOrigin-RevId: 202395114

commit 145cc9060896fb1f1f17eb15fc90fd6fbac959f2
Author: Peter Hawkins <phawkins@google.com>
Date:   Wed Jun 27 17:03:28 2018 -0700

    [TF:XLA] Implement QuantizeAndDequantizeV3.
    
    Change XLA lowering of QuantizeAndDequantizeV2/V3 to match the TF kernel much more closely. The main exception is the min_quantized and max_quantized values are calculated as floats to avoid the need for 64-bit integer math, which is not present on all accelerators.
    
    Reformats unary_ops_test.py in passing, but on the whole I don't mind the reformatting.
    
    PiperOrigin-RevId: 202395114

commit 623513f26579d04a1eb8a836b9d78896abfb599c
Author: Peter Hawkins <phawkins@google.com>
Date:   Tue Jun 26 11:54:20 2018 -0700

    [XLA] Add free functions in the xla:: namespace that mirror XlaBuilder methods. These free functions can be used unqualified if desired (even outside xla:: because of argument-dependent lookup), removing the need to explicitly pass or call via an XlaBuilder for most methods.
    
    The main exceptions to this rule are source nodes (e.g., Const, Parameter, Recv), or nodes with a possibly-zero arity (e.g., ConcatInDim, Tuple).
    
    No tests are added for the new methods; the intention is to switch all existing users of the builder methods to the free functions, at which point they will have good test coverage.
    
    PiperOrigin-RevId: 202167553

commit 066a24e4215da5946cd0bdb5c78038e9e20ae6cf
Author: Andrew Selle <aselle@google.com>
Date:   Sun Jun 17 14:46:46 2018 -0700

    Add support for direct buffer access from TF Lite Python API.
    
    Also fixed other problems
    - Fix bounds checking on tensor index
    - Fix tensor byte size to be size_t
    - Fix memory leak in buffer allocation
    - Remove dependency on core tensorflow
    
    In a susbsequent CL I will refactor to not require logging and instead send
    ValueError or RuntimeErrors back as exceptions that properly use TFLite
    ErrorReporters.
    
    PiperOrigin-RevId: 200915674

commit e9482666b30689dac06077dbf4ecfc13ff00d523
Author: Niranjan Hasabnis <niranjan.hasabnis@intel.com>
Date:   Fri Jun 15 11:22:55 2018 -0700

    [Intel-MKL] Support for N-D Transpose using MKL-DNN
    
    This PR adds support for N dimensional transpose using MKL-DNN.
    Since MKL-DNN requires exception support enabled for compilation,
    we create a new build rule for mkl_transpose_op, and thus the related
    changes in other build files. Also, since we can eliminate MKL binary
    blob for Transpose, we add corresponding preprocessor macros around
    transpose code.

commit ad1fc6b020e08c7a1092bfb85a175a3c5ddf4405
Author: Christopher Suter <cgs@google.com>
Date:   Tue Jun 5 09:26:45 2018 -0700

    Eliminate nested try/catch's in Distribution._call_prob and friends. These nested try/catches have the unintended effect of hiding any downstream NotImplementedErrors and replacing them with an earlier exception.
    
    PiperOrigin-RevId: 199308457

commit f6a8cf82134a305f6d27368b2f51819b11195ada
Author: Dan Moldovan <mdan@google.com>
Date:   Thu May 31 08:53:36 2018 -0700

    Cleanup: update continue_statements.py to use the base transformer facilities for tracking local state and reindenting node blocks. Rearrange the error handling in base transformer to avoid chained exceptions.
    
    PiperOrigin-RevId: 198727946

commit 0a06a20fcc09b6af8bdd69a52f7015c926113c47
Author: Yan Facai (颜发才) <facai.yan@gmail.com>
Date:   Wed May 23 07:16:01 2018 +0800

    BUG: keras.callbacks.TensorBoard raises an exception for non_trainale_weights (#19148)
    
    * TST: write_grads for non_trainable_weights
    
    * BUG: bypass non_trainable_weights for write_grad
    
    * CLN: factor out write_grad loop

commit b1347d0e3110dd20ce13bc8b6fb67548db6c3d0f
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Tue May 15 20:14:18 2018 -0700

    Hardcode two exceptions to the list of files allowed in a 'platform'
    
    PiperOrigin-RevId: 196771621

commit 2a956c9b8f9950405b481ccc0e05636873ecc9ae
Author: Yong Tang <yong.tang.github@outlook.com>
Date:   Fri Apr 20 02:40:37 2018 +0000

    Support string tensors for tf.count_nonzero
    
    This fix tries to address the issue raised in 18712 where
    `tf.count_nonzero` does not support string tensors.
    
    The implementation of `tf.count_nonzero` relies on `tf.not_equal`
    which actually support string tensors. The reason the string
    tensor does not work is because `tf.count_nonzero` created
    a numpy type `zero` which uses `input_tensor.dtype.as_numpy_dtype()`.
    The numpy type `zero` is then passed to `tf.not_equal (which converts
    numpy `zero` into a tensor zero). However,
    `input_tensor.dtype.as_numpy_dtype()` will converts tf.string to
    numpy.object thus the exception.
    
    But that is not necessary as `zero` could be created
    with `tf.zeros` directly without back and forth conversion
    to numpy.
    
    This fix fixes the issue.
    
    This fix fixes 18712.
    
    Signed-off-by: Yong Tang <yong.tang.github@outlook.com>

commit ab5abfa42bdced7bf1c371e5e1224bdc1fafdcc1
Author: Asim Shankar <ashankar@google.com>
Date:   Thu Apr 19 14:10:01 2018 -0700

    RecordReader: Simplify interface contract and implementation.
    
    Prior to this change, RecordReader had the following contract:
    - Records can be read in any order, EXCEPT if compression or buffering was
      enabled.
    - If the underlying file is being concurrently written to
      then calls to ReadRecord() may fail (because of an incomplete
      record near the end of a file), but a retry may succeed (once the
      record is written), EXCEPT if compression or buffering is enabled
      (in which case the failure will be terminal).
    
      This "retry-may-succeed" behavior is relied upon by tensorboard
      (https://github.com/tensorflow/tensorboard/blob/1.7/tensorboard/backend/event_processing/event_file_loader.py#L55)
      where one process (typically the model training process) is writing
      tf.summary events to an event file and another process (tensorboard)
      is concurrently reading it.
    
    With this change, the intent is to remove the EXCEPTions and have the
    same behavior irrespective of compression/buffering.
    
    Additionally, fix a memory leak when ZlibInputStream::Reset() is invoked.
    
    PiperOrigin-RevId: 193571934

commit 00592f397f75a51fc6d4f48a61f9fd6b96dd5cab
Author: Michael Case <mikecase@google.com>
Date:   Mon Apr 16 10:41:49 2018 -0700

    Fix Exception syntax.

commit d82b2f71b60d5fff48884c20c7b85e517330e91f
Author: Yan Facai (颜发才) <facai.yan@gmail.com>
Date:   Fri Apr 6 10:51:12 2018 +0800

    add assert_element_shape method for tf.contrib.data (#17480)
    
    * ENH: add assert_element_shape method
    
    * CLN: add indentation
    
    * ENH: raise exception when wrong shape is given
    
    * CLN: fix too long line

commit 655b2663e7d2609b0f578b9ef3c1401de22dc5c2
Author: Akshay Modi <nareshmodi@google.com>
Date:   Tue Apr 3 10:04:47 2018 -0700

    Apply "Raise exception in SWIG on bad TF_Status" to base.i
    
    Minor fixes to make this work.
    
    PiperOrigin-RevId: 191457070

commit 97731cb122f53552bd15351e046a256f78cca444
Author: Skye Wanderman-Milne <skyewm@google.com>
Date:   Fri Mar 30 14:56:08 2018 -0700

    Raise exception in SWIG on bad TF_Status from C API.
    
    This change provides an alternative mechanism to
    tf.raise_exception_on_not_ok_status(), which is inefficient and
    error-prone (people often use the status multiple times in the with
    block, but it's only checked when the context manager exits). Instead,
    it uses SWIG to automatically raise an exception when a C API method
    fails. Note that this removes the status argument from affected
    methods.
    
    For now, I've only applied this typemap to C API methods. It would be
    good to expand this to all uses of raise_exception_on_not_ok_status.
    
    PiperOrigin-RevId: 191121016

commit 28dec7f4669e8ed5af4a3abebf9888d3fdffe5fd
Author: Priya Gupta <priyag@google.com>
Date:   Thu Mar 29 19:24:58 2018 -0700

    Add basic serialization support to DistributedVariable (by using the underlying primary variable's serialization). Also, throw an exception when trying to de-serialize as we haven't implemented that yet.
    
    PiperOrigin-RevId: 191022884

commit c7334fef9d1173525f6111b8ab50360b6531d76b
Author: Brennan Saeta <saeta@google.com>
Date:   Wed Mar 21 18:02:01 2018 -0700

    [tf.data] Do not crash when combining .cache().take().repeat()
    
    Currently, if the .cache() iterator is not fully consumed before
    being repeated, it will cause an exception to be raised to Python.
    Instead, cache should act as an identity transformation and log
    an error, as this will not affect the correctness of the user's
    program (at the cost of an unexpected performance cost: i.e. not
    actually caching).
    
    PiperOrigin-RevId: 189999552

commit 584e3495b50db8fd0a894de8b6d85fcf4268a855
Author: Sunitha Kambhampati <skambha@us.ibm.com>
Date:   Tue Mar 13 11:43:01 2018 -0700

    Fix floating point exception with bps calculation
            modified:   tensorflow/contrib/tensorboard/db/loader.cc

commit f38eef5e21bdef3ae24f4291c755381d5d9a6c22
Merge: ca7fa4a126b b1033e52142
Author: Yifei Feng <1192265+yifeif@users.noreply.github.com>
Date:   Thu Mar 8 12:33:26 2018 -0800

    Merge pull request #17567 from tensorflow/yifeif-patch-2
    
    Update tensorrt import exception.

commit 7a9419317f866349890a9f6633050c38e848aee4
Author: Yifei Feng <1192265+yifeif@users.noreply.github.com>
Date:   Thu Mar 8 11:10:24 2018 -0800

    Update tensorrt import exception.

commit d8809e9c94c959ad290d41a104ed0c65f434079a
Author: jjsjann123 <jiej@nvidia.com>
Date:   Wed Mar 7 12:56:30 2018 -0800

    raise RuntimeError to catch exception

commit 8a591af6854ee1b010d82d262072b5d3b2cdf7cc
Author: Allen Lavoie <allenl@google.com>
Date:   Thu Mar 1 17:37:49 2018 -0800

    Checkpointable: Make Templates Checkpointable
    
    Uses a variable_creator_scope to hook all variable creation within the
    Template. For variables without a more deeply nested Template parent, it adds a
    dependency directly. For variables with a Template parent, it adds a dependency
    on the sub-Template instead.
    
    The variable scope prefix for the Template itself is stripped. However, any
    variable_scopes inside the Template (such as those for Layers) will be included
    in the dependency names. So within Templates we essentially have name-based
    saving (with the exception of dependencies between Templates themselves, which
    use the object-based dependency mechanism). This isn't ideal, but will hopefully
    allow migration toward object oriented dependencies more smoothly.
    
    Throws an error on object-based save() if the dependencies don't match
    between Checkpointable and .variables.
    
    Includes a semi-related usability fix for the Checkpoint utility; mostly in
    unit tests, restore() is not called before save(), which when graph building
    was leading to the save counter not being initialized. Fixes that.
    
    PiperOrigin-RevId: 187560911

commit a805116366eddcaa8eb6a602398f8efae076e0b5
Author: Derek Murray <mrry@google.com>
Date:   Thu Feb 15 14:24:40 2018 -0800

    [tf.data] Return OK and set `*end_of_sequence = true` when repeating an empty dataset.
    
    Returning an error status could lead to situations (like
    `empty_ds.repeat(None).interleave(...)`) where the wrong exception was raised.
    This change ensures that the proper `OutOfRangeError` is raised in the user
    program.
    
    PiperOrigin-RevId: 185900119

commit fe7bbd8565f63d30d6a96c7f8c3c4326488e613d
Author: Glenn Weidner <gweidner@us.ibm.com>
Date:   Mon Feb 5 16:15:21 2018 -0800

    Remove invalid exception in linear operator (#16678)

commit e95fbc14b7b5e48f221acf57e1cf73752172f4ce
Author: Marshal Hayes <mdhayes.07@gmail.com>
Date:   Mon Feb 5 17:35:46 2018 -0600

    Removing duplicate code block that raises exception (#16568)
    
    For TensorFlow version 1.5.0-rc1, the code block below raises a `ValueError`. Simply remove the duplication (lines 274 - 277 are exactly the same) and the issue is resolved.
    
    ```
    # Add returned summaries to writer in each step.
    writer.add_summary(summary, step)
    # Add metadata to visualize the graph for the last run.
    if step == (num_steps - 1):
          writer.add_run_metadata(run_metadata, 'step%d' % step)
    ```

commit a42450a76e43154cc3bf8977c2e9c8afb1d08621
Author: RJ Ryan <rjryan@google.com>
Date:   Sat Feb 3 09:46:31 2018 -0800

    [tf-signal] Fix exception when input shape is unknown in mfccs_from_log_mel_spectrograms.
    
    PiperOrigin-RevId: 184400783

commit e3cd09001721d87e556329dd8c56f08c3ca90ee4
Merge: 65a966e3b0f 8f9e06b9943
Author: Rajendra Arora <rajendraarora161992@gmail.com>
Date:   Fri Feb 2 16:23:10 2018 +0530

    Merge branch 'master' of https://github.com/rajendraarora16/tensorflow
    
    * 'master' of https://github.com/rajendraarora16/tensorflow: (423 commits)
      Fix sanity build (#16674)
      Force sorting of CUDA and Python headers to avoid spurious rebuilds (#16586)
      Add whitelist.
      Add blacklist.
      Fix build error.
      Add sanity test back.
      Add back other sanity tests.
      Fix sanity.
      Fix tests
      Skip unknown devices since we can't optimize for them
      Allow reordering of execution order of nodes with indirect execution_plan.
      Automated g4 rollback of changelist 184188816
      GCS Throttle: 1 token == 1 Kb
      Add functionality to fold batch norm (supporting both fused and unfused batch norm) to support quantized training. The weights are always now scaled by gamma/sigma, where sigma is the moving standard deviation for stability prior to quantization.  For improved performance, the moving means and variances are frozen and the training graph modified accordingly.
      Add iterate_batches arg to Estimator.predict
      Make jit_test.py work with C API enabled.
      [XLA] add DotGeneral to the local Python XLA client.
      Revert TensorBoard entry point back to run_main
      Internal change.
      Throw an exception when the user's batch size isn't divisible by GPUs.
      ...

commit f1f1d6d482e332f11452d9103a29149e2adc7125
Author: Igor Saprykin <isaprykin@google.com>
Date:   Thu Feb 1 14:11:08 2018 -0800

    Throw an exception when the user's batch size isn't divisible by GPUs.
    
    The alternative to this is to have an adaptive approach that would unevenly split input into per-tower batches.  The concern with that was that all towers will be as slow as the one with more input reducing the performance.  Batch size seems to be commonly tailored to the available hardware.
    
    PiperOrigin-RevId: 184192793

commit e3d99c92975efc2010d0e1e2dd4c3eb787a8d67c
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Mon Jan 29 17:50:56 2018 -0800

    Remove Identity nodes if num_inputs * num_outputs <= num_inputs + num_outputs. Exceptions are Identity nodes after Variable nodes, and Identity nodes after Switch nodes when removing the node would require anchoring a control dependency on the Switch.
    Another exception is Identity nodes where inputs or outputs cross a device boundary, since we are not allowed to remove Identity nodes after _Recv that might be inserted in the graph later.
    
    PiperOrigin-RevId: 183759826

commit 8e03944589542bd64559d68989bca4a4705eed93
Author: gracehoney <31743510+aaroey@users.noreply.github.com>
Date:   Mon Jan 29 14:49:13 2018 -0800

    Fix build (part1):
    1. Changed includes of "NvInfer.h" to "tensorrt/include/NvInfer.h"
    2. Remove build target "tensorrt_ops.so" (src file doesn't exist and the
       target is not used anywhere)
    3. Add missing '#if GOOGLE_TENSORRT's
    4. Use tf_cuda_library instead of cc_library for some targets to get the
       tf_copts naturally.
    5. Revert the changes that was accidentally made (by merging with
       upstream head) from configure.py
    6. Replace exception with LOG(FATAL) in
       tensorflow/contrib/tensorrt/convert/convert_nodes.cc as exception is
       not supported.
    7. Revert the reinterprete_cast change in
       tensorflow/contrib/tensorrt/kernels/trt_engine_op.cc
    8. Fix minor formatting and naming issues according to the style guide.

commit c7351055a89b90c3114fb4c24f880a947a15352e
Author: Russell Power <power@google.com>
Date:   Mon Jan 29 14:37:17 2018 -0800

    Set default signal handler for SIGINT (keyboard interrupt).
    
    The default signal handling for Python delivers the signal to the thread for
    processing; if broad exceptions are being caught, this can often result in the
    interrupt being swallowed.
    
    PiperOrigin-RevId: 183729637

commit a6ed38feb42021c7fdf4a76587c1bbf75f3248d1
Author: Justin Lebar <jlebar@google.com>
Date:   Sun Jan 28 11:21:58 2018 -0800

    [XLA] Set layout of GTE instructions inside fusion nodes.
    
    Other than the root and parameters of a fusion computation, most other
    instructions in a fusion computation don't have a layout.  GTEs are an
    exception; they should inherit their layout from their operand, which
    must be another GTE or a parameter.
    
    Previously LayoutAssignment left GTEs alone, assuming they came in with
    the right layout.  But this isn't correct, and in fact LayoutAssignment
    cleared the layouts of every non-fused instruction before assigning them
    for exactly this reason.  If we'd done the same to fused instructions,
    it would have caught this bug, so we make that change here as well.  (We
    simplify this loop by removing the check for kOutfeed -- outfeeds do not
    produce a result, so there's no shape to keep.)
    
    PiperOrigin-RevId: 183595627

commit 1a6216e61e804019cd64732d6f95d4d9bbedb594
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Wed Jan 24 19:47:58 2018 -0800

    [XLA] Fix HloModule clone.
    
    Currently the cloning of an instruction is usually "shallow": the called
    computations of the instruction are reused in the clone. This mechanism is
    useful when the hlo graph need to be modified in place (e.g. inliner, and some
    hlo passes). One exception is the fusion instruction: it's always "deep"
    copied, which means the fused computation is copied as well. So when we deep
    cloning an HLO module, don't re-copy the fused computation, and do let the
    instruction's clone function know where to put the copied fused computation.
    
    PiperOrigin-RevId: 183181206

commit c20bb370a9009d5c20a17eb6cd35dde7eebe206f
Author: Yong Tang <yong.tang.github@outlook.com>
Date:   Wed Jan 24 21:16:52 2018 +0000

    Correct exception
    
    Signed-off-by: Yong Tang <yong.tang.github@outlook.com>

commit 7c53bc7fbec18e8c6157832d89737bcc881ecfed
Author: Yong Tang <yong.tang.github@outlook.com>
Date:   Tue Jan 23 10:01:18 2018 -0800

    Propagate the error string of GIF processing for decode_gif (#16113)
    
    * Propagate the error message to exception of `InvalidArgumentError` for `decode_gif`
    
    This fix tries to improve the error thrown by `decode_gif`
    to include the error string generated by GIF processing.
    
    Previously, the error was not very indicative as the error string
    returned by GIF processing was hidden:
    ```
    ..........
    InvalidArgumentError (see above for traceback): Invalid GIF data, size 2091369
             [[Node: DecodeGif = DecodeGif[_device="/job:localhost/replica:0/task:0/device:CPU:0"](ReadFile)]]
    ```
    
    This fix propagate the error string to be part of the `InvalidArgumentError`:
    ```
    InvalidArgumentError (see above for traceback): Invalid GIF data (size 2091369), can't process optimized gif
             [[Node: DecodeGif = DecodeGif[_device="/job:localhost/replica:0/task:0/device:CPU:0"](ReadFile)]]
    ```
    
    This fix fixes 15838.
    
    Signed-off-by: Yong Tang <yong.tang.github@outlook.com>
    
    * Reformat with clang-format -i --style=Google
    
    Signed-off-by: Yong Tang <yong.tang.github@outlook.com>
    
    * Add unit test for decode_gif to cover changes
    
    so that error messages like `can't process optimized gif` are
    propagated to the exception of `InvalidArgumentError`.
    
    Signed-off-by: Yong Tang <yong.tang.github@outlook.com>

commit 786dcb0b3ee719ae44ac23ea6ee878bbb04792cd
Author: Justine Tunney <jart@google.com>
Date:   Tue Jan 16 18:25:34 2018 -0800

    Disable exceptions in TensorFlow jsoncpp build
    
    This is necessary to compile with Clang. Since the TF GCP code doesn't have any
    try/catch statements, this could be a bug fix.
    
    PiperOrigin-RevId: 182143536

commit 0790db6fa2d084ef103c5601aecccf84cd3bd47c
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Tue Jan 16 15:19:36 2018 -0800

    Exit previously entered sub-context-managers whenever any __enter__() call
    throws an exception in tf.name_scope() and tf.variable_scope().
    
    The previous conversion from generator style context managers translated a
    nested with block like
    
        with context_a, context_b:
          yield
    
    into the following pair of __enter__()/__exit__() methods:
    
        def __enter__(self):
          self.context_a.__enter__()
          self.context_b.__enter__()
    
        def __exit__(self, *args):
          self.context_b.__exit__(*args)
          self.context_a.__exit__(*args)
          return False
    
    This translation is only correct when self.context_b.__enter__() does not throw
    an exception. In the context of tf.name_scope() and tf.variable_scope(),
    context_a is the default graph stack, and context_b is the actual scope to
    enter. Entering an actual scope throws a ValueError when the scope name is
    invalid. In that case, the above implementation leaves __enter__() without
    popping the default graph stack. Sub-sequent calls to pop the stack will thus
    fail, obscuring the actual exception that was raised in entering the scope.
    
    PiperOrigin-RevId: 182119816

commit dcddfdf045f06c9cfc7579bb61ac23d3a3b4a44e
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Thu Jan 11 19:23:24 2018 -0800

    Improve performance of several utility functions in TensorFlow
    
    framework/types.h defines a variety of functions on DataType enums. Some of these functions are implemented by allocating arrays in the heap.  Even though DataTypeVector is a typedef for InlinedVector, it only stores 4 elements inline. Many of the vectors used in types.h/types.cc contain more than 4 elements.
    
    To make matters worse, some of these functions are called quite frequently under load, so we're wasting time allocating and copying arrays.
    
    The set of distinct DataType values is so small, however, that we can represent a set of DataType values as a bitmask, and use bit-shifts and tests instead of sequential scans of arrays.
    
    Even the functions that do not allocate, such as DataTypeCanUseMemcpy(), are needlessly inefficient (read: they use control-flow and indirect jumps when a simple table-based load would do; they are also not inlined).  These costs were significant enough that they consumed about 1.2% of CPU cycles under heavy load.
    
    The surprising cost of DataTypeCanUseMemcpy() inspired this change. I went ahead and made the change fully general, by adding a DataTypeSet type and changing all of the utility functions in framework/types.h to use it (with the exception of DataTypeAlwaysOnHost because it uses a _REF type), for the sake of generality and performance.
    
    PiperOrigin-RevId: 181695458

commit 9cb4025a38620190840aa4dee3f8d6e0a2fa2d96
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Wed Jan 10 18:24:44 2018 -0800

    Throws exceptions in Java API of TF Lite if it fails to create interpreters.
    
    PiperOrigin-RevId: 181548023

commit 013a6c7b3112573ba4d932c8a22bfaf45f648c77
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Tue Jan 9 18:42:32 2018 -0800

    Add assertion to prevent generation of degenerate linear_to_mel_weight_matrix.
    
    Prior to this change if upper_edge_hertz is larger than sample_rate / 2 (the highest frequency present in the linear spectrogram), the returned matrix would contain columns that are all zeros.
    
    This is likely a surprising result for those that are unfamiliar with signal processing, so it seems safer to raise an exception on such a misconfiguration than to silently allow users to generate poorly behaved features.
    
    PiperOrigin-RevId: 181407176

commit 620c8383123519fcf4d987efb9776d861901ccfa
Author: Russell Power <power@google.com>
Date:   Fri Jan 5 12:51:39 2018 -0800

    Change placeholder exception to log instead of throwing an exception.
    
    It is difficult to remove placeholders from existing meta-graphs without breaking other structures.  As long as the placeholders do not contribute towards the loss/evaluation function they are harmless.
    
    PiperOrigin-RevId: 180963420

commit 241ed31c29b1f419b7d076ae04bd2e2bb9b4ddea
Author: Chris Leary <leary@google.com>
Date:   Wed Jan 3 20:00:42 2018 -0800

    [XLA:python] Plumb Python exceptions through API instead of OrDie'ing.
    
    PiperOrigin-RevId: 180749642

commit fc2526a8c1cf0bc2a93c8cc819ff7209eb4628c9
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Fri Dec 15 23:38:01 2017 -0800

    Merged commit includes the following changes:
    179277894  by gunan:
    
        Run buildifier on build file.
    
    --
    179275101  by meheff:
    
        Replace DeviceMemoryBase with ShapedBuffer in XLA interfaces.
        Executable, TransferManager, and AllocationTracker now use ShapedBuffer to hold device memory addresses holding XLA data. Most of the change is straight-forward with the exception of AllocationTracker which was mostly rewritten (and simplified) and some refactoring in the CPU executable.
    
        Also, have ShapedBuffer hold on-host and on-device Shapes which are the shapes of the representation of the data on the host and device, respectively. This is necessary because with cl/178624364 the on-host and on-device shape may no longer be equal.
    
    --
    179265385  by A. Unique TensorFlower:
    
        Return error rather than CHECK fail in Executable::ExecuteOnStreamWrapper
    
    --
    179264551  by dandelion:
    
        Internal fixes.
    
    --
    
    PiperOrigin-RevId: 179277894

commit 968da4bf2722b1303cc223e8342357d62c27dfc1
Author: Skye Wanderman-Milne <skyewm@google.com>
Date:   Tue Dec 12 10:58:31 2017 -0800

    Raise exception on missing unused input_map keys with C API enabled.
    
    Without this change, the C++ ImportGraphDef API returns unused
    input_map keys (which are plumbed through to the C API as
    well). However, the Python import_graph_def API requires slightly
    different semantics: it throws an error for unused input_map keys that
    are missing from the GraphDef.
    
    This change modifies the C and C++ APIs to limit the returned keys to
    those missing from the GraphDef, and plumbs this through to the C
    API-enabled import_graph_def implementation.
    
    Note that this is a change to the existing C API. Luckily the modified
    method hasn't been released yet, so it's ok to change it.
    
    PiperOrigin-RevId: 178783957

commit 7772360b9f9e466437a3ecadeb9c5ca28ccbbc50
Author: Skye Wanderman-Milne <skyewm@google.com>
Date:   Thu Dec 7 13:34:55 2017 -0800

    Raise exception on bad while loop shapes sooner.
    
    This change moves the _EnforceShapeInvariant call inside
    _AddNextAndBackEdge, instead of after it. This is so we can do the
    check before calling Operation._update_input, which throws a shape
    error with the C API enabled.
    
    PiperOrigin-RevId: 178287233

commit cdc36a3b1f7d227984bb5e415b555ed334737f82
Author: Shanqing Cai <cais@google.com>
Date:   Thu Dec 7 11:42:26 2017 -0800

    tfdbg: cosmetic fix to MonitoredSession.__del__ AttributeError
    
    Prevoiusly, calling "del" on a tf_debug-wrapped MonitoredSession causes a warning message like the following:
    Exception AttributeError: "'MonitoredSession' object has no attribute '__del__'" in <bound method LocalCLIDebuggerWrapperSessionForTest.__del__ of <__main__.LocalCLIDebuggerWrapperSessionForTest object at 0x558c74f642d0>> ignored
    
    As the message states, the AttributeError is ignored and doesn't cause failures.
    
    This CL prevents this message by checking that the underlying _sess object has the __del__ method defined before calling it.
    
    Fixes: #15105
    PiperOrigin-RevId: 178272619

commit f42fde42beda0b6080f7051238cfb7f5036d861c
Author: Christoph Boeddeker <boeddeker@users.noreply.github.com>
Date:   Thu Nov 30 01:03:38 2017 +0100

    improved estimator.export_savedmodel exception (#14979)

commit 7921d01ec8fed3e5c62264b99b09440ea09796fe
Author: Allen Lavoie <allenl@google.com>
Date:   Wed Nov 29 10:06:59 2017 -0800

    Raise an exception when converting lists with invalid lengths to Tensors instead of CHECK failing
    
    PiperOrigin-RevId: 177324815

commit 5fbda9d8da7b98f62e83a392f047adf307b48b02
Author: zxcqwe4906 <b00902042@ntu.edu.tw>
Date:   Wed Nov 22 15:13:18 2017 +0800

    Change ndimage.imread to imageio.imread. (#14710)
    
    Scipy will not support imread from 1.0.0 as its document says:
    https://docs.scipy.org/doc/scipy-1.0.0/reference/generated/scipy.misc.imread.html
    
    Change to imageio.imread and add its correspond exception.

commit 775b496167bef8067d6c03f42809a96d565727f9
Author: Alexandre Passos <apassos@google.com>
Date:   Mon Nov 20 14:59:34 2017 -0800

    Do not swallow exceptions in gradient functions in eager.
    
    PiperOrigin-RevId: 176422128

commit f7a6c4294dfb1603da33a952080bc4c46935a461
Author: Russell Power <power@google.com>
Date:   Mon Nov 20 12:26:08 2017 -0800

    Raise an exception if a user attempts to use unsupported operations on the TPU.
    
    PiperOrigin-RevId: 176399081

commit 215591a355e8c758c6b1d901a96c5f71101426af
Author: FirefoxMetzger <S.Wallkoetter@gmx.de>
Date:   Fri Nov 17 21:56:54 2017 +0100

    use with when calling TFRecordWriter (#14497)
    
    TFRecordWriter supports __enter__ and __exit__ .
    Calling it through with is more pythonic and does cleanup in case something throws an uncaught exception.

commit 3a63bce95f67854b6745cb43e0e9feb1e93587f1
Author: Russell Power <power@google.com>
Date:   Tue Nov 14 15:57:27 2017 -0800

    Make the definition of summary operations a warning instead of raising an exception.
    
    PiperOrigin-RevId: 175748972

commit 4e69e02241067129379f73dd4fefe57f0a12bdc9
Author: Martin Wicke <martin.wicke@gmail.com>
Date:   Tue Nov 7 11:35:23 2017 -0800

    Branch 174861804 (#14326)
    
    * Add ImportGraphDefTest.testMultipleImport to importer_test.py
    
    This tests the name deduping behavior of import_graph_def. This
    behavior is actually defined by the op creation logic, not
    import_graph_def, but I added a test here since the C++ ImportGraphDef
    function must emulate it (and presumably we'd like to maintain the
    import_graph_def behavior moving forward).
    
    PiperOrigin-RevId: 174536014
    
    * Apply lib_internal defines to both lib_internal and lib_internal_impl
    
    Should fix checkpoint reading with snappy compression.
    
    Will follow up with testing for this sort of checkpoint issue.
    
    PiperOrigin-RevId: 174538693
    
    * n/a (internal change only)
    
    PiperOrigin-RevId: 174539513
    
    * A few changes to ApiDef generation:
    - Create a separate api_def_*.pbtxt file for each op.
    - Add attribute and argument descriptions to ApiDef.
    - Apply overrides based on op_gen_overrides.pbtxt file.
    
    PiperOrigin-RevId: 174540421
    
    * Add uniquify_names option to ImportGraphDef.
    
    This option allows ImportGraphDef to mimic the behavior of the Python
    import_graph_def function, which automatically creates unique node
    names instead of raising an exception (this is due to the Python op
    construction logic, not import_graph_def directly). This change is
    a steps towards switching import_graph_def to use the C API version.
    
    PiperOrigin-RevId: 174541334
    
    * Fix bad_color param on tf.contrib.summary.image
    
    PiperOrigin-RevId: 174549117
    
    * Hlo parser: support control-predecessors.
    
    Also,
    - Changed from printing control-sucessors to printing control-predecessors
    because predecessors are defined before use.
    - Surround the predecessors with {}.
    
    PiperOrigin-RevId: 174552224
    
    * Support pad node.
    
    PiperOrigin-RevId: 174581035
    
    * Add tf.contrib.framework.sort, wrapping tf.nn.top_k (#288).
    
    Comparable to np.sort, but their "kind" parameter is not implemented (only one sort algorithm) and "order" is not applicable (tensors do not have fields).
    
    PiperOrigin-RevId: 174588000
    
    * [TF2XLA] Don't change output port for control dependency in CopySubgraph.
    
    If the output is being squashed then we want control output 0, except where the
    input is a control dependency.
    
    PiperOrigin-RevId: 174633829
    
    * Use latest nsync: allows running bazel after having downloaded for "make" build
    
    The downloads directory for the make build is within the source tree seen by bazel,
    which means that BUILD files (by whatever name) without those downloaded trees
    must all be valid in their new location, or not recognized by bazel as being BUILD files.
    The new version of nsync handles that, and this change pulls in that new version.
    
    PiperOrigin-RevId: 174652898
    
    * Add profiling support to Service::ExecuteParallel.
    
    PiperOrigin-RevId: 174682772
    
    * Replicate `Estimator.model_fn` across available GPUs.
    
    def replicate_model_fn(model_fn, optimizer_fn, devices=None):
      """Replicate `Estimator.model_fn` over GPUs.
         ...
    
    I tested that it seems to give the right result on cnn_mnist.py on 1 CPU, 1 real GPU, 4 allow_soft_placement=True GPUs.
    
    Some measurements on CNN MNIST across steps 19300-20000:
    
    1) no replicate_model_fn call:
    global_step/sec: 156.254
    global_step/sec: 155.074
    global_step/sec: 155.74
    global_step/sec: 153.636
    global_step/sec: 157.218
    global_step/sec: 159.644
    
    2) replicate across one hardware GPU:
    global_step/sec: 158.171
    global_step/sec: 165.618
    global_step/sec: 162.773
    global_step/sec: 159.204
    global_step/sec: 162.289
    global_step/sec: 167.173
    
    3) replicate across 4 software GPUs on one hardware GPU (soft placement):
    global_step/sec: 75.47
    global_step/sec: 76.16
    global_step/sec: 75.18
    
    Loss numbers didn't change across the three configurations.
    
    PiperOrigin-RevId: 174704385
    
    * Enables wrapping input pipeline into tf.while_loop for all users.
    
    PiperOrigin-RevId: 174708213
    
    * SerializeIterator: do not unref the resource until we're finished using it.
    
    This change avoids a potential use-after-free error if the resource is concurrently serialized and destroyed (e.g. by a DestroyResourceOp or Session::Reset()).
    
    PiperOrigin-RevId: 174713115
    
    * Improve error message when a function is already defined with the same name and different hash string.
    
    PiperOrigin-RevId: 174715563
    
    * Fix generate_examples build
    
    - Add -march=native to host_copts and host_cxxopts in configure.py
    - Make string.h for abstracting string differences at core interpreter level
    - Use tensorflow special arg parse instead of flags
    - Switch to using tool instead of data for dependency
    - Fix python3  compatibility
      + Use six.StringIO instead of StringIO.StringIO
      + Use print_function
      + Properly set binary flags on TempFile's used in toco_convert
    - Misc other path fixes
    
    PiperOrigin-RevId: 174717673
    
    * Add input format agnostic way to parse HLOs.
    
    PiperOrigin-RevId: 174719153
    
    * Remove misleading comment from Eigen build file.
    
    PiperOrigin-RevId: 174719222
    
    * Basic plumbing for calling C API from import_graph_def()
    
    PiperOrigin-RevId: 174724070
    
    * Memory leak detected when running a heap checker in our tests.
    
    PiperOrigin-RevId: 174726228
    
    *    [tpu:profiler] Support the Input Pipeline Analyzer tool in TPU profiler (WIP)
          o.  move input pipeline analyzer related proto for grpc between red and green VMs
          o.  rename perftools.gputools.profiler.collector::TfStatsHelperResult to tensorflow::tpu::TfOpStats.
    
    PiperOrigin-RevId: 174730411
    
    * Clean up some reference cycles in eager mode.
    
    ResourceVariables enter graph mode to get a handle. We should probably revisit
    that, but in the meantime we can break the resulting reference cycles.
    
    PiperOrigin-RevId: 174732964
    
    * Improved encoding on shapes in grappler.
    
    PiperOrigin-RevId: 174733491
    
    * [tf.data] Remove unused members from IteratorContext.
    
    PiperOrigin-RevId: 174734277
    
    * Refactor helper functions a bit for virtual gpu changes later.
    
    PiperOrigin-RevId: 174735029
    
    * Fix invalid flush_secs argument.
    
    PiperOrigin-RevId: 174745329
    
    * Replace the implementation of tf.flags with absl.flags.
    
    Previous tf.flags implementation is based on argparse. It contains -h/--help flags, which displays all flags.
    absl.app's --help flag only displays flags defined in the main module. There is a --helpfull flag that displays all flags.
    So added --helpshort --helpfull flags.
    
    app.run now raises SystemError on unknown flags (fixes #11195).
    
    Accessing flags before flags are parsed will now raise an UnparsedFlagAccessError, instead of causing implicit flag parsing previously.
    
    PiperOrigin-RevId: 174747028
    
    * Fold Transpose into Matmul and SparseMatmul.
    Fold ConjugateTranspose in BatchMatmul.
    
    PiperOrigin-RevId: 174750173
    
    * BUGFIX:  special_math.ndtri didn't work with dynamic shapes.  This was due to use of constant_op.constant(..., shape=p.shape), where sometimes p was a Tensor of unknown shape.
    
    PiperOrigin-RevId: 174764744
    
    * Create a routine that can collapse a subgraph into a fused op
    
    PiperOrigin-RevId: 174765540
    
    * Force CUDA runtime initialization only when device count is larger than 0.
    
    PiperOrigin-RevId: 174767565
    
    * Remove use of xrange which is not python3 compatible.
    
    PiperOrigin-RevId: 174768741
    
    * More thoroughly disable the should_use_result decorator when executing eagerly.
    
    It was creating reference cycles.
    
    Adds a test that TensorArrays create no reference cycles in eager mode.
    
    PiperOrigin-RevId: 174768765
    
    * Fix device querying in Keras backend.
    
    PiperOrigin-RevId: 174769308
    
    * Fix race bug in AdaptiveSharedBatchScheduler.
    
    In ASBSQueue::Schedule, when a new batch is created, it was added to the scheduler outside of the queue's lock.  This was done to prevent any unforeseen interactions between the queue lock and scheduler lock.  However, this wasn't being done in a thread safe way.
    
    PiperOrigin-RevId: 174769383
    
    * Supports multi-dimensional logits and labels in multi class head.
    
    PiperOrigin-RevId: 174770444
    
    * Refactor eager benchmarks to subclass Benchmark.
    
    PiperOrigin-RevId: 174770787
    
    * Add `parallel_interleave` to tf/contrib/data/__init__.py so that it is directly addressable from tf.contrib.data.
    
    PiperOrigin-RevId: 174771870
    
    * Fix DepthToSpaceGrad and SpaceToDepthGrad on data_format NCHW.
    
    This fixes #14243.
    
    PiperOrigin-RevId: 174772870
    
    * Allow for an old_row_vocab_size, in case a subset of the old_row_vocab_file was used during the checkpoint creation (as is allowed in FeatureColumn._VocabularyListCategoricalColumn).
    
    PiperOrigin-RevId: 174781749
    
    * Go: Update generated wrapper functions for TensorFlow ops.
    
    PiperOrigin-RevId: 174781987
    
    * [BufferAssignment] Sort allocation's "Assigned" objects before converting to a proto.
    
    This makes the buffer assignment's proto dump deterministic.
    
    RELNOTES: BufferAssignment's protocol buffer dump is now deterministic.
    PiperOrigin-RevId: 174783549
    
    * [TF TensorArray] allow reading from an unwritten index if fully defined element_shape is given.
    
    This allows one to write to only some indices of a TensorArray before calling stack.
    Elements that were not written to are treated as all zero tensors.
    
    PiperOrigin-RevId: 174783569
    
    * Remove binary dependency from optimize_for_inference_lib
    
    PiperOrigin-RevId: 174787363
    
    * Update ops-related pbtxt files.
    
    PiperOrigin-RevId: 174787397
    
    * Automated g4 rollback of changelist 174523638
    
    PiperOrigin-RevId: 174788331
    
    * Skip non-existent fetch nodes
    
    PiperOrigin-RevId: 174795864
    
    * Automated g4 rollback of changelist 174735029
    
    PiperOrigin-RevId: 174796480
    
    * Add InceptionResNetV2 to tf.keras and update applications module to match Keras 2.0.9.
    
    PiperOrigin-RevId: 174796893
    
    * Fix for LLVM API changes for fast math (https://reviews.llvm.org/rL317488).
    
    PiperOrigin-RevId: 174799735
    
    * [TF:XLA] Add two disabled tests with while ops that permute tuple elements.
    
    These tests permute the tuple elements of a 3-tuple in each iteration in the following cyclic manner (132), i.e. a shift to the left.
    
    The first test just return the result tuple, the second returns the sum of all tuple elements (which is expected to be constant 6, no matter which permutation)
    
    Both tests are disabled for now because they fail on all back-ends.
    
    PiperOrigin-RevId: 174806092
    
    * Refactor function Optimize.
    
    PiperOrigin-RevId: 174813300
    
    * Add a unit test for gradient computation with layout optimizer.
    
    PiperOrigin-RevId: 174814136
    
    * Previously if ComputeConstant seen a parameter it failed to proceed.
    After this change we can specify a list of parameters to it and if we
    specify enough then it will do the computation.
    
    The primary goal of this change is to make the HloEvaluator usable
    with ComputationBuilder from tests through ComputeConstant in cases
    where the input is a parameter (fed by a literal).
    
    PiperOrigin-RevId: 174845108
    
    * Use nesting to reduce the number of modules listed in the API TOC.
    
    PiperOrigin-RevId: 174846842
    
    * Added CPU matrix exponential op to TensorFlow.
    Uses Eigen's unsupported implementation.
    
    PiperOrigin-RevId: 174858966
    
    * variables_to_restore: Differentiate python variables by string name rather than object.
    
    variables_to_restore ensured that duplicate variables weren't added to the return map by comparing python variable object. Normally there is only one Variable object for each underlying variable, so this wasn't a problem. But when one initializes a graph by importing a GraphDef, duplicate python Variable objects are created for each occurrence of a variable in a collection (say, global variables and moving average variables).
    
    This change fixes variables_to_restore to work with an imported graph def by not comparing Variable objects.
    
    PiperOrigin-RevId: 174861804

commit db10718b38b2884cb5ed46d33c135c079f649d16
Author: Vish (Ishaya) Abrams <vishvananda@gmail.com>
Date:   Fri Nov 3 20:09:38 2017 -0700

    Handle nil return from TF_TensorData (#14082)
    
    With some memory allocators, attempting to allocate 0 bytes will return
    a null pointer. This specifically happens when building tensorflow with
    mkl support. If TF_TensorData returns null, the go code to create a
    slice from the data leads to a null pointer exception. This fixes the
    issue by checking for the nil return and returning a slice zero value to
    (nil) to the caller. Fixes #13764.

commit 11c8cc337eb5e41c1695e4d6f4e8b25cdd4d9545
Author: Skye Wanderman-Milne <skyewm@google.com>
Date:   Fri Nov 3 18:31:22 2017 -0700

    Add uniquify_names option to ImportGraphDef.
    
    This option allows ImportGraphDef to mimic the behavior of the Python
    import_graph_def function, which automatically creates unique node
    names instead of raising an exception (this is due to the Python op
    construction logic, not import_graph_def directly). This change is
    a steps towards switching import_graph_def to use the C API version.
    
    PiperOrigin-RevId: 174541334

commit 3ded5b3c875634fb7ebfee986bba69ab4299214c
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Thu Nov 2 12:46:10 2017 -0700

    Update the Network-in-variable-scope exception text to point to the
    existing feature request #14164, instead of inviting the user to
    create a new one.
    
    PiperOrigin-RevId: 174366253

commit dfc7b26b0dc0dd54038a1be3b31b05bd39c1e79f
Author: Alexandre Passos <apassos@google.com>
Date:   Tue Oct 24 14:42:15 2017 -0700

    Exception instead of crashing on resource.numpy()
    
    PiperOrigin-RevId: 173313459

commit 3f30e6424fa3b8e890f9360d1661e61c2d1625a5
Author: Alexandre Passos <apassos@google.com>
Date:   Mon Oct 23 14:26:02 2017 -0700

    Makes gradients_function exception-safe.
    
    PiperOrigin-RevId: 173170394

commit d94db4be7ebc02c2de169274f9f863611e68f98d
Author: Amit Patankar <amitpatankar@google.com>
Date:   Wed Oct 18 16:10:42 2017 -0700

    Branch 172647355 (#13819)
    
    * Update inception score to match the openAI version from https://github.com/openai/improved-gan/tree/master/inception_score.
    
    PiperOrigin-RevId: 172562573
    
    * Stub support for retrieving LossFunction by name.
    
    PiperOrigin-RevId: 172588516
    
    * Don't emit fusion computations separately in HloModule::ToString. These computations are emitted with their fusion instruction and therefore don't need to be emitted as a separate comptutation in the module.
    
    PiperOrigin-RevId: 172612725
    
    * Make `tf.contrib.distributions` quadrature family parameterized by
    `quadrature_grid_and_prob` vs `quadrature_degree`. Enables support of
    quadrature methods other than Gauss-Hermite.
    
    PiperOrigin-RevId: 172622919
    
    * Fixes test breakage.
    
    PiperOrigin-RevId: 172626499
    
    * Remove global step read dependency from model_fn. Estimator behavior still will be deterministic since the step checking logic in session_run_hooks was changed as follows:
    * assume stale step
    * before using the step, check for the current value by session.run
    
    PiperOrigin-RevId: 172629797
    
    * More changs to avoid flakes in random_shuffle_queue_test
    
    PiperOrigin-RevId: 172630989
    
    * Add expected keys to predictor exception if unexpected key detected.
    
    PiperOrigin-RevId: 172634275
    
    * Add TF_GraphGetOpDef() to C API and use in Operation.op_def()
    
    Note that this creates a small change in behavior with the C API
    enabled, since previously not all Python Operations had an OpDef
    (op_def() returns None). With the C API enabled, op_def() always
    returns an OpDef.
    
    PiperOrigin-RevId: 172634411
    
    * Implement ZlibInputStream::Tell() by keeping track of the number of bytes
    consumed by the reader.
    
    PiperOrigin-RevId: 172634455
    
    * Upgrade tensorflow pip dependency version to 3.4.0+
    
    PiperOrigin-RevId: 172635727
    
    * [XLA] Deterministically dump an executable.
    
    Previously, dumping a executable is nondeterministic as a map in protobuf is serialized in random order.
    
    This CL enables "Deterministic dump" mode of protobuf, which sorts the map first before dumping them. This is helpful in comparing if two dumps are the same in XLA determinism test.
    
    PiperOrigin-RevId: 172637100
    
    * Fixed work size computation in Split and SplitV ops to avoid integer overflow.
    
    PiperOrigin-RevId: 172637818
    
    * Internal change.
    
    PiperOrigin-RevId: 172641543
    
    * Bug fixes for fold_constants_lib.
    
    1. Tensor names in TF may be in the form of "a:0", "a:1", or "a" as a shorthand
    notation of "a:0". FoldConstant library always expected the shorthand notation,
    and did not handle the cases where explicit notation was passed to input or
    output list. This means that this library could not handle the case when input
    or output were not the first output of a node.
    
    2. To match the input nodes in the original graph and the added Recv nodes in
    rewritten graph, FoldConstant library used prefix matching. Unfortunately, this
    means that when a input name is a prefix of another input name, there is
    possibility that wrong Recv node gets matched. For example, if input names were
    "placeholder" and "placeholder_1", then it did not handle the case very well.
    
    3. RemoveUnusedNodes() in FoldConstants lib could remove nodes which output
    depended on. This happened when an input name points to a node with multiple
    outputs and not all outputs of that node were included in the input names.
    
    4. ReplaceSendRecvs() in FoldConstants lib assumed that all input nodes are
    removed during rewriting the graph. This assumption is not necessarily true,
    and it could add a duplicate node in the graph.
    
    PiperOrigin-RevId: 172641947
    
    * Adds visibility to sgdr_learning_rate_decay.
    
    Currently SGD with warm restarts is siloed in
    tensorflow/contrib/training/python/training/sgdr_learning_rate_decay.py, since
    it is not listed in the 'training_py' build filegroup. This change simply adds
    sgdr_learning_rate_decay to this filegroup so that other projects can use warm
    restarts during optimization.
    
    PiperOrigin-RevId: 172643218
    
    * Add logging verbosity to mnist.py
    
    PiperOrigin-RevId: 172643922
    
    * Automated g4 rollback of changelist 172336111
    
    PiperOrigin-RevId: 172645893
    
    * Correct the docstring to reflect that the values of cols_to_vars are always lists of Variable's (never single Variable's or PartitionedVariables), and make this true for bias.
    
    PiperOrigin-RevId: 172646456
    
    * Changes MultiLabelHead.create_loss to return a Tensor of size [batch_size, 1], to be consistent with other heads.
    
    PiperOrigin-RevId: 172647355
    
    * Disabling failing contrib tests.

commit 6a725f6d0974dc71fe4ac311fc8dd16db4257452
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Wed Oct 18 11:57:04 2017 -0700

    Add expected keys to predictor exception if unexpected key detected.
    
    PiperOrigin-RevId: 172634275

commit 2c5ad1633c47ee4a1a5ccbaa2d4730786708ed92
Author: Russell Power <power@google.com>
Date:   Thu Oct 12 20:15:34 2017 -0700

    Terminate process when we hit an unexpected exception in the infeed queue.
    
    PiperOrigin-RevId: 172050536

commit 1885344c6a87866e2accb65dd2462d6815419f13
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Thu Oct 12 14:36:09 2017 -0700

    Explictly raise an exception if sharding fails because the batch size is unknown.
    
    Right now, TPUEstimator will raise an error message complaining that sharding
    failed because (None % integer value) is not a well-defined operation. I hope
    the new error message will make it easier for people to figure out what's going
    on.
    
    PiperOrigin-RevId: 172013663

commit 5eaefbabce16bffeeb4b19cee9890b1aeccabb09
Author: Frank Chen <frankchn@google.com>
Date:   Fri Oct 6 11:44:25 2017 -0700

    Merge changes from github.
    END_PUBLIC
    
    ---
    Commit ee0fdc296 authored by Gunhan Gulsoy<gunan@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add noasan tag to estimator_test
    
    PiperOrigin-RevId: 171075499
    
    ---
    Commit a02116882 authored by Justin Lebar<jlebar@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [XLA:CPU] Put the HLO name in IR values that hold the HLO's value.
    
    PiperOrigin-RevId: 171075449
    
    ---
    Commit 89aaac4bc authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Allow Layer.add_update() in Eager mode.
    
    PiperOrigin-RevId: 171070861
    
    ---
    Commit 840dcae57 authored by Amit Patankar<amitpatankar@google.com>
    Committed by gunan<gunan@google.com>:
    Updating the install sources file with a supported configs table (#13450)
    
    * Updating the install sources file with a supported configs page.
    
    * Implementing Gunan's suggestions.
    
    * Adding GCC string to Linux compiler.
    
    * Updating the bazel/cmake column.
    
    ---
    Commit 89df2e336 authored by Igor Saprykin<isaprykin@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add the 'is_the_final_export' signal to Exporters. Use them in training.
    
    When the training ends, the final export is performed via `Exporter.export()` call.  That final export is going to have is_the_final_export parameter being set to true.
    
    If `TrainSpec.max_steps` is `None`, then "when training ends" is undefined.  We are going to train forever.  In that case, `is_the_final_export` is going to be always False.  I added a note about it.
    
    PiperOrigin-RevId: 171070760
    
    ---
    Commit 4486b4f69 authored by Akshay Agrawal<akshayka@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Make graph_callable compatible with functions that do not return anything
    
    PiperOrigin-RevId: 171067061
    
    ---
    Commit 39565c0cb authored by Martin Wicke<wicke@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Publish train_and_evaluate and associated classes.
    
    PiperOrigin-RevId: 171066379
    
    ---
    Commit 3b4477000 authored by Saurabh Saxena<srbs@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Make VariantTensorData::tensors_size() const.
    
    PiperOrigin-RevId: 171063397
    
    ---
    Commit 53cc63a2d authored by Dhananjay Nakrani<dhananjayn@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [part 1] Add support for int32 & int64 in RandomPoissonOp.
    
    This computes int32/int64-precision poisson samples with double precision intermediate calculations (same as it's done for `half`) respectively.
    
    part 2 will switch over python calls to new op once forward compatibility period has passed.
    
    PiperOrigin-RevId: 171058336
    
    ---
    Commit 70fc9bf9b authored by Asim Shankar<ashankar@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Java: Add support for loading op libraries dynamically.
    
    This change adds the equivalent of tf.load_op_library in Python to Java.
    (https://github.com/tensorflow/tensorflow/commit/5c7f9e316d8c7735308a217310350d416d7498cc
     was required to make this possible)
    
    Though, TensorFlow.loadLibrary() is likely to fail on Windows as symbols
    required by custom op libraries (those exported by the tensorflow_framework library)
    are not exported by the monolithic JNI library yet.
    
    This should help with #10454 and #13476
    
    PiperOrigin-RevId: 171054707
    
    ---
    Commit e7c53698e authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Internal cleanup
    
    PiperOrigin-RevId: 171053770
    
    ---
    Commit cc8ee6c0f authored by Alexandre Passos<apassos@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fast path for tf.conj when it should be pass-through.
    
    PiperOrigin-RevId: 171053662
    
    ---
    Commit c41dbc3c1 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Adding TF Boosted trees regression example on boston dataset, minor fix for mnist example.
    
    PiperOrigin-RevId: 171052367
    
    ---
    Commit d66e77f7c authored by Mustafa Ispir<ispir@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Added get variable utils to tf.estimator.Estimator.
    
    PiperOrigin-RevId: 171052121
    
    ---
    Commit 083bd5dde authored by Asim Shankar<ashankar@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Java: Add support for loading op libraries dynamically.
    
    This change adds the equivalent of tf.load_op_library in Python to Java.
    (https://github.com/tensorflow/tensorflow/commit/5c7f9e316d8c7735308a217310350d416d7498cc
     was required to make this possible)
    
    Though, TensorFlow.loadLibrary() is likely to fail on Windows as symbols
    required by custom op libraries (those exported by the tensorflow_framework library)
    are not exported by the monolithic JNI library yet.
    
    This should help with #10454 and #13476
    
    PiperOrigin-RevId: 171054707
    
    ---
    Commit 2fe6cf285 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Internal cleanup
    
    PiperOrigin-RevId: 171053770
    
    ---
    Commit 15155493b authored by Alexandre Passos<apassos@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fast path for tf.conj when it should be pass-through.
    
    PiperOrigin-RevId: 171053662
    
    ---
    Commit 6c954d0b3 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Adding TF Boosted trees regression example on boston dataset, minor fix for mnist example.
    
    PiperOrigin-RevId: 171052367
    
    ---
    Commit ad69076eb authored by Mustafa Ispir<ispir@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Added get variable utils to tf.estimator.Estimator.
    
    PiperOrigin-RevId: 171052121
    
    ---
    Commit 3cf41b2ed authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Test save/restore variable from graph_callable.
    
    PiperOrigin-RevId: 171051237
    
    ---
    Commit cf17ec96e authored by Yangzihao Wang<yangzihao@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add V2 versions of output window size computation functions for convolution.
    These V2 versions take arbitrary dilation rates.
    In preparation for the support of native cudnn dilated convolution.
    
    PiperOrigin-RevId: 171048878
    
    ---
    Commit 491584ff4 authored by Asim Shankar<ashankar@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    eager: Always run dataset iterator operations on CPU.
    
    It has no kernels for other devices.
    With an explicit "tf.device()" before invoking the kernel we ensure
    that Iterator.next() functions even when placed inside a:
    
    with tf.device("/device:GPU:0")
    
    PiperOrigin-RevId: 171048558
    
    ---
    Commit 3b354016e authored by Igor Saprykin<isaprykin@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Rename SavedModelExporter to LatestExporter.
    
    PiperOrigin-RevId: 171048345
    
    ---
    Commit 943c6d7af authored by Jianwei Xie<xiejw@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    errors out if the evaluator has task id > 0.
    
    PiperOrigin-RevId: 171047652
    
    ---
    Commit 8c9ef4466 authored by Mark Heffernan<meheff@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Expand set of 64-bit type tests in LocalClientExecuteTest.ShapeBufferToLiteralConversion64bit and factor out into their own test.
    
    PiperOrigin-RevId: 171043047
    
    ---
    Commit cc521eb06 authored by Benoit Steiner<bsteiner@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Place all the nodes created by the trivial_test_graph_input_yielder
    
    PiperOrigin-RevId: 171045878
    
    ---
    Commit 9b9301240 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [XLA:CPU] Factor out parallel task assignment from cpu parallelization prep (no functional changes).
    
    PiperOrigin-RevId: 171045137
    
    ---
    Commit 558d878d9 authored by Allen Lavoie<allenl@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    TFTS: Move normalization to the base class, start using it for state space models
    
    Preivously, state space models adjusted their priors based on the data
    (e.g. setting initial variances to match sample variance) but did not normalize
    the data itself. When the data has a rather extreme scale, this runs into
    precision issues. After this CL, state space models will first normalize, then
    use adjusted statistics on top of that normalization to estimate initial
    observation/transition noise.
    
    Also fixes an issue where start-of-series statistics were incorrect for the first
    batch (which only shows up with large input scales).
    
    PiperOrigin-RevId: 171044863
    
    ---
    Commit 266f77156 authored by Mark Heffernan<meheff@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Expand set of 64-bit type tests in LocalClientExecuteTest.ShapeBufferToLiteralConversion64bit and factor out into their own test.
    
    PiperOrigin-RevId: 171043047
    
    ---
    Commit c9915d1a2 authored by Shanqing Cai<cais@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [tf-signal] Fix pip tests by including test_util in signal_py
    
    PiperOrigin-RevId: 171042732
    
    ---
    Commit f8550f4e9 authored by Mark Heffernan<meheff@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Expand set of 64-bit type tests in LocalClientExecuteTest.ShapeBufferToLiteralConversion64bit and factor out into their own test.
    
    PiperOrigin-RevId: 171043047
    
    ---
    Commit 87dc532cd authored by Shanqing Cai<cais@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [tf-signal] Fix pip tests by including test_util in signal_py
    
    PiperOrigin-RevId: 171042732
    
    ---
    Commit 0578dd65e authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add more debugging output for XLA send/recv.
    
    PiperOrigin-RevId: 171041978
    
    ---
    Commit 23992bb09 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Several minor documentation fixes.
    
    PiperOrigin-RevId: 171038610
    
    ---
    Commit af14ed3f3 authored by Jianwei Xie<xiejw@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Some docstring twists and argument validations.
    
    PiperOrigin-RevId: 171037949
    
    ---
    Commit 6b90a65f6 authored by Mark Heffernan<meheff@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Remove "hybrid" HloModuleConfig option. The option was used to generate executables which only generated the array values of tuple-shaped outputs, not the tuple index tables.. With cl/170133015, ShapedBuffers which hold the computation output now have materialized tuples with these index tables so this option is no longer desired or necessary.
    
    No functional change. Just cleanup.
    
    PiperOrigin-RevId: 171035738
    
    ---
    Commit 41a0264ab authored by Mustafa Ispir<ispir@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Added utilities to make global step reading deterministic. Used them in Estimator.
    Enabled/Fixed some tests.
    
    PiperOrigin-RevId: 171035291
    
    ---
    Commit 9d7843c0a authored by Skye Wanderman-Milne<skyewm@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add optional unused_input_map_keys output param to ImportGraphDef
    
    This is a more general feature than that in the Python importer, which
    raises an exception if the input map contains unused names.
    
    PiperOrigin-RevId: 171029316
    
    ---
    Commit 4f10a6597 authored by Mark Heffernan<meheff@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add vlogging of HloModule before and after fusion.
    
    PiperOrigin-RevId: 171029054
    
    ---
    Commit 9e658545a authored by Reed Wanderman-Milne<reedwm@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Document what dtype tf.image.resize_images returns.
    
    For consistency, tf.image.resize_images now will always return a float32 when method != ResizeMethod.NEAREST_NEIGHBOR. Before, it returned the same dtype as its input if it could be determined statically that the height and width would not be changed.
    
    PiperOrigin-RevId: 171028825
    
    ---
    Commit 4d70239f0 authored by Jianwei Xie<xiejw@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Replace the contrib FC with core FC  in canned Estimator docstring.
    
    PiperOrigin-RevId: 171027602
    
    ---
    Commit 6a1b867ff authored by Jianwei Xie<xiejw@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Adds the docstring with details for tf.estimator.train_and_evaluate
    
    PiperOrigin-RevId: 171027527
    
    ---
    Commit 7209c1602 authored by Peter Hawkins<phawkins@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [TF:XLA] Mark IdentityN as CompilationOnly().
    
    PiperOrigin-RevId: 171025171
    
    ---
    Commit 8e22eb874 authored by FAIJUL<md.faijul.amin@intel.com>
    Committed by Benoit Steiner<benoitsteiner@users.noreply.github.com>:
    Eigen BiasAdd and BiasAddGrad Fix for NCHW Format. (#13158)
    
    ---
    Commit 7db7a890c authored by Jingyue Wu<jingyue@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [Grappler] Move InferOutputShapes to GraphProperties.
    
    So it can be used by other optimizers. No functional changes.
    
    PiperOrigin-RevId: 171010106
    
    ---
    Commit 2114fd51e authored by Peter Hawkins<phawkins@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [TF:XLA] Improve numerical stability of SoftPlus.
    
    PiperOrigin-RevId: 171003559
    
    ---
    Commit 727d6270f authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fix race condition in TensorForest tree traversal.
    
    PiperOrigin-RevId: 170990425
    
    ---
    Commit d016cb020 authored by Suharsh Sivakumar<suharshs@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fix c++ gradients issue where multiple dependent outputs result in incorrect answer.
    
    The issue is that we incorrectly calculate the pending num_expected_backprops for outputs nodes when one output transitively depends on another. this is because we use output nodes as an indicator of when we need to end our traversal. Instead we should only use output nodes that don't transitively get consumed by other output nodes as end indicators for our traversal. This change implements that fix.
    
    Fixes #13190
    
    PiperOrigin-RevId: 170971937
    
    ---
    Commit 5405f3bd7 authored by gunan<gunan@google.com>
    Committed by Frank Chen<frankchn@gmail.com>:
    Fix tf-signal tests on pip packages. (#13483)
    
    ---
    Commit f9f037c1c authored by Eugene Brevdo<ebrevdo@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Bugfix to LSTMBlockCell and friends: clipping is off by default.
    
    * Rename broken API argu clip_cell boolean to cell_clip value.
    * Make default no clipping.
    
    PiperOrigin-RevId: 170960975
    
    ---
    Commit bfaaefa9e authored by Frank Chen<frankchn@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Update APIs for TPU Cluster Resolver to remove the custom API definition and instead use a standard definition file stored in GCS.
    
    PiperOrigin-RevId: 170960877
    
    ---
    Commit c31c118a3 authored by Ian Langmore<langmore@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Extend tf.contrib.bijector API to handle some non-injective transforms.
    AbsoluteValue Bijector added to contrib/distributions/bijectors/
    TransformedDistribution udpated to handle some non-injective transforms.
    
    PiperOrigin-RevId: 170960054
    
    ---
    Commit 664dd0859 authored by Frank Chen<frankchn@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Disable cluster_function_library_runtime_test on Mac OS as it is currently failing with an Unimplemented error
    
    PiperOrigin-RevId: 170958505
    
    ---
    Commit 6af7ab97a authored by Mahmoud Abuzaina<mahmoud.abuzaina@intel.com>
    Committed by gunan<gunan@google.com>:
    MKL-DNN open source integration. (#13135)
    
    * MKL-DNN conv and build integration
    
    * Adding new files that were mistakenly missing from the PR
    
    * Minor change in the pip package build file
    
    * Added missing #include
    
    * Fixed a linking failure when running the bazel test
    
    * Fixing BUILD file format
    
    * Using -fopenmp for building mkl_dnn only when running on linux
    
    * Fixing build rule attribute value
    
    * Removing unnecessary deps from mkl test rule
    
    * Removed deps on mkl-dnn when not building with --config=mkl
    
    ---
    Commit 93fa1af76 authored by Akshay Agrawal<akshayka@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Make graph_callable, defun tf_decorators
    
    PiperOrigin-RevId: 170948777
    
    ---
    Commit b39525785 authored by Mustafa Ispir<ispir@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Added comment re:behavior of listener in case of multiple saver hooks.
    
    PiperOrigin-RevId: 170946536
    
    ---
    Commit de14fcbb6 authored by Igor Saprykin<isaprykin@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Support evaluation in `_TrainingExecutor.run_master()`.
    
    This CL aims to address the following TODO:
    
        # TODO(b/66720832): Once listener API is added into Estimator.train, the
        # eval and export process should be wrapped as a listener and passed to
        # _start_distributed_training. The expected behavior should be
        # 1. The export is invoked after each intermediate evaluation.
        # 2. The evaluation and export should be invoked correctly at the end of
        # training. This should be fine if the listener works as intended (it will
        # send the `after_save` signal for the final ckpt saving).
    
    1. is achieved as follows:
      a. saving_evaluators are added to the CheckpointSaverHook's listeners inside the Estimator.
      b. MonitoredSession calls after_run() of CheckpointSaverHook, which in turn calls after_save on the listeners.
    
    2. is achieved in a similar way, but when MonitoredSession calls .end() on CheckpointSaverHook.
    
    PiperOrigin-RevId: 170945961
    
    ---
    Commit d4ea993ca authored by Alexandre Passos<apassos@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Removes unnecessary eager-mode call to convert_to_tensor in record_gradient.
    
    PiperOrigin-RevId: 170944265
    
    ---
    Commit add6d2d03 authored by RJ Ryan<rjryan@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [tf-signal] Use tf.spectral.dct in mfccs_from_log_mel_spectrograms instead of a private implementation.
    
    PiperOrigin-RevId: 170943986
    
    ---
    Commit b959da92f authored by Jiri Simsa<jsimsa@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fixing CPU implementation of parallel_stack for tensors with non-zero rank.
    
    PiperOrigin-RevId: 170942814
    
    ---
    Commit 4cf61262a authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Improve TFGAN documentation.
    
    PiperOrigin-RevId: 170940188
    
    ---
    Commit 0068086b9 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Introduce `tf.data` namespace.
    
    PiperOrigin-RevId: 170939033
    
    ---
    Commit 0c8dbc1fd authored by Alexandre Passos<apassos@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    matmul uses shape_tuple internally
    
    PiperOrigin-RevId: 170938790
    
    ---
    Commit ad37fa81f authored by Igor Saprykin<isaprykin@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Refactor ExportStrategies into Exporters.
    
    This design eliminates some indirection.  Instead of combining an `export_fn` with `make_export_strategy` call to arrive at an ExportStrategy that is going to call the supplied `export_fn` inside its `export` call with Exporters one just defines the `export` call in an Exporter.
    
    PiperOrigin-RevId: 170936640
    
    ---
    Commit b925f8553 authored by Alexandre Passos<apassos@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fast-path for EagerTensorBase.dtype
    
    PiperOrigin-RevId: 170933005
    
    ---
    Commit 08e266d9b authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Pass activity_regularizer to __init__ instead of using the (now
    deprecated) property setter.
    
    PiperOrigin-RevId: 170932807
    
    ---
    Commit b002c8b7d authored by Jingyue Wu<jingyue@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [Grappler] Fold chains of reshapes.
    
    Reshape(Reshape(input, shape1), shape2) is equivalent to Reshape(input,
    shape2).
    
    PiperOrigin-RevId: 170932278
    
    ---
    Commit 075d1d13b authored by horance<horance@aliyun.com>
    Committed by Frank Chen<frankchn@gmail.com>:
    remove warning for forward decl (#13459)
    
    ---
    Commit 931609fcf authored by Ryohei Kuroki<ryohei.kuroki@gmail.com>
    Committed by Frank Chen<frankchn@gmail.com>:
    Remove unnecessary specification for default kernel name (#13465)
    
    ---
    Commit 94463f521 authored by Akshay Agrawal<akshayka@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Preserve target function signature in custom_gradient decorator
    
    PiperOrigin-RevId: 170931715
    
    ---
    Commit 681056636 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Internal change to simplify prediction ops.
     - it no longer returns predictions_no_dropout, which is mostly for debugging purpose.
     - as a consequence, MultipleAdditiveTrees::Predict() doesn't return prediction_no_dropout, and it accept trees_to_include indexes intead of trees_to_drop indexes.
    
    PiperOrigin-RevId: 170926422
    
    ---
    Commit d6e963b82 authored by Asim Shankar<ashankar@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    SYCL: Fix build breakage introduced in
    https://github.com/tensorflow/tensorflow/commit/f0e8c545e0196b8b48ce0ad0f116df97d980d1f1
    
    Fixes #13350
    
    PiperOrigin-RevId: 170923862
    
    ---
    Commit 5123f2971 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Internal cleanup.
    
    PiperOrigin-RevId: 170922297
    
    ---
    Commit d0c76cd18 authored by Igor Saprykin<isaprykin@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Handle the absence of a fresh eval checkpoint in `run_local`.
    
    It is ~unexpected condition for an eval checkpoint to not be available after a train call to the estimator.  There is a corner case when it is possible, but that's going to be resolved soon.
    
    This case is handled for continuous (distributed) evaluation differently.  Instead of erroring out, we skip evaluation runs.  That behavior is captured in the `test_skip_evaluation_due_to_ckpt` test.
    
    PiperOrigin-RevId: 170919925
    
    ---
    Commit 435b31b9f authored by Gunhan Gulsoy<gunan@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    BEGIN_PUBLIC
    Automated g4 rollback of changelist 170892257
    
    PiperOrigin-RevId: 171321707

commit 9d7843c0a87dba001bf1dae65cf82b794d983d1c
Author: Skye Wanderman-Milne <skyewm@google.com>
Date:   Wed Oct 4 10:40:04 2017 -0700

    Add optional unused_input_map_keys output param to ImportGraphDef
    
    This is a more general feature than that in the Python importer, which
    raises an exception if the input map contains unused names.
    
    PiperOrigin-RevId: 171029316

commit ac6ee67af055edc75af16fd91b3ce72c0f19a79a
Author: Pavel Christof <pawel834@gmail.com>
Date:   Tue Oct 3 01:02:23 2017 +0200

    Initialize fetchTensors to fix NullPointerException (#13425)
    
    closeFetches() needs fetchTensors to not be null. fetchTensors is initialized by run() and the first thing run() does is call closeFetches().

commit a470779865883706dc2db1dcd8bd386527e1df03
Author: Eugene Brevdo <ebrevdo@google.com>
Date:   Mon Oct 2 14:57:50 2017 -0700

    TF WhereOp now acts more like np.where: extend input types to any numeric type.
    
    (with the exception of tf.half).
    
    This allows one to call:
      tf.where(float_tensor)
    instead of
      tf.where(tf.not_equal(float_tensor, 0))
    
    or
      tf.where(complex_tensor)
    instead of
      tf.where(tf.not_equal(tf.abs(complex_tensor), 0))
    
    PiperOrigin-RevId: 170758184

commit d3d60ff6acec178b1cf912938aa6180bbd1a676f
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Thu Sep 28 11:01:20 2017 -0700

    Merge changes from github.
    END_PUBLIC
    
    ---
    Commit 301b14c24 authored by Skye Wanderman-Milne<skyewm@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Basic while loop gradient functionality in C++
    
    This change introduces the basic framework to create the gradient
    graph of a while loop using the C++ API. This supports building the
    gradient graph as long as the body function of the while loop contains
    no ops whose gradient function requires a stack. In other words, it
    doesn't support gradient functions that use the input values to the op
    (e.g. add will work, but multiply will not). It also doesn't support
    nested while loops, and doesn't detect all error cases.
    
    PiperOrigin-RevId: 170243281
    
    ---
    Commit 545e3572f authored by Asim Shankar<ashankar@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Datasets: Reference the programmer's guide in API docs.
    
    PiperOrigin-RevId: 170241348
    
    ---
    Commit 24890d550 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Go: Update generated wrapper functions for TensorFlow ops.
    
    PiperOrigin-RevId: 170241322
    
    ---
    Commit 02d2f3760 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Update ops-related pbtxt files.
    
    PiperOrigin-RevId: 170240603
    
    ---
    Commit 759690f02 authored by Reed Wanderman-Milne<reedwm@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add float16 support to tf.nn.fused_batch_norm on the GPU.
    
    Scale, offset, mean, and variance must still be float32 if the input is float16.
    
    PiperOrigin-RevId: 170239448
    
    ---
    Commit 20370104c authored by Igor Saprykin<isaprykin@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Support export strategies in _TrainingExecutor.
    
    One could set export strategies to the EvalSpec.  An exception is raised if the type isn't export_strategy.ExportStrategy.  During continuous evaluation, export strategies are going to be triggered. They in turn call Estimator's export_savedmodel.
    
    PiperOrigin-RevId: 170237073
    
    ---
    Commit 56402103e authored by Reed Wanderman-Milne<reedwm@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fix BFC allocator's log messages on OOM error.
    
    Before, the "Chunks in use" message and other in-use messages would always be 0.
    
    PiperOrigin-RevId: 170233715
    
    ---
    Commit bc80e46b1 authored by Peter Hawkins<phawkins@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [TF:XLA] Implement BroadcastArgs.
    
    PiperOrigin-RevId: 170228025
    
    ---
    Commit bced6676e authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    BEGIN_PUBLIC
    Automated g4 rollback of changelist 170204652
    
    PiperOrigin-RevId: 170367641

commit 20370104cd8adf4c3f9068dfe95bde54cccadfa5
Author: Igor Saprykin <isaprykin@google.com>
Date:   Wed Sep 27 12:38:35 2017 -0700

    Support export strategies in _TrainingExecutor.
    
    One could set export strategies to the EvalSpec.  An exception is raised if the type isn't export_strategy.ExportStrategy.  During continuous evaluation, export strategies are going to be triggered. They in turn call Estimator's export_savedmodel.
    
    PiperOrigin-RevId: 170237073

commit 3a38f48a32f1190520b3647d99752c1d805ffb42
Author: Yao Zhang <yaozhang@google.com>
Date:   Thu Sep 21 21:42:52 2017 -0700

    Fix memory leak if a node evaluation fails due to a divide by zero exception.
    
    PiperOrigin-RevId: 169644909

commit 381357f05fa785d49fa9d5ef21d0ad67b538e531
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Sun Sep 17 23:08:08 2017 -0700

    Create PyRaiseException() with common code to convert from a C string
    to Python exception.
    
    PiperOrigin-RevId: 169046301

commit f46f3f386a9a3ae6721cda3b1aa27fbdb96b84f5
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Sun Sep 17 11:26:12 2017 -0700

    Cleaner exception traces in Python 3 when eager execution triggers an error.
    
    PiperOrigin-RevId: 169015227

commit 088a880ad6adb4445643f5f5ebaeda32d5c2b1f6
Author: resec <resec0109@gmail.com>
Date:   Fri Sep 8 13:04:40 2017 -0500

    Safely read content from InputStream (#12643)
    
    * Safely read content from InputStream
    
    Changed to use `ByteArrayOutputStream` on converting `InputStream` into `byte[]`, instead of relying on `InputStream. available()`.
    
    * Bigger initial buffer size to avoid some copying
    
    * construct byte[] in individual's preference
    
    * fix io exception not caught

commit f8da4742553f401231b15fa145c208f0bf184599
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Thu Sep 7 09:20:48 2017 -0700

    Merge changes from github.
    END_PUBLIC
    
    ---
    Commit 18f369271 authored by Yifei Feng<fengyifei2026@gmail.com>
    Committed by gunan<gunan@google.com>:
    Branch 167812735 (#12867)
    
    * Internal cleanup
    
    PiperOrigin-RevId: 167636242
    
    * Move the Keras API to tf.keras.
    
    PiperOrigin-RevId: 167638421
    
    * Automated g4 rollback of changelist 167604306
    
    PiperOrigin-RevId: 167639833
    
    * Call HloComputation.Accept instead of HloInstruction.Accept to get all instructions profiled.
    
    RELNOTES: n/a
    PiperOrigin-RevId: 167640259
    
    * Add fast math attributes to all generated methods when fast math enabled.
    
    RELNOTES: n/a
    PiperOrigin-RevId: 167646637
    
    * Extended ScratchSpace to expose its underlying scratch tensor object.
    
    PiperOrigin-RevId: 167649551
    
    * Change zip(...)[1] to list(zip(...))[1], for python 3 compatibility.
    
    PiperOrigin-RevId: 167654035
    
    * Add scoped timer to log jit compile times.
    
    RELNOTES: n/a
    PiperOrigin-RevId: 167656720
    
    * Verify that predictions are in the expected range for ops that use thresholds, e.g. tf.contrib.metrics.streaming_auc.
    
    PiperOrigin-RevId: 167658134
    
    * Internal change.
    
    PiperOrigin-RevId: 167658401
    
    * Fix list formatting
    
    PiperOrigin-RevId: 167660250
    
    * Enable java test.
    
    PiperOrigin-RevId: 167660276
    
    * Add shape functions on debug ops.
    
    PiperOrigin-RevId: 167668811
    
    * Increase session_bundle_test to a medium test.
    
    PiperOrigin-RevId: 167672587
    
    * Include layout of convolution input data in the op_profile.
    
    PiperOrigin-RevId: 167680208
    
    * Fix tf.sparse_add for SparseTensor with _ref typed values.
    
    Example:
    st = tf.SparseTensor(
        indices=[[1]], values=tf.Variable([1.0]), dense_shape=[1])
    tf.sparse_add(st, st)
    PiperOrigin-RevId: 167681121
    
    * Fix conversion to explicit scalar broadcast
    
    The dimensions field of a broadcast HLO op is meant to be populated with the
    dimensions that are broadcasted, which in case of a scalar is the empty vector.
    Generally, the rank of the operand of a broadcast op should always equal the
    size of the dimensions vector.
    
    PiperOrigin-RevId: 167686946
    
    * Add 'unknown shape' shape functions on deprecated linalg ops.
    
    PiperOrigin-RevId: 167719029
    
    * Be more careful in IsInitalized, and log when it is called on an unknown
    node_id.
    
    PiperOrigin-RevId: 167722344
    
    * tfdbg: Refactor graph-processing code out of debug_data.py
    
    The basic idea is to separate the code in debug_data.py that handles graph structures into its own module (debug_graphs.py). This tackles an existing TODO item to simplify the code debug_data.DebugDumpDir.
    
    In a later CL, code will be added to debug_graphs.DebugGraph to allow reconstruction of the original GraphDef, i.e., the GraphDef without the Copy* and Debug* nodes inserted by tfdbg. This will be useful for, among other things, the TensorBoard Debugger Plugin.
    
    PiperOrigin-RevId: 167726113
    
    * internal
    
    PiperOrigin-RevId: 167727508
    
    * Update MaxPoolV2Shape to support NCHV_VECT_C.
    
    PiperOrigin-RevId: 167732437
    
    * Deleting tf.contrib.learn.dnn benchmark tests.
    
    PiperOrigin-RevId: 167741308
    
    * Fix off-by-one documentation error.
    
    sequence_lengths is the actual length of the sequence and therefor should not be used as zero-based indexing.
    The code is correct but the documentation was misleading.
    
    PiperOrigin-RevId: 167742082
    
    * contrib summaries work in eager-graph mode (with defun)
    
    As a side effect fix issues related to using eager-defined variables in graph
    mode.
    
    PiperOrigin-RevId: 167744121
    
    * Fix minor documentation error in ZlibInputStream.
    
    PiperOrigin-RevId: 167745218
    
    * Sets the distributed training related properties of RunConfig based on TF_CONFIG.
    
    PiperOrigin-RevId: 167752997
    
    * Improved documentation about eval ops in EstimatorSpec.
    
    PiperOrigin-RevId: 167753099
    
    * Automated g4 rollback of changelist 156748870
    
    PiperOrigin-RevId: 167753805
    
    * Make cuda_solvers_gpu.cu.cc compile with nvcc8.
    
    PiperOrigin-RevId: 167754383
    
    * Add csv dataset example to get_started/regression.
    
    PiperOrigin-RevId: 167754634
    
    * Switches to OrderedDict to make the dictionary order deterministic so we have less randomness from graph building.
    
    PiperOrigin-RevId: 167755072
    
    * Add int8 version of fused_conv2d_bias_activation operator for the forward phase,
    and support side_input and scaling parameters in float and int8 versions.
    
    PiperOrigin-RevId: 167763219
    
    * Make the text summary write no plugin data content
    
    This is actually a safe removal because no logic makes use of the content of text plugin data.
    
    PiperOrigin-RevId: 167763880
    
    * Avoid unnecessary buffer allocations & deallocations
    
    Before this change, when we reached the end of a file, we would
     (1) clear the existing buffer (which at large buffer sizes typically involved
         deallocating it).
     (2) reserve a buffer (which at large buffer sizes is non-trivial)
     (3) realize we had reached EoF, and therefore clear the buffer, deallocating
         it again.
    
    With this change, whenever the buffered reader detects an EoF condition, we
    remember it, so that we can short-circuit the above logic.
    
    The above optimization results in a more than 25x performance improvement for
    large buffers reading small files.
    
    PiperOrigin-RevId: 167766751
    
    * [TF:XLA] In Literal: correctly handle operands with zero elements in
    Copy.
    
    PiperOrigin-RevId: 167769308
    
    * Reduce batch size for resampler backward pass test, to speed up test.
    
    PiperOrigin-RevId: 167769539
    
    * Remove `SimpleGraphExecutionState::costs_`, which is unused.
    
    PiperOrigin-RevId: 167772120
    
    * detecting cycles when users add a control edge to a graph
    
    PiperOrigin-RevId: 167773598
    
    * Make writer_test avoid setting content to a string
    
    That content field of the PluginData proto is going to be converted into a bytes field, and setting it to a string makes the test fail. Furthermore, the purpose of this test is to make sure that correct data is written, so setting the name of the plugin suffices.
    
    PiperOrigin-RevId: 167776457
    
    * Propagate the original stack trace when exceptions caught be MonitoredSession
    are re-raised.
    
    PiperOrigin-RevId: 167781071
    
    * Change trace.py to not access a graph as a default argument.
    
    Checks for None and access via default graph inside the function.
    
    PiperOrigin-RevId: 167788815
    
    * Added custom metric support for tf.estimator.Estimator.
    
    PiperOrigin-RevId: 167788891
    
    * A eager Saver that allows restore on create.
    
    PiperOrigin-RevId: 167789332
    
    * Make content field of PluginData a bytes field
    
    The content field had previously been a string field, which had been problematic because
    string fields can only store UTF-8 strings.
    
    This problem can manifest in various ways. For instance, take the precision-recall curve plugin. Its summary collects data that scales in size based on the number of thresholds. When the content field is a string, the summary logic serializes the relevant data proto just fine when we only have a few thresholds (about 100). However, for large numbers of thresholds (ie, around 200), the summary logic fails to serialize and throws a cryptic error.
    
    ValueError: '\x10\xc8\x01' has type str, but isn't valid UTF-8 encoding. Non-UTF-8 strings must be converted to unicode objects before being added.
    
    Changing the content field to a bytes field fixes this issue because bytes fields are not restricted to UTF-8 strings. I just happened to have needed a long enough string for the string to no longer be a valid UTF-8 one.
    
    PiperOrigin-RevId: 167790594
    
    * Temporarily disable tf_should_use wrapper, since it can cause
    python Graph/Operation/Tensor memory leaks.
    
    PiperOrigin-RevId: 167790657
    
    * Ensure using "path" as a URI will keep working.
    
    PiperOrigin-RevId: 167793848
    
    * Fix typo in graph transforms error message
    
    PiperOrigin-RevId: 167796563
    
    * Merge changes from github.
    END_PUBLIC
    
    ---
    Commit 607816029 authored by Eugene Brevdo<ebrevdo@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Extended ScratchSpace to expose its underlying scratch tensor object.
    
    PiperOrigin-RevId: 167649551
    
    ---
    Commit db43fe68e authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add fast math attributes to all generated methods when fast math enabled.
    
    RELNOTES: n/a
    PiperOrigin-RevId: 167646637
    
    ---
    Commit aebe8cc6f authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Call HloComputation.Accept instead of HloInstruction.Accept to get all instructions profiled.
    
    RELNOTES: n/a
    PiperOrigin-RevId: 167640259
    
    ---
    Commit 0ab137cd8 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    BEGIN_PUBLIC
    BEGIN_PUBLIC
    Automated g4 rollback of changelist 167604306
    
    PiperOrigin-RevId: 167868631

commit 18f36927160d05b941c056f10dc7f9aecaa05e23
Author: Yifei Feng <fengyifei2026@gmail.com>
Date:   Wed Sep 6 23:52:56 2017 -0700

    Branch 167812735 (#12867)
    
    * Internal cleanup
    
    PiperOrigin-RevId: 167636242
    
    * Move the Keras API to tf.keras.
    
    PiperOrigin-RevId: 167638421
    
    * Automated g4 rollback of changelist 167604306
    
    PiperOrigin-RevId: 167639833
    
    * Call HloComputation.Accept instead of HloInstruction.Accept to get all instructions profiled.
    
    RELNOTES: n/a
    PiperOrigin-RevId: 167640259
    
    * Add fast math attributes to all generated methods when fast math enabled.
    
    RELNOTES: n/a
    PiperOrigin-RevId: 167646637
    
    * Extended ScratchSpace to expose its underlying scratch tensor object.
    
    PiperOrigin-RevId: 167649551
    
    * Change zip(...)[1] to list(zip(...))[1], for python 3 compatibility.
    
    PiperOrigin-RevId: 167654035
    
    * Add scoped timer to log jit compile times.
    
    RELNOTES: n/a
    PiperOrigin-RevId: 167656720
    
    * Verify that predictions are in the expected range for ops that use thresholds, e.g. tf.contrib.metrics.streaming_auc.
    
    PiperOrigin-RevId: 167658134
    
    * Internal change.
    
    PiperOrigin-RevId: 167658401
    
    * Fix list formatting
    
    PiperOrigin-RevId: 167660250
    
    * Enable java test.
    
    PiperOrigin-RevId: 167660276
    
    * Add shape functions on debug ops.
    
    PiperOrigin-RevId: 167668811
    
    * Increase session_bundle_test to a medium test.
    
    PiperOrigin-RevId: 167672587
    
    * Include layout of convolution input data in the op_profile.
    
    PiperOrigin-RevId: 167680208
    
    * Fix tf.sparse_add for SparseTensor with _ref typed values.
    
    Example:
    st = tf.SparseTensor(
        indices=[[1]], values=tf.Variable([1.0]), dense_shape=[1])
    tf.sparse_add(st, st)
    PiperOrigin-RevId: 167681121
    
    * Fix conversion to explicit scalar broadcast
    
    The dimensions field of a broadcast HLO op is meant to be populated with the
    dimensions that are broadcasted, which in case of a scalar is the empty vector.
    Generally, the rank of the operand of a broadcast op should always equal the
    size of the dimensions vector.
    
    PiperOrigin-RevId: 167686946
    
    * Add 'unknown shape' shape functions on deprecated linalg ops.
    
    PiperOrigin-RevId: 167719029
    
    * Be more careful in IsInitalized, and log when it is called on an unknown
    node_id.
    
    PiperOrigin-RevId: 167722344
    
    * tfdbg: Refactor graph-processing code out of debug_data.py
    
    The basic idea is to separate the code in debug_data.py that handles graph structures into its own module (debug_graphs.py). This tackles an existing TODO item to simplify the code debug_data.DebugDumpDir.
    
    In a later CL, code will be added to debug_graphs.DebugGraph to allow reconstruction of the original GraphDef, i.e., the GraphDef without the Copy* and Debug* nodes inserted by tfdbg. This will be useful for, among other things, the TensorBoard Debugger Plugin.
    
    PiperOrigin-RevId: 167726113
    
    * internal
    
    PiperOrigin-RevId: 167727508
    
    * Update MaxPoolV2Shape to support NCHV_VECT_C.
    
    PiperOrigin-RevId: 167732437
    
    * Deleting tf.contrib.learn.dnn benchmark tests.
    
    PiperOrigin-RevId: 167741308
    
    * Fix off-by-one documentation error.
    
    sequence_lengths is the actual length of the sequence and therefor should not be used as zero-based indexing.
    The code is correct but the documentation was misleading.
    
    PiperOrigin-RevId: 167742082
    
    * contrib summaries work in eager-graph mode (with defun)
    
    As a side effect fix issues related to using eager-defined variables in graph
    mode.
    
    PiperOrigin-RevId: 167744121
    
    * Fix minor documentation error in ZlibInputStream.
    
    PiperOrigin-RevId: 167745218
    
    * Sets the distributed training related properties of RunConfig based on TF_CONFIG.
    
    PiperOrigin-RevId: 167752997
    
    * Improved documentation about eval ops in EstimatorSpec.
    
    PiperOrigin-RevId: 167753099
    
    * Automated g4 rollback of changelist 156748870
    
    PiperOrigin-RevId: 167753805
    
    * Make cuda_solvers_gpu.cu.cc compile with nvcc8.
    
    PiperOrigin-RevId: 167754383
    
    * Add csv dataset example to get_started/regression.
    
    PiperOrigin-RevId: 167754634
    
    * Switches to OrderedDict to make the dictionary order deterministic so we have less randomness from graph building.
    
    PiperOrigin-RevId: 167755072
    
    * Add int8 version of fused_conv2d_bias_activation operator for the forward phase,
    and support side_input and scaling parameters in float and int8 versions.
    
    PiperOrigin-RevId: 167763219
    
    * Make the text summary write no plugin data content
    
    This is actually a safe removal because no logic makes use of the content of text plugin data.
    
    PiperOrigin-RevId: 167763880
    
    * Avoid unnecessary buffer allocations & deallocations
    
    Before this change, when we reached the end of a file, we would
     (1) clear the existing buffer (which at large buffer sizes typically involved
         deallocating it).
     (2) reserve a buffer (which at large buffer sizes is non-trivial)
     (3) realize we had reached EoF, and therefore clear the buffer, deallocating
         it again.
    
    With this change, whenever the buffered reader detects an EoF condition, we
    remember it, so that we can short-circuit the above logic.
    
    The above optimization results in a more than 25x performance improvement for
    large buffers reading small files.
    
    PiperOrigin-RevId: 167766751
    
    * [TF:XLA] In Literal: correctly handle operands with zero elements in
    Copy.
    
    PiperOrigin-RevId: 167769308
    
    * Reduce batch size for resampler backward pass test, to speed up test.
    
    PiperOrigin-RevId: 167769539
    
    * Remove `SimpleGraphExecutionState::costs_`, which is unused.
    
    PiperOrigin-RevId: 167772120
    
    * detecting cycles when users add a control edge to a graph
    
    PiperOrigin-RevId: 167773598
    
    * Make writer_test avoid setting content to a string
    
    That content field of the PluginData proto is going to be converted into a bytes field, and setting it to a string makes the test fail. Furthermore, the purpose of this test is to make sure that correct data is written, so setting the name of the plugin suffices.
    
    PiperOrigin-RevId: 167776457
    
    * Propagate the original stack trace when exceptions caught be MonitoredSession
    are re-raised.
    
    PiperOrigin-RevId: 167781071
    
    * Change trace.py to not access a graph as a default argument.
    
    Checks for None and access via default graph inside the function.
    
    PiperOrigin-RevId: 167788815
    
    * Added custom metric support for tf.estimator.Estimator.
    
    PiperOrigin-RevId: 167788891
    
    * A eager Saver that allows restore on create.
    
    PiperOrigin-RevId: 167789332
    
    * Make content field of PluginData a bytes field
    
    The content field had previously been a string field, which had been problematic because
    string fields can only store UTF-8 strings.
    
    This problem can manifest in various ways. For instance, take the precision-recall curve plugin. Its summary collects data that scales in size based on the number of thresholds. When the content field is a string, the summary logic serializes the relevant data proto just fine when we only have a few thresholds (about 100). However, for large numbers of thresholds (ie, around 200), the summary logic fails to serialize and throws a cryptic error.
    
    ValueError: '\x10\xc8\x01' has type str, but isn't valid UTF-8 encoding. Non-UTF-8 strings must be converted to unicode objects before being added.
    
    Changing the content field to a bytes field fixes this issue because bytes fields are not restricted to UTF-8 strings. I just happened to have needed a long enough string for the string to no longer be a valid UTF-8 one.
    
    PiperOrigin-RevId: 167790594
    
    * Temporarily disable tf_should_use wrapper, since it can cause
    python Graph/Operation/Tensor memory leaks.
    
    PiperOrigin-RevId: 167790657
    
    * Ensure using "path" as a URI will keep working.
    
    PiperOrigin-RevId: 167793848
    
    * Fix typo in graph transforms error message
    
    PiperOrigin-RevId: 167796563
    
    * Merge changes from github.
    END_PUBLIC
    
    ---
    Commit 607816029 authored by Eugene Brevdo<ebrevdo@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Extended ScratchSpace to expose its underlying scratch tensor object.
    
    PiperOrigin-RevId: 167649551
    
    ---
    Commit db43fe68e authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add fast math attributes to all generated methods when fast math enabled.
    
    RELNOTES: n/a
    PiperOrigin-RevId: 167646637
    
    ---
    Commit aebe8cc6f authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Call HloComputation.Accept instead of HloInstruction.Accept to get all instructions profiled.
    
    RELNOTES: n/a
    PiperOrigin-RevId: 167640259
    
    ---
    Commit 0ab137cd8 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    BEGIN_PUBLIC
    Automated g4 rollback of changelist 167604306
    
    PiperOrigin-RevId: 167800256
    
    * Update ops-related pbtxt files.
    
    PiperOrigin-RevId: 167802521
    
    * Go: Update generated wrapper functions for TensorFlow ops.
    
    PiperOrigin-RevId: 167804076
    
    * Add sloppy_interleave dataset operator.
    
    When feeding data at high speed into a model from variable-latency data
    sources, head-of-line blocking can be a significant concern when using a
    deterministic input pipeline, such as interleave.
    
    This change introduces a new non-deterministic dataset operator that avoids
    head-of-line blocking.
    
    PiperOrigin-RevId: 167810743
    
    * Update ops-related pbtxt files.
    
    PiperOrigin-RevId: 167811375
    
    * tfdbg: Fix python3 breakage in grpc debug tests caused by bytes-type plugin_data content
    
    PiperOrigin-RevId: 167812508
    
    * [XLA] Rip CheckFusionNode() out of instruction, and move it into the HLO verifier instead.
    
    CheckFusionNode() is linear in the size of the fusion node, and was called once per Fuse(), leading to run-time quadratic in the fusion node's size.
    
    PiperOrigin-RevId: 167812735
    
    * Disable
    tensorflow/contrib/data/python/kernel_tests/sloppy_transformation_dataset_op_test.py
    in cmake.

commit 713e36cedc4cefc9e6d33ed0a9aa76bfd8c78783
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Wed Sep 6 15:17:55 2017 -0700

    Propagate the original stack trace when exceptions caught be MonitoredSession
    are re-raised.
    
    PiperOrigin-RevId: 167781071

commit 2f531b54ce51fdb9fc2b055548e534a13624ea93
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Wed Aug 23 22:27:52 2017 -0700

    Fix the wrong format of some exception strings.
    
    PiperOrigin-RevId: 166300900

commit f5486654113e34995daa5c582e30770b46acf393
Author: Sergey Kolesnikov <scitator@gmail.com>
Date:   Thu Aug 17 00:22:54 2017 +0300

    Padding queue support for tf.estimator generator input pipeline (#10732)
    
    * add padding queues support for tf.estimator generator input pipeline
    
    * simplified version
    
    * now with six zip
    
    * add first docs and test
    
    * typos and code style fix
    
    * updated test: bug found
    
    * now with specified padding value
    
    * non numberic tests added
    
    * pylint
    
    * typo&!
    
    * still hate typos
    
    * additional exceptions
    
    * indentation fix
    
    * generator io updated for new feeding functions
    
    * test updated, numpy corrected
    
    * numpy error fix 2

commit 3a82208c0c0a1af2b40111b5c11c89775821a0d4
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Wed Aug 16 12:53:13 2017 -0700

    Resolving TODO: raising an exception if enable_centered_bias==True and optimizer is SDCA.
    
    PiperOrigin-RevId: 165481485

commit 9e6183e4acbb1b795069947faf778a47709d2029
Author: Yong Tang <yong.tang.github@outlook.com>
Date:   Tue Aug 15 11:18:41 2017 -0700

    Fix error caused in MonitoredSession.close() (#12229)
    
    * Fix error caused in MonitoredSession.close()
    
    This fix tries to address the error raised in 12224:
    ```
    >>> import tensorflow as tf
    >>> with tf.train.MonitoredTrainingSession() as sess:
    ...   sess.close()
    ...
    Traceback (most recent call last):
      File "<stdin>", line 2, in <module>
      File "/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/monitored_session.py", line 534, in __exit__
        self._close_internal(exception_type)
      File "/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/monitored_session.py", line 569, in _close_internal
        self._sess.close()
    AttributeError: 'NoneType' object has no attribute 'close'
    ```
    
    The error was caused by double call on `_internal_close()`.
    
    This fix fixes the issue.
    
    This fix fixes 12224
    
    Signed-off-by: Yong Tang <yong.tang.github@outlook.com>
    
    * Add a test case for in MonitoredSession.close() and with statement
    
    This test case covers 12224.
    
    Signed-off-by: Yong Tang <yong.tang.github@outlook.com>

commit ea8d4fd52ebba54672cfaf2e8b25205c877e7de7
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Wed Aug 2 14:13:36 2017 -0700

    Use SWIG_exception_fail instead of SWIG_fail
    
    SWIG_fail results in a mysterious
      "SystemError: error return without exception set"
    error message without any stack trace or other helpful info.
    SWIG_exception_fail provides much more context shortening
    debug time.
    
    PiperOrigin-RevId: 164036157

commit 57626dd38a7867b76c44f3933e7810190174a2ee
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Thu Aug 3 16:48:44 2017 -0700

    Allow specifying colocation constraints through TF_SetAttr*
    
    Before this change, colocation constraint semantics were not
    well-defined when they were set using TF_ColocateWith and
    TF_SetAttrStringList and/or TF_SetAttrValueProto. One could get
    an exception if multiple methods were used.
    
    After this change all changes to colocation attribute (i.e. _class)
    are executed on TF_OperationDescription.colocation_constraints leading
    to consistent semantics.
    
    PiperOrigin-RevId: 164202666

commit 09b9ce84fa7c7741eeb3b9203a802fd27492ad34
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Wed Aug 2 14:13:36 2017 -0700

    Use SWIG_exception_fail instead of SWIG_fail
    
    SWIG_fail results in a mysterious
      "SystemError: error return without exception set"
    error message without any stack trace or other helpful info.
    SWIG_exception_fail provides much more context shortening
    debug time.
    
    PiperOrigin-RevId: 164036157

commit 41803db36d4f4a3239bd81e5d460eb0e6e2eea88
Author: Shanqing Cai <cais@google.com>
Date:   Wed Jul 19 07:23:53 2017 -0700

    tfdbg: open-source C++ and Python libraries of gRPC debugger mode
    
    with the exception of Windows
    
    the session_debug_grpc_test is temporarily disabled on mac pending pip install of futures and grpcio on all slaves.
    
    PiperOrigin-RevId: 162482541

commit d8df2487b19be54b06b62b631a5545e77a00df3a
Merge: b13373f40be 3d91dc4b3af
Author: Shanqing Cai <cais@google.com>
Date:   Tue Jul 18 12:57:19 2017 -0400

    Merge pull request #11576 from delftrobotics-forks/typo
    
    Fix typo in exception.

commit 3d91dc4b3af462207fe357f2f5ac271327998855
Author: Hans Gaiser <j.c.gaiser@delftrobotics.com>
Date:   Tue Jul 18 14:48:51 2017 +0200

    Fix typo in exception.

commit ce952bde5ea34708160f3e97d039617a0c11bd5f
Author: Skye Wanderman-Milne <skyewm@google.com>
Date:   Mon Jul 17 11:32:32 2017 -0700

    Create ScopedTFStatus to manage TF_Status lifetime.
    
    In addition, this change:
    - Adds a SWIG typemap to automatically unwrap ScopedTFStatus's for TF_Status* inputs
    - Creates a new c_api_util.py file
    - Switches a few TF_Status users to use raise_exception_on_not_ok_status() instead
    
    PiperOrigin-RevId: 162243205

commit 1eccfb6e190cdd594c2cd1d3b27323f87614d8bc
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Thu Jul 13 06:38:53 2017 -0700

    Nest: Raise exceptions with more readable messages
    
    PiperOrigin-RevId: 161800080

commit 90d6421c5e0898fb840197d9533c2f8ba1a7c651
Author: Shanqing Cai <cais@google.com>
Date:   Mon Jul 10 19:22:04 2017 -0700

    Merge changes from github.
    END_PUBLIC
    
    ---
    Commit d0f53f77f authored by Penghao Cen<scorpiocph@gmail.com>
    Committed by Shanqing Cai<cais@google.com>:
    Minor fix typo (#11323)
    
    ---
    Commit 02fcf564e authored by Chris Song<sjhshy@gmail.com>
    Committed by Chris Song<sjhshy@gmail.com>:
    Fix misspells.
    
    ---
    Commit 764c9b6b4 authored by Louis Tiao<ltiao@users.noreply.github.com>
    Committed by GitHub<noreply@github.com>:
    Fixed typo in docstring
    ---
    Commit f8cd1283e authored by Shanqing Cai<cais@google.com>
    Committed by Shanqing Cai<cais@google.com>:
    Chaser
    
    ---
    Commit 01383b946 authored by Shanqing Cai<cais@google.com>
    Committed by Shanqing Cai<cais@google.com>:
    Adapt TensorFlowTestCase.setUp() to new reset_default_graph() semantics
    
    Avoid calling reset_default_graph() directly to prevent exceptions in
    cases where test methods error out from within nested graph contexts,
    which can leave _default_graph_stack non-empty in certain Python
    versions.
    
    ---
    Commit 0ffc37890 authored by Amit Patankar<amitpatankar@google.com>
    Committed by Amit Patankar<amitpatankar@google.com>:
    Removing second declaration of functions.
    
    ---
    Commit f9c9cacb0 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Refactor ElementalIrEmitter's slice index finding code into
    IrArray::Index::SourceIndexOfSlice().
    
    PiperOrigin-RevId: 161140653
    
    ---
    Commit ba297aec9 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Update ops-related pbtxt files.
    
    PiperOrigin-RevId: 161138258
    
    ---
    Commit 68d666737 authored by Alexandre Passos<apassos@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fixes a reentrant lock issue with tensors using ndarray memory which uses tensor memory.
    
    PiperOrigin-RevId: 161137788
    
    ---
    Commit a2ee8bca3 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add support for int8 x int8 -> int32 matrix multiplication via cublasGemmEx to stream_executor.
    
    PiperOrigin-RevId: 161137741
    
    ---
    Commit 755fa7b50 authored by Mark Daoust<markdaoust@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Block generate_test, and docs generating from running in python3.
    
    - Doc generation is currently unsupported in python3
    
    - These both end in errors in python 3.5.1+
    
    PiperOrigin-RevId: 161137467
    
    ---
    Commit 97cbcac45 authored by Peter Hawkins<phawkins@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [TF:XLA] Fix failure in functionalize_control_flow rewrite for Enter nodes that are unused. Make sure we ignore such nodes without producing an error.
    
    PiperOrigin-RevId: 161136545
    
    ---
    Commit dabcb60bc authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [XLA] Add reasonable error messages to Builder::Build for bad parameter numbers.
    
    PiperOrigin-RevId: 161136262
    
    ---
    Commit 0cbd249e8 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add complex tensors support to `matrix_determinant`.
    
    PiperOrigin-RevId: 161132422
    
    ---
    Commit 335f1f14d authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Extend static shape inference for SparseTensors with dense_shapes constructed using slicing.
    
    PiperOrigin-RevId: 161132391
    
    ---
    Commit 53604916e authored by Jianwei Xie<xiejw@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fixed the missing labels test in TPUEstimator.
    
    PiperOrigin-RevId: 161131282
    
    ---
    Commit 9f57dc8dd authored by Bruno Rosa<bruno.rosa@eldorado.org.br>
    Committed by Bruno Rosa<bruno.rosa@eldorado.org.br>:
    Use mcpu instead of march for ppc64le
    
    march is not support by gcc on ppc64le
    
    ---
    Commit 7d5c74a9c authored by Skye Wanderman-Milne<skyewm@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Move duplicate detection logic from Graph to FunctionLibraryDefinition
    
    Turns out this is more useful, since there are many function libraries
    that don't belong to a graph. This will be used in a future
    change. Note that this maintains the current behavior of Graph.
    
    In addition, updates FunctionDefsEqual() to handle unset attr entries
    (I ran into this when using this in said future change).
    
    PiperOrigin-RevId: 161126628
    
    ---
    Commit 2caec3af1 authored by Shanqing Cai<cais@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Disable more timeseries py tests failing in OSS PIP GPU builds
    
    PiperOrigin-RevId: 161124799
    
    ---
    Commit 0b5cce367 authored by Eugene Brevdo<ebrevdo@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Get TopK op working on GPU again.  Extend using cub's radix sort.
    
    1. Undo rollback of Andreas Kirsch's initial implementation.
    2. Use cub segmented radix sort if Andreas' heap-based impl
       for large k and small num_cols (thresholds of k=100, n=1000
       determined empirically).
    3. Use cub segmented radix sort if k == num_cols (this case is always faster).
    4. Added benchmarks.
    
    Benchmarks show that the GPU implementation is up to 3x slower for small k but
    can be 10x faster for large num_cols and k.
    
    Benchmarks:
    
    Benchmark: m_128_n_10_k_5_use_gpu_False          wall_time: 0.000166 s   Throughput: 0.0077 GB/s
    Benchmark: m_128_n_10_k_5_use_gpu_True   wall_time: 0.000796 s   Throughput: 0.00161 GB/s
    Benchmark: m_128_n_10_k_9_use_gpu_False          wall_time: 0.00017 s    Throughput: 0.00751 GB/s
    Benchmark: m_128_n_10_k_9_use_gpu_True   wall_time: 0.000796 s   Throughput: 0.00161 GB/s
    Benchmark: m_128_n_10_k_10_use_gpu_False         wall_time: 0.00017 s    Throughput: 0.00753 GB/s
    Benchmark: m_128_n_10_k_10_use_gpu_True          wall_time: 0.000775 s   Throughput: 0.00165 GB/s
    Benchmark: m_128_n_100_k_1_use_gpu_False         wall_time: 0.000155 s   Throughput: 0.0826 GB/s
    Benchmark: m_128_n_100_k_1_use_gpu_True          wall_time: 0.000796 s   Throughput: 0.0161 GB/s
    Benchmark: m_128_n_100_k_50_use_gpu_False        wall_time: 0.000247 s   Throughput: 0.0519 GB/s
    Benchmark: m_128_n_100_k_50_use_gpu_True         wall_time: 0.0008 s     Throughput: 0.016 GB/s
    Benchmark: m_128_n_100_k_99_use_gpu_False        wall_time: 0.000261 s   Throughput: 0.049 GB/s
    Benchmark: m_128_n_100_k_99_use_gpu_True         wall_time: 0.000794 s   Throughput: 0.0161 GB/s
    Benchmark: m_128_n_100_k_100_use_gpu_False       wall_time: 0.000239 s   Throughput: 0.0536 GB/s
    Benchmark: m_128_n_100_k_100_use_gpu_True        wall_time: 0.000777 s   Throughput: 0.0165 GB/s
    Benchmark: m_128_n_1000_k_1_use_gpu_False        wall_time: 0.000324 s   Throughput: 0.395 GB/s
    Benchmark: m_128_n_1000_k_1_use_gpu_True         wall_time: 0.000916 s   Throughput: 0.14 GB/s
    Benchmark: m_128_n_1000_k_10_use_gpu_False       wall_time: 0.00042 s    Throughput: 0.305 GB/s
    Benchmark: m_128_n_1000_k_10_use_gpu_True        wall_time: 0.000902 s   Throughput: 0.142 GB/s
    Benchmark: m_128_n_1000_k_500_use_gpu_False      wall_time: 0.0011 s     Throughput: 0.116 GB/s
    Benchmark: m_128_n_1000_k_500_use_gpu_True       wall_time: 0.00097 s    Throughput: 0.132 GB/s
    Benchmark: m_128_n_1000_k_990_use_gpu_False      wall_time: 0.00133 s    Throughput: 0.0962 GB/s
    Benchmark: m_128_n_1000_k_990_use_gpu_True       wall_time: 0.000993 s   Throughput: 0.129 GB/s
    Benchmark: m_128_n_1000_k_1000_use_gpu_False     wall_time: 0.00102 s    Throughput: 0.126 GB/s
    Benchmark: m_128_n_1000_k_1000_use_gpu_True      wall_time: 0.000964 s   Throughput: 0.133 GB/s
    Benchmark: m_128_n_10000_k_10_use_gpu_False      wall_time: 0.002 s      Throughput: 0.64 GB/s
    Benchmark: m_128_n_10000_k_10_use_gpu_True       wall_time: 0.00288 s    Throughput: 0.445 GB/s
    Benchmark: m_128_n_10000_k_100_use_gpu_False     wall_time: 0.00233 s    Throughput: 0.549 GB/s
    Benchmark: m_128_n_10000_k_100_use_gpu_True      wall_time: 0.00325 s    Throughput: 0.394 GB/s
    Benchmark: m_128_n_10000_k_5000_use_gpu_False    wall_time: 0.0127 s     Throughput: 0.101 GB/s
    Benchmark: m_128_n_10000_k_5000_use_gpu_True     wall_time: 0.00381 s    Throughput: 0.336 GB/s
    Benchmark: m_128_n_10000_k_9900_use_gpu_False    wall_time: 0.015 s      Throughput: 0.0853 GB/s
    Benchmark: m_128_n_10000_k_9900_use_gpu_True     wall_time: 0.00438 s    Throughput: 0.292 GB/s
    Benchmark: m_128_n_10000_k_10000_use_gpu_False   wall_time: 0.0104 s     Throughput: 0.123 GB/s
    Benchmark: m_128_n_10000_k_10000_use_gpu_True    wall_time: 0.00427 s    Throughput: 0.3 GB/s
    Benchmark: m_128_n_100000_k_100_use_gpu_False    wall_time: 0.0148 s     Throughput: 0.865 GB/s
    Benchmark: m_128_n_100000_k_100_use_gpu_True     wall_time: 0.0262 s     Throughput: 0.488 GB/s
    Benchmark: m_128_n_100000_k_1000_use_gpu_False   wall_time: 0.0201 s     Throughput: 0.636 GB/s
    Benchmark: m_128_n_100000_k_1000_use_gpu_True    wall_time: 0.0263 s     Throughput: 0.486 GB/s
    Benchmark: m_128_n_100000_k_50000_use_gpu_False          wall_time: 0.214 s      Throughput: 0.0599 GB/s
    Benchmark: m_128_n_100000_k_50000_use_gpu_True   wall_time: 0.0322 s     Throughput: 0.398 GB/s
    Benchmark: m_128_n_100000_k_99000_use_gpu_False          wall_time: 0.262 s      Throughput: 0.0489 GB/s
    Benchmark: m_128_n_100000_k_99000_use_gpu_True   wall_time: 0.0377 s     Throughput: 0.34 GB/s
    Benchmark: m_128_n_100000_k_100000_use_gpu_False         wall_time: 0.118 s      Throughput: 0.108 GB/s
    Benchmark: m_128_n_100000_k_100000_use_gpu_True          wall_time: 0.0365 s     Throughput: 0.351 GB/s
    
    END_PUBLIC
    
    BEGIN_PUBLIC
    BEGIN_PUBLIC
    Automated g4 rollback of changelist 157169178
    
    PiperOrigin-RevId: 161476569

commit 59595ff9a88e2f0a826d988d7336bd6c158add23
Author: David Norman <DavidNorman@users.noreply.github.com>
Date:   Mon Jul 10 18:39:50 2017 +0100

    [XLA] Ensure that the 2 data types chosen by the test are both valid for the device (#11172)
    
    * Ensure that the 2 data types chosen by the test are both valid for the device
    
    * Include a comment about the test
    
    * Fix punctuation in comments throughout.
    
    * Relax the regular expression matching for the exception

commit 01383b946e4558431830546a325b8d828679b2a7
Author: Shanqing Cai <cais@google.com>
Date:   Thu Jul 6 23:25:44 2017 -0400

    Adapt TensorFlowTestCase.setUp() to new reset_default_graph() semantics
    
    Avoid calling reset_default_graph() directly to prevent exceptions in
    cases where test methods error out from within nested graph contexts,
    which can leave _default_graph_stack non-empty in certain Python
    versions.

commit 9d2a432ce74eab4c439fe8c60389e4da9d6c92b2
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Fri Jun 16 17:15:50 2017 -0700

    Add plumbing for a ReducePrecision operation.
    
    This CL is the first part of a series that adds a ReducePrecision operation for experimenting with the effects of reduced-precision storage of intermediate values.  ReducePrecision is a Unary operation parameterized on floating-point exponent and mantissa bit sizes, and rounds the input data as if it were converted to a floating-point value with the given bit sizes and then converted back to "normal" F32 data.
    
    Using arbitrary parameterized values to describe the lower-precision value type, rather than hardcoding this as a reduction to IEEE f16, allows us to do more flexible experiments -- e.g., "Is this training error due to the reduced mantissa precision, or due to the reduced exponent range?" or "Is this a smooth degradation with reduced precision or is there a sudden drop at some value?" -- which may suggest software mitigations for the effects.
    
    This version of the CL adds the kReducePrecision instruction opcode, and the overall plumbing to support the operation.  To allow testing, it includes an exceptionally simple implementation of the actual operation that returns "unimplemented" except for the exponent and mantissa bit sizes where it is a complete no-op.
    
    PiperOrigin-RevId: 159295615

commit 549c223ab71f0066a444ba0f969affbecc28f116
Author: DavidNorman <davidn@graphcore.ai>
Date:   Sat May 20 18:42:21 2017 +0100

    Squashed commit of the following:
    
    commit 825ff55cbfb8b059f3d2b4a5ace9c4bacedba69b
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Sat May 20 18:39:24 2017 +0100
    
        Merge example backend back from github
    
    commit 7bea64415c437bda1d90dccadb34a82a22b57bb0
    Merge: da9d00c 0fb5317
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Sat May 20 18:26:35 2017 +0100
    
        Merge remote-tracking branch 'github/example-evaluator-device' into poplar-plugin
    
    commit da9d00c693276e136354c9879fd9715d39927f05
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Sat May 20 18:10:12 2017 +0100
    
        Fix to match new compiler API
    
    commit dffec8216851941f1854f08a11fc0cf6b59dcb96
    Merge: 650ca51 2803742
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Sat May 20 17:52:23 2017 +0100
    
        Merge branch 'poplar' into poplar-plugin
    
    commit 650ca5166cfea1b10ce80e859a6ea0a7e01e7d95
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Fri May 19 13:19:08 2017 +0100
    
        Remove cases which would cause errors - types not supported in back end
    
    commit 65d11c99ae681e56f949147728dd5e3a255f2086
    Merge: d43762b 0b52c33
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Fri May 19 11:04:00 2017 +0100
    
        Merge branch 'poplar' into poplar-plugin
    
    commit d43762bab4a080b20f77f21ca2309b4c2dc71a84
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Fri May 19 10:56:47 2017 +0100
    
        Modify example plugin to be hlo executor plugin
    
    commit 191041a633ffac323a5807ca86c455dce9d31af6
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Thu May 18 18:38:27 2017 +0100
    
        Add outliner for convolution and matmul
    
    commit 016aad4596ebaade307f453938da2cb94c464998
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Thu May 18 09:04:50 2017 +0100
    
        Add poplar to the build and test environments
    
    commit 97ba294bd93d339109284fcbc441b3e989c77dd1
    Merge: 3ef9673 319b6ce
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Thu May 18 08:54:49 2017 +0100
    
        Merge branch 'master' into poplar-plugin
    
    commit 3ef9673cd9f5f9b134b0bf62f458f490ba0ae02a
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Wed May 17 16:46:49 2017 +0100
    
        Use TF style names
    
    commit 14226054994e5dc5d8215d0f2fdbe2a35b4a8f02
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Wed May 17 16:45:42 2017 +0100
    
        Rename the visitors - 'Poplar' was extraneous. Introduce a ComputationMap
    
    commit 003b558a2f3992f8cd1fdeff8475bec3fe774b3c
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Wed May 17 16:23:31 2017 +0100
    
        Clear the tensor map once the visitor is complete. Save memory.
    
    commit 3feacafa0ec5f292f5096b83f3fec2f5ee7c42a4
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Wed May 17 14:09:43 2017 +0100
    
        Use the explicit poplar IEEE half type
    
    commit 58c3c663c048b7f241b9f605083598ba3c79bfe2
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Wed May 17 09:51:32 2017 +0100
    
        Remove file added by mistake
    
    commit ed8b1b80655a950d235a691e30674d382d71cd6b
    Merge: f3a2028 513b1e4
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Wed May 17 08:55:50 2017 +0100
    
        Merge branch 'poplar' into poplar-plugin
    
    commit f3a2028a0d70081119215f439657b8d8bf54e021
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue May 16 16:18:50 2017 +0100
    
        Change a few more C-style casts to C++ casts
    
    commit 47c0ba4a97c0b253debd0ee9363efdcf81cd651d
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue May 16 12:54:50 2017 +0100
    
        Actually increase the report counter during execution
    
    commit a976886d4d28a47b1815637a03abaa543c612c9c
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue May 16 12:09:22 2017 +0100
    
        Append a serial number to the report name
    
    commit 2cecfda4fe2ae6617e882ad511772ed5c57bc63c
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue May 16 11:49:58 2017 +0100
    
        Ensure non native types pass through the API
    
    commit 8500cf6a9bebeea41294afa8627f6aaecdb1e553
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue May 16 11:47:35 2017 +0100
    
        Add back 'map' line for mapping single tensor entry across a
        parallel map.
    
    commit 1abec49a00728662f7a21692a95425409173c8e0
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue May 16 10:08:32 2017 +0100
    
        Add 2 extra F16 tests
    
    commit c5a230b063283db72a064f489ecd709ad42d8c4e
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue May 16 10:07:52 2017 +0100
    
        Prune unnecessary code
    
    commit 512fb5848ae53d5209c8928153f0952a2e4810b4
    Merge: 1cff3a3 c03d5cc
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue May 16 09:30:37 2017 +0100
    
        Merge branch 'poplar' into poplar-plugin
    
    commit 1cff3a3aa3b6356f3c4a0e315f10795d7b948feb
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon May 15 15:51:33 2017 +0100
    
        Use an alternative form of local initialization
    
    commit e2c8ffdb9ce6d39003ad4b588f27abab76978d12
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon May 15 15:44:48 2017 +0100
    
        Changes after code review
    
    commit a39423081215a237ab480b12b140a289a7069490
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon May 15 13:18:06 2017 +0100
    
        Fix up remaining F16 issues
    
    commit 68468ecbaf72447c2a7233a2cc9815847c3e3856
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon May 15 12:54:48 2017 +0100
    
        Merge F16 literals back into working order
    
    commit 2ede7f56811997e0e9a408954989a74d027c1be5
    Merge: dd14ec7 a8271ea
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon May 15 11:44:23 2017 +0100
    
        Merge branch 'poplar' into poplar-plugin
    
    commit dd14ec708dde6081d3125fb3c54beb4b5974b7b8
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon May 15 11:00:57 2017 +0100
    
        Don't run on into the error condition
    
    commit 26d3d5937933bc2b4398e7d5f2f6b6b99874242c
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon May 15 10:32:41 2017 +0100
    
        Add literal support for F16
    
    commit 1344cbaa6fa967db8f66e507acf5eedcf171d16e
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon May 15 10:29:57 2017 +0100
    
        Add support for F16
    
    commit 886d12fded4e8d93b894f4f0eb8fe95216d8bb58
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Fri May 12 16:27:21 2017 +0100
    
        Remove commented out code
    
    commit b135b8e48db110705fd1664fcc4665eb6a357ec1
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Fri May 12 14:30:41 2017 +0100
    
        Don't flatten sub-computations
    
    commit dec6948bc984aa891c2d6c2c8f652cac61ff8c73
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Fri May 12 13:39:40 2017 +0100
    
        Revert "Use the poplibs unary and binary ops"
    
        This reverts commit b5f0731e4f9f496facf1e49c59ff765adac352ab.
    
        Do not use popstd until the predicate operations can be used as the
        predicate in a loop operation.
    
    commit b5f0731e4f9f496facf1e49c59ff765adac352ab
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Fri May 12 11:37:40 2017 +0100
    
        Use the poplibs unary and binary ops
    
    commit e502f175e020e5d10c800e0cca09c1d57725278d
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Fri May 12 10:13:19 2017 +0100
    
        Use a renet18 that matches the poplar example
    
    commit 3fe1e6603f79ba0544258475db8495f287484aca
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Wed May 10 12:10:40 2017 +0100
    
        Implement strides > 1 in strided slice
    
    commit eb48ef25113f43f5c7efa6cd907aa01db1287dea
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue May 9 17:04:51 2017 +0100
    
        Correct resnet18 to match poplar one
    
    commit 5bd02f276f7110a49616935d90c615b570ba2b40
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue May 9 11:47:47 2017 +0100
    
        Add inference only resnet18
    
    commit 8b7ec31229c2e64fe86fe517e247dac183597354
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue May 9 10:20:04 2017 +0100
    
        Use the 2D asym padding interface
    
    commit c34da4ac61894c6f4dae21e1b89a93b995d30c7e
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue May 9 08:12:06 2017 +0100
    
        Move poplar to the plugin subdirectory of XLA
    
    commit 5bed1a6e437e2a6a3932daa077211f89e62222e4
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue May 9 07:13:31 2017 +0100
    
        Include options for additional tags
    
    commit 064cc96d84059830c54ee07699fac26ae928669d
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue May 9 06:58:58 2017 +0100
    
        Allow for multiple  backends
    
    commit fdbad354d3bd040922bb71ac58d4276ed4364e43
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon May 8 18:09:11 2017 +0100
    
        Need to reference the device target
    
    commit 06be2c080c9f331fc6fbd1c13c81d9c0c251d383
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon May 8 18:08:56 2017 +0100
    
        Add example
    
    commit 63824e015fdba6b532e70923a485042fc2c73a9a
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon May 8 16:32:36 2017 +0100
    
        Use a permanent config file scheme for plugin inclusion
    
    commit 6c494391a461c1b704de3a97ad1c871bc1a57363
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon May 8 15:50:38 2017 +0100
    
        Remove poplar device from the config file
    
    commit b76285ee9a543f0d5311da95c8b12599f2d240fe
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon May 8 15:49:27 2017 +0100
    
        Add useful message to unchanging file
    
    commit 461262231e5a808fdbb1d7d8ee35bf068c3372f7
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon May 8 15:46:31 2017 +0100
    
        Remove file in repo from the .gitignore file
    
    commit 2824a392dedef8c6f3f635abe6af6c3485222155
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon May 8 15:40:52 2017 +0100
    
        Try using an alternative form for plugin unit test management
    
    commit 523f4d86a88fe1ba09bc08546421404aae154d3b
    Merge: b52de99 7fa0cf3
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon May 8 14:42:23 2017 +0100
    
        Merge branch 'master' into poplar-plugin
    
    commit b52de99eac16d92bec107baf1892ad2b6d04e3a9
    Merge: 89d9f1c b25f77a
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon May 8 14:40:58 2017 +0100
    
        Merge branch 'poplar-plugin' of ssh://phabricator.sourcevertex.net/diffusion/TENSORFLOW/tensorflow into poplar-plugin
    
    commit b25f77ac25231c5d252dddd67a79531668ad3e10
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Thu May 4 13:58:13 2017 +0100
    
        Use new interface to popconv
    
    commit 89d9f1cef59683b9c92dd5a460b6b49dec63c817
    Merge: 9c15cd3 d0042ed
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Thu May 4 13:45:50 2017 +0100
    
        Merge branch 'poplar' into poplar-plugin
    
    commit 9c15cd34f9063c9f72b4830b2254c29b4cf04c41
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Wed May 3 13:31:47 2017 +0100
    
        Use the new interface for constant tensors
    
    commit afd3515f96b84cdc33e012b3f612500b04ae5e5c
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Wed May 3 13:11:08 2017 +0100
    
        Add configurable XLA plugin target
    
    commit d546c6af20f00ba9a95b556859b807141358006c
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Fri Apr 28 13:08:53 2017 +0100
    
        Map the weights and input of the conv op
    
    commit 63717e54f327a3fe8d46adce01f84c1475b9eefc
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Fri Apr 28 10:52:19 2017 +0100
    
        Add some vector/vector ops
    
    commit 9fd1dab83a21addceed2fd99cd7c996869b3a36c
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Fri Apr 28 10:11:19 2017 +0100
    
        Defend against the second argument to Dot having rank=1
    
    commit dcdbec503ecd6b18f0b67a73cfea2b2151304430
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Thu Apr 27 17:00:43 2017 +0100
    
        Add the compute time to the execution stats
    
    commit 9fffb3e4bc24c0ebb2949d20b1ebfa97d95dfa29
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Thu Apr 27 16:33:46 2017 +0100
    
        Commenting TensorControl, and yak-shaving
    
    commit c265cf225fd04b037d46bbdda65c03baa25178e2
    Merge: 049a390 6a1825e
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Thu Apr 27 14:20:15 2017 +0100
    
        Merge branch 'poplar' into poplar-plugin
    
    commit 049a390ba39a0bade0a20b11f1005f1f628994b2
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Thu Apr 27 14:10:43 2017 +0100
    
        Do not map constant tensors
    
    commit 55026d88393d8e9c7399f500781742b9b0d9e5df
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Thu Apr 27 13:46:01 2017 +0100
    
        Correct error message
    
    commit e4c170681a07e696727a39b3a1ec220e4effff07
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Thu Apr 27 13:39:37 2017 +0100
    
        Switch the cast operator to the poplibs version
    
    commit 1bf20150b1d374ec65c4a344c131b67d28aa9507
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Thu Apr 27 12:29:07 2017 +0100
    
        Add TODO comment regarding type support
    
    commit 3f839f03e75a7f35e824fdcc1c7b454fad68f40c
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Thu Apr 27 12:28:15 2017 +0100
    
        Remove bool as a type in elementwise predicate comparison inputs
    
    commit 825e42b568fa11238939f4e51b776851144ce1ad
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Thu Apr 27 12:26:20 2017 +0100
    
        Use a more general exception catch
    
    commit 219b1c9a894292a16b1d15e44b1524dca1180262
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Thu Apr 27 12:25:26 2017 +0100
    
        Remove Dot now that it is supported through poplibs
    
    commit df45b0ac0ad5c49514206a17429a299ce878bb95
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Thu Apr 27 10:24:56 2017 +0100
    
        Update to latest poplar convolution interface [WIP]
    
        There should be a look-forward output tensor generator, but this
        should wait until popconv has more natural tensor shapes
    
    commit 794420e3d04912708239bb7ee6c506e065dc8ca8
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Wed Apr 26 13:17:28 2017 +0100
    
        Remove 'dot' operator from vertices - now supported by poplin
    
    commit 71713580f399f1c16b67935d21ee3b7ad5c32280
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Wed Apr 26 10:02:41 2017 +0100
    
        No need for explicit device now that poplar XLA will consume all relevent
        ops
    
    commit 370f3dc689b7b9e9bb9452f2693062a28157ad0a
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Wed Apr 26 09:46:12 2017 +0100
    
        Ensure that poplar XLA device will consume appropriate operations
    
    commit 911b4f0ff9d72b83f1c5d29336671c13a34bb54d
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon Apr 24 14:52:39 2017 +0100
    
        Adding resnet18 as an example
    
    commit c8a62d8c9082f8ed9b5b6b302b86ce0fb97ce53c
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon Apr 24 14:35:56 2017 +0100
    
        Adding a resnet50 example and a reduce test
    
    commit 09a8ba2a57c33f9bb814e26bb5dbf2665684311e
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon Apr 24 09:31:02 2017 +0100
    
        Add some extra optimization stages to the pre-poplar compilation
    
    commit ac94c5d5a04b5676d1a372c34e289d7d907a1ed4
    Merge: ec72868 34c738c
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Sun Apr 23 11:57:30 2017 +0100
    
        Merge branch 'poplar' into poplar-plugin
    
    commit ec72868b4a386dae1e4b6cb1db5b98f3fc39d754
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Fri Apr 21 14:22:26 2017 +0100
    
        Defend against unequal paddings (not supported by poplar at the moment)
    
    commit 9501a99c44a2a7da0ff1e395c0e71208a9105da4
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Fri Apr 21 13:50:00 2017 +0100
    
        Use a convolution plan cache
    
    commit 82d5ad61177e7fa019acb985e0957b38ad94a6d9
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Fri Apr 21 11:37:16 2017 +0100
    
        Create and use a popconv Planning cache
    
    commit 4204cd2ed8511999a9c39a7721414b763f57ba76
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Fri Apr 21 11:31:36 2017 +0100
    
        Add a 'compiler resources' struct that can contain per-compile
        resources for the operations.
    
    commit 621b5ab030f9cac8e5fece86588fffd8e855f466
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Fri Apr 21 11:00:48 2017 +0100
    
        Use the poplin matmul operation - and extend unit tests
    
    commit eaa794dc5903b9a0857f22e1694b53921e2872ac
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Thu Apr 20 14:52:23 2017 +0100
    
        Remove unnecessary trace
    
    commit 02ff849be1ed325dc2453fc8f284ba2261daf326
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Thu Apr 20 14:47:59 2017 +0100
    
        Separate the main visitor into an elementwise only one, and a full
        one.  Also separate the call and map visitors so that the map one
        doesn't get to include non-elementwise operations.
    
    commit 42beb6e5e06f801660b5ed5191f29b3afe63dcf9
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Thu Apr 20 12:22:12 2017 +0100
    
        Update method signatures to match public HEAD
    
    commit a852939acb762a38d8093038340605b41d9573aa
    Merge: 7131c8f 0557e8f
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Thu Apr 20 11:59:01 2017 +0100
    
        Merge branch 'poplar' into poplar-plugin
    
    commit 7131c8f56be426a38f944adeb9ef54c1769322b6
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Wed Apr 19 14:10:24 2017 +0100
    
        Update to use the current popnn convolutions
    
    commit a434949178c9cda52efb324c905f57b4c67e1c31
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue Apr 18 16:41:27 2017 +0100
    
        Add options to create poplar report, vertex and compute graphs
    
    commit 7864a4ea1c585f7db4072d0a8413a0803aa1c345
    Merge: 9e573f6 fdbeae6
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue Apr 18 16:00:18 2017 +0100
    
        Merge branch 'master' into poplar-plugin
    
    commit 9e573f67a90fbd18d8a2d56ac2f156d9b4a7c506
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue Apr 18 14:06:48 2017 +0100
    
        Add an examples directory and one mnist sized convolution example
    
    commit e8c2af0db8fea45f8805fada47dcdad80d808430
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue Apr 18 14:06:10 2017 +0100
    
        Remove redundant build script
    
    commit 755587b79a297ce93fee2a1a52b346ed131535e2
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Sun Apr 16 23:37:04 2017 +0100
    
        Null engines must be just parameters, or tuples of parameters. Execution
        of null engines means remapping arguments and nothing more.
    
    commit 1053f5476d2bdd0fc3295e019be17c665c5af36d
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Sun Apr 16 14:45:39 2017 +0100
    
        Identify when an engine has outputs that are unchanged inputs
    
    commit c99a7638d2dace9a25cb06b64b45e2902b15d08a
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Thu Apr 13 13:30:48 2017 +0100
    
        Do all engine execution in a mutex.  The execute function can be called in
        multiple threads.
    
    commit 8b6564ff83aeba8e263f2b61119a85662e7ae481
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Thu Apr 13 12:07:56 2017 +0100
    
        When a buffer is pre-allocated but is part of a tuple result, ensure
        that it has the correct reference count
    
    commit d396b521b7ec28eb3938d723061c44920da908a6
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Thu Apr 13 12:07:25 2017 +0100
    
        Track buffers from input to output, and reuse them when they remain the same
    
    commit 064e528958bbed964b4a9688be91d7e1b63d82b5
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Wed Apr 12 14:10:49 2017 +0100
    
        Add using in place updates for suitable operations
    
    commit 91dc95013c9563e321eb2ea447cd2c03e4387714
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon Apr 10 17:22:39 2017 +0100
    
        Update to use latest poplar release
    
    commit c51bd5406f92a3be9b01dc0313efde743eedc24f
    Merge: 3985eb4 901ab86
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon Apr 10 15:39:54 2017 +0100
    
        Merge branch 'master' into poplar-plugin
    
    commit 3985eb4a7aebaacbb1ec3ed615bfcc3590a8adac
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon Apr 10 15:22:51 2017 +0100
    
        Fix error where invalid array index was causing data to be left on card
    
        Data was being overwritten.
    
    commit f85d00fe2343aebc0eb6a67bdce11cc6cdf30cd8
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon Apr 10 15:21:46 2017 +0100
    
        Adding a multi-run test to the variable ops
    
    commit 513620259f0a0e08c59c35a436617065186fdda4
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Thu Apr 6 10:37:16 2017 +0100
    
        Add locking around executor members
    
    commit f97ce7c3c2f11a8dce72ab1fcbb6b8f04098cfd0
    Merge: 2008f50 b93a88f
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Wed Apr 5 18:29:49 2017 +0100
    
        Merge branch 'master' into poplar-plugin
    
    commit 2008f507dc3b7596b6e424c00811d9bb8a512679
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Wed Apr 5 15:46:07 2017 +0100
    
        Remove unused constants
    
    commit 6062d14d6779ceb2347f528144a3399ad688376b
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Wed Apr 5 14:58:14 2017 +0100
    
        Cache tensors on the device where possible
    
    commit 85cca2c4b8749f57b794cf58d062736bb1547483
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Wed Apr 5 13:27:37 2017 +0100
    
        Remove unnecessary logging
    
    commit 0ecd7caf103a08a89158929f69f6fef0c3df697b
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Wed Apr 5 11:05:51 2017 +0100
    
        Use VLOG instead of LOG, and add some extra logging for memory management
    
    commit 7954e4a0f06305b9df685dc07c3eda12a8deb849
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue Apr 4 15:59:49 2017 +0100
    
        Remove redundant test
    
    commit 739fec7c72a1d4acd71a879465b88719aa3c2be4
    Merge: 04dbae3 8908272
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue Apr 4 14:48:36 2017 +0100
    
        Merge branch 'poplar' into poplar-plugin
    
    commit 04dbae3d9a90d509b73ba87355705530b8144eee
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue Apr 4 14:21:21 2017 +0100
    
        Add while op - and support for RandomNormal
    
    commit 61fd01f9a8c845bafac1b7da12dd30c0eead91cc
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue Apr 4 14:20:10 2017 +0100
    
        Use the new macro for registering the device ops
    
    commit 6b8d4f91ae02984dc5a9ab3680e4f28469d8bf5d
    Merge: 6caeb7d a6008d5
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon Apr 3 13:05:35 2017 +0100
    
        Merge branch 'master' into poplar-plugin
    
    commit 6caeb7d9e4169129907729bbb3fb9218e60d31e5
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon Apr 3 12:57:27 2017 +0100
    
        Use new popnn libraries and headers.
    
    commit 061b153265fe9bbe14317f8ac338d07fe7ffed0b
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon Apr 3 12:56:06 2017 +0100
    
        Add finders for new popnn libraries, and interface for getting
        at the full path to the lib directories
    
    commit 208d29c345b4efef907ec83217e4d546bad34251
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue Mar 28 14:22:17 2017 +0100
    
        Use VLOG(1) for the nodes in the graph
    
    commit 6f569dcdfd3140823f7aee7bedbfcfdd4deff72c
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue Mar 28 13:07:22 2017 +0100
    
        Remove poplar timer and stream (use host ones). Use synchronous memcpy
        as the target for the asynchronous memcpy on stream.  Execute the
        engine on the stream as expected.
    
    commit 8572c0b56f31145155922a1612ee4491a4cadbbd
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue Mar 28 11:15:02 2017 +0100
    
        Use the new host copy interface, start work on tensor management
    
    commit de5c7eefc2c1c07fd83f669e517e2014f7b1aade
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue Mar 28 10:57:10 2017 +0100
    
        Adding test that runs simple networks multiple times
    
    commit 878d6b1dd33565efc48ca6a28a0e207a91903241
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon Mar 27 18:13:39 2017 +0100
    
        Remove plugin loader from Poplar unit tests
    
    commit 26676aca857dd8a1f3b7be539ca2893a112b47f0
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon Mar 27 11:15:08 2017 +0100
    
        Syncing list of supported ops with CPU
    
    commit c020a44e1763310d5aa46bf42f649e386e9b103d
    Merge: 75e2441 bbe056e
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon Mar 27 10:07:34 2017 +0100
    
        Merge branch 'master' into poplar-plugin
    
    commit 75e2441444739aa8a621a1f872d8464aa1fece0d
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Fri Mar 24 11:07:53 2017 +0000
    
        Swap poplar plugin into an internal plugin.
    
    commit 710ac2f0aef8873ae4ebf1ea6db545825eaf9270
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Fri Mar 24 10:57:35 2017 +0000
    
        Remove pip packaging for poplar .so plugin
    
    commit 9ac6d047c63c3511380b4aa8be5f2489316a995d
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Fri Mar 24 10:56:41 2017 +0000
    
        Remove plugin shared object loader part of python test framework
    
    commit 7bbc4939793616fb9fe7b19375671f4204d33863
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Fri Mar 24 09:03:33 2017 +0000
    
        Use lower targets for the XLA headers only build
    
        The :jit target is the one used by the main body of TF to
        link in XLA.  If we are to use it to bring in Poplar too,
        then poplar cannot indirectly depend upon it
    
    commit 8d31942308cb1a8571a2d43f41a099ec3871f712
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue Mar 21 16:06:28 2017 +0000
    
        Use OS/X and linux independent rule
    
    commit c8b76e912b76bd7ce12d7a441dbe45207ef20548
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue Mar 21 15:58:24 2017 +0000
    
        Use a cc_binary rule to avoid the need for protobuf in the final .so file
    
    commit 84cb108bd333ae52956e513c17ba05dea1c9540d
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue Mar 21 10:18:18 2017 +0000
    
        Syncing new ops into the device
    
    commit 37b1cd5012d8782172c2c1279f308e449ec6da29
    Merge: c7b6b28 1ff3dad
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue Mar 21 08:31:24 2017 +0000
    
        Merge branch 'poplar-plugin' of phabricator.sourcevertex.net:diffusion/TENSORFLOW/tensorflow into poplar-plugin
    
    commit 1ff3dadaedbbdcd9c92161cd7dab9ce1ec3684d3
    Merge: 398c879 fbad4e0
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue Mar 21 08:27:42 2017 +0000
    
        Merge branch 'master' into poplar-plugin
    
    commit c7b6b283c7acc8d448d9d9eb79c6a8c8fb405082
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue Mar 21 08:19:03 2017 +0000
    
        Adding plugin-neutral system for loading XLA plugins into unit
        test framework
    
    commit 398c879126d7be5bde0681c424f3fd7913aed6a2
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon Mar 20 10:57:51 2017 +0000
    
        Remove reference to poplar from main TF stream executor
    
    commit 7bfc16b3f01793474890605e033b828c60c91546
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon Mar 20 10:52:26 2017 +0000
    
        Move poplar_platform_id to a driver local place
    
    commit b2472224129aa9baabf485437dae6e7ee78bcf1e
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon Mar 20 10:12:10 2017 +0000
    
        Remove some unnecessary changes
    
    commit a23bde0b35380d8e8cb1d4c0f70c3edf17c7c917
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Sun Mar 19 16:24:27 2017 +0000
    
        Use header-only rules from XLA
    
    commit db2fb685ae3a4fdc6d7f6d7663f8e5dd10cdf580
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Sun Mar 19 16:24:07 2017 +0000
    
        Adding header-only rules to native XLA
    
    commit f304c38fb90e7250f4c154074e4b739a10c5c4bc
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Sat Mar 18 09:40:38 2017 +0000
    
        Remove unnecessary header includes
    
    commit 5b84dd92fccc229c0c945e94329324c59bcd4af8
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Sat Mar 18 09:39:35 2017 +0000
    
        Remove debug from packaging script
    
    commit 615a64857507d2a29958c0a715a6c6f51eb22a26
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Fri Mar 17 17:41:56 2017 +0000
    
        Ensure that the loader works from any directory
    
    commit c38d91fea9fd4f20021f7d200880df13323080eb
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Fri Mar 17 16:53:50 2017 +0000
    
        Adding pip installer
    
    commit d012e3ddf479061c35862de96e0b5c8bb524197a
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Thu Mar 16 12:06:37 2017 +0000
    
        Clean some dependencies
    
    commit 69cd3bbc899d950cbccdc067c8b58740dc8660e5
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Thu Mar 16 11:33:21 2017 +0000
    
        Don't try calling install_name_tool if not present
    
    commit 7fd51c2ab7dea21b3af98d34ce82f07d325a8a98
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Thu Mar 16 11:25:56 2017 +0000
    
        Adding exported symbols to the linux script too
    
    commit 201cb94dc7c4648432677d4d27ed6408b14673d2
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue Mar 14 10:29:40 2017 +0000
    
        Add extra op support to match current head of XLA
    
    commit 25a79a3c4d360d00fc4a0de474cc8560b50a55da
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue Mar 14 10:16:46 2017 +0000
    
        Fix interface to match new XLA executable
    
    commit 34c21edf42eb3b6d0672fa17e2df88b39737f215
    Merge: e233fd5 60ef131
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon Mar 13 15:58:24 2017 +0000
    
        Merge branch 'master' into poplar-plugin
    
    commit e233fd5cb30162963b1530e04d2cd503fd2a1909
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon Mar 13 14:39:46 2017 +0000
    
        Reverse order of poplar Copy arguments to match the new interface
    
    commit fbff48d0b97e52b246227453296a96ae4de625ca
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon Mar 13 14:30:47 2017 +0000
    
        Put the Graph prog file finder into the right namespace
    
    commit a50742a4442b9861eeb44b2c4799f52b79b3c2bd
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon Mar 13 13:37:30 2017 +0000
    
        Use the new graph program interface
    
    commit d4f6d9526cf06e4d6c47524b28691d0c8fc7c90a
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Wed Mar 8 09:45:17 2017 +0000
    
        Add the unsafe variable read op registration
    
    commit e7fae222a2bc2b6ecc7774b1604d53e71b8b4cfd
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue Mar 7 15:23:33 2017 +0000
    
        Include another protobug symbol
    
    commit 71a23828b638a8ffab0bf8a46bc4b93f70cfeb5a
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue Mar 7 13:53:46 2017 +0000
    
        Add select and scatter
    
    commit 6381510024efbf0ac8afd771bbb3efe96be2db68
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue Mar 7 13:53:09 2017 +0000
    
        Move the unary/binary op lookup to the maths_ops file
    
    commit b96c726055b32428fc2771684c4479f86916d5a1
    Merge: 5e029b2 bb112d3
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Tue Mar 7 08:29:06 2017 +0000
    
        Merge branch 'poplar-plugin' of phabricator.sourcevertex.net:diffusion/TENSORFLOW/tensorflow into poplar-plugin
    
    commit 5e029b25267097d0a74ff920b1150fc63ea0cd7d
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon Mar 6 16:02:21 2017 +0000
    
        Syncing list of supported ops with the XLA CPU list
    
    commit 2e4cbae45d5229a744a81814f9c1011d137d1f9b
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon Mar 6 14:12:26 2017 +0000
    
        Update to bring API in line with recent XLA base changes
    
    commit 0446661f2e6c41c93b19deddd5f0d2e075cb2458
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon Mar 6 09:47:50 2017 +0000
    
        Use expanding preprocessor macro for reduction ops
    
    commit 94db6d1be30f0e2619a5bb4143003c5ca552c285
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Thu Mar 2 10:55:42 2017 +0000
    
        Fix error in layout of the kernel for convolution
    
    commit 863ef6c2250aee1c219648ba13e0064b3b3b0322
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Thu Mar 2 09:08:49 2017 +0000
    
        Restrict protobuf to the minimum set required for loading the plugin
    
    commit c3f745cb71144ba6bb5ce51babba268f66a30875
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Wed Mar 1 17:49:06 2017 +0000
    
        Add random op
    
    commit 2d95cf2f4d20e57a0c6fac42c2f0096c383c8a87
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Wed Mar 1 15:51:36 2017 +0000
    
        Correct windowed reduce for left side padding
    
    commit bd3c1e53f309ef75401b58606bc452bf2d2b97b8
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Wed Mar 1 15:25:09 2017 +0000
    
        Add strided reduce operation
    
    commit b7bc14f135d66c353680280ae2e78ce5866feff5
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Wed Mar 1 09:41:05 2017 +0000
    
        Add convolution op (2d only, no dilated conv)
    
    commit 8d3b4f0ef0babf6460d18f7a01c61a024019cdda
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon Feb 27 17:23:27 2017 +0000
    
        Add int32 support to device, and prevent int64 indices when device doesn't support them
    
    commit 3b66332aa4956f9a89d80085f6fd3f0873d3418c
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon Feb 27 16:58:09 2017 +0000
    
        Add int64 to the list of supported types - internally map it to int32
    
    commit 7e3f43f315a836d6ca272df517bef294047cac31
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Wed Jan 25 11:01:04 2017 +0000
    
        Poplar plugin, including support for most binary and unary ops
    
    commit bb112d3a9d9e3f00951dccdc4c972c6f82232391
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon Mar 6 16:02:21 2017 +0000
    
        Syncing list of supported ops with the XLA CPU list
    
    commit f76b39202054b63e6ba33137260a5e44a136c420
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon Mar 6 14:12:26 2017 +0000
    
        Update to bring API in line with recent XLA base changes
    
    commit 3858fb718e1ead27da73c1f89bb107d48ed004cf
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon Mar 6 09:47:50 2017 +0000
    
        Use expanding preprocessor macro for reduction ops
    
    commit 85addfc67ba482f1e63b08c497c0eabb5570003c
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Thu Mar 2 10:55:42 2017 +0000
    
        Fix error in layout of the kernel for convolution
    
    commit a0c18947ebbe5fdccdebd20eeeac505d448ca0fd
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Thu Mar 2 09:08:49 2017 +0000
    
        Restrict protobuf to the minimum set required for loading the plugin
    
    commit 7177942c674b3504fd70381eebbdd917054c8c34
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Wed Mar 1 17:49:06 2017 +0000
    
        Add random op
    
    commit 7a666ead8f87b8c56c83d4f44a3455f5932ac3e4
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Wed Mar 1 15:51:36 2017 +0000
    
        Correct windowed reduce for left side padding
    
    commit 68f5f5e529c8775c2f3720743941da36052a86a0
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Wed Mar 1 15:25:09 2017 +0000
    
        Add strided reduce operation
    
    commit 3c47a48334dd296b04eb3106eeedd0b09c177379
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Wed Mar 1 09:41:05 2017 +0000
    
        Add convolution op (2d only, no dilated conv)
    
    commit a1887b9fc336b498c584ce7748d8516e4292a1a0
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon Feb 27 17:23:27 2017 +0000
    
        Add int32 support to device, and prevent int64 indices when device doesn't support them
    
    commit c207d8876613eeca89e2a40ba3947fb169a30da2
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Mon Feb 27 16:58:09 2017 +0000
    
        Add int64 to the list of supported types - internally map it to int32
    
    commit aeb4f0451e6ca39b83a0bd25438aa88856ecc0c9
    Author: DavidNorman <davidn@graphcore.ai>
    Date:   Wed Jan 25 11:01:04 2017 +0000
    
        Poplar plugin, including support for most binary and unary ops

commit d48e0d2e1883be002bec72c2388998c77e61fbee
Author: William Chargin <wchargin@google.com>
Date:   Tue Jun 13 14:27:50 2017 -0700

    Create a standalone tf-runs-selector
    
    This change creates a `tf-runs-selector` component for selecting multiple
    runs, and implements it on the scalars dashboard as proof of concept. It
    fulfills the same functionality as the existing `tf-run-selector` (note
    the singular), but with a different and simpler API: it takes no input
    and produces as output a list of selected runs. It uses a centralized
    runs store as its source of truth; this will facilitate synchronizing
    all run selectors to the same set of runs.
    
    It currently behaves the same way as `tf-run-selector` with the
    exception of the order of runs: this new component sorts the runs, while
    the old component did not (so it was getting them in arbitrary order
    from the `/runs` endpoint). It seems like sorting them is a good
    idea---prefer determinism unless there's a good reason---but this will
    result in a bit of drift among plugins with the old and new selectors in
    this transition period. To combat that, I've made the color scale sort
    its domain, so that at least the colors are consistent. (I don't see a
    reason not to keep this in the final version, either.)
    
    PiperOrigin-RevId: 158898890

commit b0852317b1e54ad6ab6cc462fdd3f687f158c338
Author: Shanqing Cai <cais@google.com>
Date:   Sat Jun 10 21:00:07 2017 -0700

    tfdbg: reduce test code boilerplate and clean up exceptions
    
    * debug_data.py simplify the logic of detecting nonexistent node names by pulling the logic into _infer_device_name()
    * session_debug_testlib.py: create helper "_debug_run_and_get_dump()" to reduce boilerplate
    
    PiperOrigin-RevId: 158635021

commit 1b5235fd897f7ea5cffc715300f67b4dc852fa27
Author: Jonathan Hseu <jhseu@google.com>
Date:   Fri Jun 9 10:37:18 2017 -0700

    Merge changes from github.
    END_PUBLIC
    
    ---
    Commit f0e185d1f authored by Benoit Steiner<bsteiner@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Better handle nodes with a variable number of outputs
    
    PiperOrigin-RevId: 158435028
    
    ---
    Commit bc3e20807 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Remove unused BUILD dependencies
    
    PiperOrigin-RevId: 158431059
    
    ---
    Commit a0c80e4d5 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Delete unnecessary (mistakenly duplicated) logging message.
    
    PiperOrigin-RevId: 158428506
    
    ---
    Commit b6ad1d747 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Adds DNN-only tests for DNNLinearCombinedClassifier.
    
    PiperOrigin-RevId: 158423119
    
    ---
    Commit ddbb58034 authored by Shanqing Cai<cais@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Remove unnecessary pylint disable
    
    PiperOrigin-RevId: 158416140
    
    ---
    Commit fcaa724e2 authored by Luke Iwanski<luke@codeplay.com>
    Committed by gunan<gunan@google.com>:
    [OpenCL] Cleans pack and unpack ops (#10336)
    
    * [OpenCL] Cleans pack op
    
    * [OpenCL] Cleans unpack op
    
    ---
    Commit 2f53cacb2 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fix a test failure of quantization_utils_test on ASAN
    
    PiperOrigin-RevId: 158414538
    
    ---
    Commit 50b2f951c authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Update ops-related pbtxt files.
    
    PiperOrigin-RevId: 158413455
    
    ---
    Commit 1e90b78e9 authored by Brennan Saeta<saeta@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add CacheDataset ops.
    
    Some input pipelines may pull down data from remote webservers or perform
    expensive processing. In order to avoid extraneous work, we now support
    caching the dataset (e.g. on disk).
    
    PiperOrigin-RevId: 158411901
    
    ---
    Commit e16cd2ede authored by Taehoon Lee<taehoonlee@snu.ac.kr>
    Committed by gunan<gunan@google.com>:
    Fix typos (#10533)
    
    ---
    Commit 50d80ddf9 authored by Jonathan Hseu<jhseu@google.com>
    Committed by Jonathan Hseu<jhseu@google.com>:
    Fix fft_ops_test.py for CPU
    
    ---
    Commit d35cbbb44 authored by Mustafa Ispir<ispir@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add weight-column support to the heads.
    
    PiperOrigin-RevId: 158409180
    
    ---
    Commit 7fb52cd54 authored by Justin Lebar<jlebar@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Don't crash when displaying XLA metrics if they happen to be negative.
    
    PiperOrigin-RevId: 158407664
    
    ---
    Commit 12a7a752a authored by Jianfei Wang<me@thinxer.com>
    Committed by Jonathan Hseu<vomjom@vomjom.net>:
    Add a tip for tf.train.LoggingTensorHook (#10237)
    
    `INFO` logs are not printed by default unless in IPython. Add a friendly tip for newcomers.
    ---
    Commit 216dcbf1e authored by Luke Iwanski<luke@codeplay.com>
    Committed by Jonathan Hseu<vomjom@vomjom.net>:
    [OpenCL] Cleans reduction ops (#10340)
    
    * [OpenCL] Cleans reduction_ops_max.cc
    
    * [OpenCL] Cleans reduction_ops_mean.cc
    
    * [OpenCL] Cleans reduction_ops_min.cc
    
    * [OpenCL] Cleans reduction_ops_prod.cc
    
    * [OpenCL] Cleans reduction_ops_sum.cc
    
    ---
    Commit 2b351062a authored by Androbin<robin.richtsfeld@gmail.com>
    Committed by Jonathan Hseu<vomjom@vomjom.net>:
    Improve docs for selective registration headers (#10351)
    
    * Improve docs for selective registration headers
    
    progressing #10299
    
    * Update print_selective_registration_header.py
    
    * Mention both flags
    
    -DSELECTIVE_REGISTRATION and -DSUPPORT_SELECTIVE_REGISTRATION
    
    ---
    Commit ee919510f authored by Yun Peng<pcloudy@google.com>
    Committed by gunan<gunan@google.com>:
    Re-enable some python tests in Windows Bazel build (#10526)
    
    ---
    Commit b0e881457 authored by Androbin<robin.richtsfeld@gmail.com>
    Committed by gunan<gunan@google.com>:
    [Bash] Declare and assign separately (#10509)
    
    As proposed by static analysis tool:
    https://github.com/koalaman/shellcheck/wiki/SC2155
    ---
    Commit 284901b08 authored by Androbin<robin.richtsfeld@gmail.com>
    Committed by gunan<gunan@google.com>:
    [Bash] Remove unquoting quotes (#10506)
    
    As proposed by static analysis tool:
    https://github.com/koalaman/shellcheck/wiki/SC2027
    ---
    Commit 2a1f11556 authored by ksellesk<zhengdachuan200305@gmail.com>
    Committed by ksellesk<zhengdachuan200305@gmail.com>:
    Fix AttributeError in resnet.py
    
    There is no function tf.softmax() in Tensorflow 1.x.
    
    When running the old code, Python interpreter complains:
    
    File "resnet.py", line 152, in res_net_model
    prediction, loss = res_net(x, y)
    File "resnet.py", line 148, in res_net
    return tf.softmax(logits), loss
    AttributeError: 'module' object has no attribute 'softmax'
    
    ---
    Commit 1d68f729b authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Remove unneeded BUILD dependency
    
    PiperOrigin-RevId: 158391996
    
    ---
    Commit 08ed32dbb authored by Yun Peng<pcloudy@google.com>
    Committed by gunan<gunan@google.com>:
    Windows: Make TensorFlow build without --cpu=x64_windows_msvc (#10466)
    
    * Windows: Make TensorFlow build without --cpu=x64_windows_msvc
    
    Since from Bazel 0.5.0, MSVC toolchain became the default toolchain on
    Windows. So --cpu=x64_windows_msvc is not required as long as we adjust
    the BUILD files in TensorFlow.
    
    --cpu=x64_windows_msvc is also supported for now, but is depracated.
    The configuration for cpu value x64_windows_msvc is a duplicate of
    x64_windows, which should be removed in the future.
    
    * Fix breakage on macOS
    
    ---
    Commit 02dbe153a authored by Androbin<robin.richtsfeld@gmail.com>
    Committed by gunan<gunan@google.com>:
    [Bash] Simplify Conditional (#10503)
    
    ---
    Commit c07bc581f authored by Androbin<robin.richtsfeld@gmail.com>
    Committed by gunan<gunan@google.com>:
    [Bash] Prefer read -a to split path (#10508)
    
    As proposed by static analysis tool:
    https://github.com/koalaman/shellcheck/wiki/SC2207
    ---
    Commit 0a389674d authored by Androbin<robin.richtsfeld@gmail.com>
    Committed by gunan<gunan@google.com>:
    [Bash] Prefer [ p ] && [ q ] over [ p -a q ] (#10507)
    
    As proposed by static analysis tool:
    https://github.com/koalaman/shellcheck/wiki/SC2166
    ---
    Commit 87a008ec3 authored by Jonathan Hseu<vomjom@vomjom.net>
    Committed by gunan<gunan@google.com>:
    Delete non-deterministic testEmpty() test (#10512)
    
    ---
    Commit 3a2971bd8 authored by Frank Chen<frankchn@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Adds the base for ClusterResolvers, a new way of communicating with and retrieving cluster information for running distributed TensorFlow.
    
    Implementations of this class would eventually allow users to simply point TensorFlow at a cluster management endpoint, and TensorFlow will automatically retrieve the host names/IPs and port numbers of TensorFlow workers from the cluster management service.
    
    PiperOrigin-RevId: 158358761
    
    ---
    Commit 28b4e7f04 authored by Jonathan Hseu<vomjom@vomjom.net>
    Committed by gunan<gunan@google.com>:
    Disable stage_op_test and map_stage_op_test (#10516)
    
    ---
    Commit 390e57a75 authored by Yan (Asta) Li<yanastali@users.noreply.github.com>
    Committed by Benoit Steiner<benoitsteiner@users.noreply.github.com>:
    Check EIGEN_MAX_ALIGN_BYTES to prevent mod-by-0 (#10380)
    
    * Check EIGEN_MAX_ALIGN_BYTES to prevent mod-by-0
    
    If EIGEN_MAX_ALIGN_BYTES is set to 0, alignment checks that mod by EIGEN_MAX_ALIGN_BYTES fail at runtime.
    
    * Returns true, as in tensorflow/core/framework/tensor.h
    * Update unit tests
    
    * Enable tests only if EIGEN_MAX_ALIGN_BYTES > 0
    
    ---
    Commit cd5ac40b3 authored by Peter Hawkins<phawkins@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [XLA] Update LLVM to upstream revision r304927.
    Add LLVM build rules for the LLVM AMDGPU backend, commented out by default. Fixes issue #10437.
    
    PiperOrigin-RevId: 158351480
    
    ---
    Commit 91cb809bd authored by David Norman<DavidNorman@users.noreply.github.com>
    Committed by Jonathan Hseu<vomjom@vomjom.net>:
    [XLA] Add ability to run the XLA unit tests against a different device (#9759)
    
    * Add ability to run the XLA unit tests against a different device
    
    * Allow for multiple extra backend devices
    
    * Correct merge error
    
    * Include options for additional tags
    
    ---
    Commit aff4d124b authored by Yuxin Wu<ppwwyyxxc@gmail.com>
    Committed by Jonathan Hseu<vomjom@vomjom.net>:
    Compare base_dtype instead of dtype in piecewise_constant (#10280)
    
    * Compare base_dtype instead of dtype in piecewise_constant
    
    Compare base_dtype instead of dtype in piecewise_constant. Fix #10086
    
    * add unit test
    
    * Small lint fix and comment
    
    ---
    Commit 845539f98 authored by Jianwei Xie<xiejw@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add evaluation test for linear classifier (n==2 or n >2).
    
    PiperOrigin-RevId: 158340296
    
    ---
    Commit 7c46214ab authored by Jonathan Hseu<vomjom@vomjom.net>
    Committed by GitHub<noreply@github.com>:
    Fix numpy 1.13 incompatibilities (#10501)
    
    * Fix numpy 1.13 incompatibilities
    
    * Skip tests with numpy 1.13.0
    
    ---
    Commit 4572c41df authored by gunan<gunan@google.com>
    Committed by Jonathan Hseu<vomjom@vomjom.net>:
    A few changes to kernel_tests. (#10502)
    
    * Disable reader_ops_test on windows.
    
    * Run buildifier on kernel_tests/BUILD
    
    * Mark map_stage_op_test as large.
    
    * Set the size of stage_op_test to large
    
    ---
    Commit 892293d98 authored by Brennan Saeta<saeta@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Set a default for datasets end_of_sequence.
    
    While all datasets carefully set the end_of_sequence to true at the
    appropriate time, some datasets might forget to set it to false in the normal
    case. In order to avoid potential undefined behavior, we set the
    end_of_sequence variable to be false by default.
    
    PiperOrigin-RevId: 158337799
    
    ---
    Commit 187404eac authored by Benoit Steiner<bsteiner@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Setup the env to since ops such as MatchFileOp rely on it.
    
    PiperOrigin-RevId: 158336344
    
    ---
    Commit 2741561c8 authored by Justine Tunney<jart@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fix up vz_projector script structure
    
    We now make sure scripts and HTML imports are declared in the correct
    places. In the future, pedantically listing script tags should not be
    necessary.
    
    PiperOrigin-RevId: 158334306
    
    ---
    Commit beeaade46 authored by Kay Zhu<kayzhu@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Resubmit a reverted change. Original description:
    
    [XLA] Enable HloEvaluator for constant folding, also merged a few operations
    from hlo_constant_folding to hlo_evaluator.
    
    Additionally:
    - In ShapeUtil::ForEachIndex:
        * fix a bug where visitor is called when the shape has zero elements (e.g., F32{1,0})
        * added test case for ForEachIndex.
    
    - In HloEvaluator:
        * Instead of copying and caching a Constant instruction, return the literal directly if the instruction is constant.
        * Fix an issue where TUPLE and OPAQUE primitives are not keyed in the templated typed_visitor.
        * Use (fixed) LiteralUtil::Populate to populate resulting literal, fixes the preexisting bug in the evaluator where R0 and shape with zero size dimensions are not handled.
        * Refactor ElementWiseUnaryOp and HandleCompare to be templatized on the operand's type.
        * Refactor IsFinite to be top level since it is only applicable to floats and the return type is always boolean.
        * Change from std::remainder to std::fmod for kRemainder to be compliant with existing XLA behavior.
        * Change from std::max and std::min to std::fmax and std::fmin to handle NaNs.
        * Minor comments fix.
    
    PiperOrigin-RevId: 158330052
    
    ---
    Commit b94540e6f authored by Toby Boyd<tobyboyd@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    tf.layers.conv2d use_bias=True to use nn.bias_add
    
    PiperOrigin-RevId: 158326493
    
    ---
    Commit 379aa9911 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Go: Update generated wrapper functions for TensorFlow ops.
    
    PiperOrigin-RevId: 158325855
    
    ---
    Commit 4e529f0f1 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Update ops-related pbtxt files.
    
    PiperOrigin-RevId: 158325293
    
    ---
    Commit 0a9d2dac0 authored by Yuefeng Zhou<yuefengz@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add a util function in virtual placer to return canonicalized device string, which can be used to fix the node's device field before passing them to the maxcut algorithm.
    
    PiperOrigin-RevId: 158322753
    
    ---
    Commit 2d8da1d9b authored by Daniel Ylitalo<daniel@blodan.se>
    Committed by gunan<gunan@google.com>:
    Recognize CPU core count in FreeBSD (#10490)
    
    ---
    Commit c19e6cac0 authored by Peter Hawkins<phawkins@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [TF:XLA] Initial implementation of TensorArray ops.
    
    The XLA implementation of TensorArrays is more restrictive than regular TensorArrays:
    * XLA TensorArrays must have dynamic_size=False.
    * all elements in an XLA TensorArray must have the same shape.
    * writes always add their values to any existing values; neither reads nor writes ever issue errors. Out-of-bounds writes currently wrap.
    
    Refactor Variable handling in the TF/XLA bridge. Use a XlaVariable* to refer to variables inside compilation rather than a numerical ID. Allow for variables that don't correspond to variables known to the user. Also use XlaVariable to handle TensorArrays.
    
    PiperOrigin-RevId: 158322041
    
    ---
    Commit b5e8d3086 authored by Peter Hawkins<phawkins@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [TF:XLA] Refactor randomized tests to allow testing of larger inputs without running out of memory.
    
    PiperOrigin-RevId: 158321431
    
    ---
    Commit 5d90bbaac authored by Kay Zhu<kayzhu@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [XLA] Disable constant_folding in test base, so that intended test code paths
    would not be elided by constant_folding pass.
    
    PiperOrigin-RevId: 158317641
    
    ---
    Commit 036ce8ba6 authored by Luke Iwanski<luke@codeplay.com>
    Committed by gunan<gunan@google.com>:
    [OpenCL] Cleans dense_update_ops (#10335)
    
    * [OpenCL] Cleans dense_update_ops
    
    * Acts on feedback from: #10335#discussion_r120536460
    
    ---
    Commit 85f968125 authored by Luke Iwanski<luke@codeplay.com>
    Committed by gunan<gunan@google.com>:
    [OpenCL] Cleans cast operation (#10330)
    
    * [OpenCL] Removes not needed typedef for SYCLDevice
    
    * [OpenCL] Fixes formatting
    
    * [OpenCL] use SYCLDevice for int32 cast case
    
    ---
    Commit bff5e72da authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fix typo.
    
    PiperOrigin-RevId: 158310742
    
    ---
    Commit 38249d6be authored by Shanqing Cai<cais@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Swap the order of NanTensorHook and custom hooks
    
    to ensure that when the training encounteres NaN's in the loss function, user-supplied hooks such as tf_debug.LocalCLIDebugHook can still be used to debug the root cause of the numeric issues.
    
    PiperOrigin-RevId: 158310249
    
    ---
    Commit 599727c65 authored by Eli Bendersky<eliben@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [XLA] Propagate debug option flags to hlo_test_base.
    
    Specific HLO tests have to replace the generic test_main target with a manual
    main() that invokes RUN_ALL_TESTS.
    
    To get access to a module with debug options set up, a new convenience method
    is created on HloTestBase.
    
    Initially algebraic_simplifier_test is modified as a canary; in a followup
    we'll convert all HLO tests to this approach.
    
    PiperOrigin-RevId: 158309488
    
    ---
    Commit 0770393e9 authored by Eric Liu<ioeric@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [Tensorboard] Add a trace viewer component to TensorBoard.
    
    We make the trace viewer a separate app; otherwise, there would be dependency
    conflicts (e.g. Polymer) between the trace viewer app and the tensorboard app.
    The trace viewer app would be served by a plugin, and Tensorboard dashboard will integrate trace viewer app using iframe in the
    future.
    
    This CL also added "mominify" support for link import HTML tags in the
    tensorboard home-grown java vulnizer; otherwise, the vulcanized trace viewer code
    would crash the java vulcanizer.
    
    For open-source build, we add a denpendency on the Catapult github repository
    (https://github.com/catapult-project/catapult/tree/master/tracing). We use a bazel genrule to vulcanize a trace viewer binary which is then used in the
    tf-trace-viewer component.
    
    PiperOrigin-RevId: 158309408
    
    ---
    Commit 85e832201 authored by RJ Ryan<rjryan@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Support unknown emit shapes in tf.nn.raw_rnn.
    
    PiperOrigin-RevId: 158308002
    
    ---
    Commit edb5fed7f authored by Mustafa Ispir<ispir@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add label-vocab support to binary logistic head.
    Add assertion that binary classifier label is in range [0., 1.]
    Fixed Classifier Integration tests.
    
    PiperOrigin-RevId: 158307521
    
    ---
    Commit f8e1cf8fa authored by Justine Tunney<jart@google.com>
    Committed by Jonathan Hseu<vomjom@vomjom.net>:
    Open up visibility of tf_imports (#10500)
    
    This also fixes the definition of Clutz.
    ---
    Commit 9fd7cf054 authored by Luke Iwanski<luke@codeplay.com>
    Committed by Jonathan Hseu<vomjom@vomjom.net>:
    [OpenCL] Cleans relu ops (#10343)
    
    * [OpenCL] register relu ops to gpu types (no half)
    
    * [OpenCL] Removes #undef EIGEN_USE_SYCL
    
    ---
    Commit 09c1455e3 authored by Luke Iwanski<luke@codeplay.com>
    Committed by Jonathan Hseu<vomjom@vomjom.net>:
    [OpenCL] Cleans reverse_op.cc (#10346)
    
    ---
    Commit b7892a30f authored by orome<royl@aldaron.com>
    Committed by Jonathan Hseu<vomjom@vomjom.net>:
    Clarify tf.matmul documentation (#10381)
    
    * Update math_ops.py
    
    * Fix non-ascii character
    
    ---
    Commit 9786b7062 authored by Luke Iwanski<luke@codeplay.com>
    Committed by Benoit Steiner<benoitsteiner@users.noreply.github.com>:
    [OpenCL] Cleans StridedSlice Op (#10314)
    
    * [OpenCL] Cleans StridedSlice Op
    
    * [OpenCL] Removes half from registred types
    
    ---
    Commit f105df047 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    In the CUDA path of depthwise_conv2d, optimize backward filter convolution for images 2 or 4 times smaller than 16x16. Also initialize in_cols from blockDim, to fix the regression caused in CL 157906773.
    
    PiperOrigin-RevId: 158296136
    
    ---
    Commit 492afc2e3 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Go: Update generated wrapper functions for TensorFlow ops.
    
    PiperOrigin-RevId: 158295169
    
    ---
    Commit abe0877ef authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add bazel version check to .configure
    
    PiperOrigin-RevId: 158294569
    
    ---
    Commit b702e7e79 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Update ops-related pbtxt files.
    
    PiperOrigin-RevId: 158294289
    
    ---
    Commit 94085bee7 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Replace std::function object with regular function.
    
    The function is called recursively, and the std::function object had only existed to allow recursion from within a lambda expression. A regular function should be cheaper than a polymorphic function wrapper.
    
    PiperOrigin-RevId: 158292415
    
    ---
    Commit ba656b261 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Use template specialization instead of overloaded methods. This is a more appropriate tool here. NFC
    
    PiperOrigin-RevId: 158292035
    
    ---
    Commit 55f987692 authored by Yutaka Leon<yleon@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
      Make tf.contrib.lookup  python functions use the kernels v2 that uses the resource tensor as handler.
    
    PiperOrigin-RevId: 158291836
    
    ---
    Commit ebae3deba authored by Wei Ho<weiho@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Switch back to max_num_rows_to_load instead of reading slice by slice due to performance regression from network overhead.
    
    Add check when using initializing values to avoid seg fault
    
    PiperOrigin-RevId: 158291218
    
    ---
    Commit 7b4c01794 authored by RJ Ryan<rjryan@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Support numpy-style padding and slicing of tf.spectral.rfft/irfft to match the desired FFT length.
    
    Fixes incorrect RFFT/IRFFT results when fft_length does not match the input dimension.
    
    PiperOrigin-RevId: 158289991
    
    ---
    Commit fdb8e2935 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Update iOS examples to use CocoaPods, and moved to tensorflow/examples/ios
    
    PiperOrigin-RevId: 158289285
    
    ---
    Commit d86167b5f authored by Amit Patankar<amitpatankar@google.com>
    Committed by Amit Patankar<amitpatankar@google.com>:
    Merging rc2 back into master.
    
    ---
    Commit dffea202a authored by Eli Bendersky<eliben@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Clean up some code after previous CL
    
    PiperOrigin-RevId: 158282834
    
    ---
    Commit 7b5302af0 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Adds ability to set a "family" attribute in Tensorflow summaries, which
    controls the "tab name" of the summary that is displayed.
    
    This solution keeps using name_scope to keep names unique, but then prefixes the tag with the family name if provided.
    
    PiperOrigin-RevId: 158278922
    
    ---
    Commit 611c82b5b authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Adds integration test for DNNLinearCombined((Classifier)|(Regressor)).
    
    PiperOrigin-RevId: 158278512
    
    ---
    Commit cc6c91a9a authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Remove a further unused proto header inclusion
    
    PiperOrigin-RevId: 158278026
    
    ---
    Commit 9f17c26ca authored by Mark Heffernan<meheff@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [XLA] Add HloLocation to dataflow analysis.
    Add an HloLocation abstraction to dataflow analysis which indicates where (in the output of what instruction and at which index) an HloValue may appear. Previously only uses were stored with an HLO value where a use is an edge in the HLO graph (instruction, operand number and ShapeIndex).
    
    Also, change the handling of tuple-shaped kSelect instructions when ssa_form is true. Previously a phi value would be created. With this change the the value set instead contains the union of it's inputs identical to the ssa_form=false case.
    
    PiperOrigin-RevId: 158276598
    
    ---
    Commit b9d5e1441 authored by Eli Bendersky<eliben@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [XLA] Start collecting flags for debug options in a single place.
    
    ClientLibraryTestBase will now parse command-line flags for debug options
    automatically, permitting subclasses to override certain options by using
    mutable_debug_options.
    
    main() still has to call AppendDebugOptionsFlags() explicitly before running
    the TF flag parser. In the mean-time, this CL leaves flag handling to the
    current "legacy" approach. However, this is part of a larger plan to move *all*
    debugging flags for XLA into the DebugOptions message and expose them as flags
    from a single place. The other flags (which are not controlling debugging
    options) will have to be propagated more explicitly.
    
    PiperOrigin-RevId: 158276294
    
    ---
    Commit 3b6fe94bb authored by Benoit Steiner<bsteiner@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Properly handle shape nodes that have a preexisting control dependency
    
    PiperOrigin-RevId: 158274845
    
    ---
    Commit 1d67379d5 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Minor cleanup
    
    PiperOrigin-RevId: 158268933
    
    ---
    Commit 41997756c authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Sort header inclusions; define EIGEN_USE_THREADS where headers depend on it.
    
    PiperOrigin-RevId: 158267803
    
    ---
    Commit 85355f015 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add missing header inclusion
    
    PiperOrigin-RevId: 158265934
    
    ---
    Commit 3cf88d390 authored by Gunhan Gulsoy<gunan@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    When GPU is configured, do not require --config=cuda.
    Also fix indentation in configure.
    
    PiperOrigin-RevId: 158232959
    
    ---
    Commit f48673b50 authored by Luke Iwanski<luke@codeplay.com>
    Committed by gunan<gunan@google.com>:
    [OpenCL] Removes ReductionFunctor for SYCLDevice (#10326)
    
    We are using Eigen implementation
    ---
    Commit 1b6453bec authored by Joan Puigcerver<joapuipe@gmail.com>
    Committed by gunan<gunan@google.com>:
    Fixes issue #10258 (#10366)
    
    On CUDA versions previous to 8.0, only __shared__ variables could be declared as static in the device code.
    ---
    Commit cd56a638d authored by Beomsu Kim<123bskim@naver.com>
    Committed by Jonathan Hseu<vomjom@vomjom.net>:
    Fixed wrong range in docstring (#10272)
    
    ---
    Commit d13ae380c authored by Micha? Jastrz?bski<michal.jastrzebski@intel.com>
    Committed by Jonathan Hseu<vomjom@vomjom.net>:
    Fix CMD in Dockerfile (#10444)
    
    Currently Notebook fails execution because default user for this container is root, and unless explicitly allowed, jupyter notebook will not start.
    ---
    Commit 8118ab4ec authored by Simon Perkins<simon.perkins@gmail.com>
    Committed by Jonathan Hseu<vomjom@vomjom.net>:
    Support partial gets in MapStagingArea (#10276)
    
    * Modify map staging area tests
    
    - size from `small` to `medium`
    - introduce 2 shards
    
    * Add partial get support in MapStagingArea
    
    A partial list of tensors in a (key, value) map entry can now be
    requested. Once all tensors associated with the entry are removed,
    it is removed from the map.
    
    * Correct output/indices mismatch errors
    
    * Rename IncompleteTuple to OptionalTuple
    
    * Add partial get test with indices
    
    * Add some more index checks
    
    * Improve stage test case graph creation
    
    Test sessions (and default graphs) are reused by default.
    Create explicit, finalized graphs in each test to prevent
    possible interactions between stateful Staging Areas and
    others ops created in separate tests.
    
    * Make staging area tests small and remove shards
    
    They were originally made 'medium' to ameliorate timeouts in the test
    case, but they usually run in ~1s so they should be small.
    
    * Improve imports
    
    Avoid importing base tensorflow package
    
    * Support both python 2 and python 3 range.
    
    * Set map_stage_op_test to size=large
    
    * Convert the tests to size=medium
    
    ---
    Commit 0df102b0a authored by Androbin<robin.richtsfeld@gmail.com>
    Committed by Jonathan Hseu<vomjom@vomjom.net>:
    Update `configure` script sample (#10455)
    
    The `configure` script was changed regularly since the generation of the sample.
    This PR updates the sample to reflect those changes.
    ---
    Commit f6dc1ac61 authored by Earthson Lu<Earthson.Lu@gmail.com>
    Committed by Jonathan Hseu<vomjom@vomjom.net>:
    MKL_INSTALL_PATH should not be ignore when given (#10180)
    
    * MKL_INSTALL_PATH should not be clear when given
    
    * fix overwrite by default
    
    ---
    Commit 8ad6a036e authored by Asim Shankar<ashankar@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Java: Update Maven release to 1.2.0-rc2
    
    PiperOrigin-RevId: 158212897
    
    ---
    Commit 15eddf035 authored by Fritz Obermeyer<fritz.obermeyer@gmail.com>
    Committed by Jonathan Hseu<vomjom@vomjom.net>:
    Export C API symbols in _pywrap_tensorflow_internal.so (#10469)
    
    * Export C API symbols
    
    * Export C API symbols under config:default
    
    ---
    Commit 754e12668 authored by Luke Iwanski<luke@codeplay.com>
    Committed by Jonathan Hseu<vomjom@vomjom.net>:
    [OpenCL] Removes half concat op registration (#10331)
    
    ---
    Commit cfdc22dee authored by Peng Yu<yupbank@users.noreply.github.com>
    Committed by Jonathan Hseu<vomjom@vomjom.net>:
    fix the error (#10293)
    
    ---
    Commit 58747e357 authored by Joel Hestness<jthestness@gmail.com>
    Committed by Jonathan Hseu<vomjom@vomjom.net>:
    PhiloxRandom: Fix race in GPU fill function (#10298)
    
    * PhiloxRandom: Fix race in GPU fill function
    
    The PhiloxRandom fill kernel for the GPU had race conditions that caused the
    outputs to be non-deterministic. In particular, the code previously executed
    with N GPU threads (# thread contexts per GPU), but it would only advance the
    fill addresses by N-1 stride in each step. This incorrect stride caused the
    0th and N-1st threads to write to the same memory locations, racing for which
    was last to write their common locations. Make the stride equal to the number
    of threads to eliminate the race.
    
    BONUS: By fixing this race, PhiloxRandom constant-sized GPU initializers now
    match CPU initializers.
    
    * Update random_ops_test.py to find race conditions
    
    Increasing the size of arrays in the random_ops_test.py test to manifest
    the race conditions to be resolved.
    
    ---
    Commit 2cbcda08f authored by Androbin<robin.richtsfeld@gmail.com>
    Committed by Jonathan Hseu<vomjom@vomjom.net>:
    Fixed formatting in Linux install guide (#10353)
    
    Formatting issues were introduced in PR #8825, commit f30918b3694afe844990cbddc82e27e023d88856
    ---
    Commit ab5f38560 authored by Lakshay Garg<lakshayg@outlook.in>
    Committed by Jonathan Hseu<vomjom@vomjom.net>:
    Fixed typos in documentation & READMEs (#10365)
    
    ---
    Commit 94dc1dbfa authored by Christos Nikolaou<cNikolaou@users.noreply.github.com>
    Committed by Jonathan Hseu<vomjom@vomjom.net>:
    Enable figures in the tfprof README.md (#10372)
    
    ---
    Commit 3018d4678 authored by Taehoon Lee<taehoonlee@snu.ac.kr>
    Committed by Jonathan Hseu<vomjom@vomjom.net>:
    Fix typos (#10386)
    
    ---
    Commit c5f3c6171 authored by Daniel Rasmussen<drasmuss@users.noreply.github.com>
    Committed by Jonathan Hseu<vomjom@vomjom.net>:
    Fix unbatch for Datasets with multiple elements (#10401)
    
    * Fix unbatch for datasets with multiple elements
    
    * fixup! pylint (indent two spaces instead of four)
    
    ---
    Commit 8b065bc10 authored by Yong Tang<yong.tang.github@outlook.com>
    Committed by Jonathan Hseu<vomjom@vomjom.net>:
    Fix unaligned args in api_docs/python/tf/contrib/learn/Evaluable (#10423)
    
    This commit fixes unaligned args in api_docs/python/tf/contrib/learn/Evaluable
    
    Signed-off-by: Yong Tang <yong.tang.github@outlook.com>
    ---
    Commit 8f89b654f authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Profile memory usage in VirtualScheduler and report peak memory usage.
    To do so, NodeState now handles different output ports of a node (in case
    a node has multiple outputs).
    
    Also, VirtualScheduler code is cleaned up with more comments.
    
    PiperOrigin-RevId: 158209068
    
    ---
    Commit 0ea0bf5aa authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add a frontend for viewing the first ops that exhibit bad values (NaN, +/- Inf).
    
    This helps the user identify problematic ops. Also moved the debugger data logic within tf-graph-info into a new tf-graph-debugger-data-card component.
    
    PiperOrigin-RevId: 158208679
    
    ---
    Commit ed47ecf2d authored by Luke Iwanski<luke@codeplay.com>
    Committed by Benoit Steiner<benoitsteiner@users.noreply.github.com>:
    [OpenCL] Cleans variable op (#10333)
    
    * [OpenCL] Cleans variable op
    
    * Fixes formatting and float / double -> GPU_NUMBER_TYPES_NO_HALF
    
    ---
    Commit 9b2c1af63 authored by Luke Iwanski<luke@codeplay.com>
    Committed by Benoit Steiner<benoitsteiner@users.noreply.github.com>:
    [OpenCL] Improves device reporting (#10462)
    
    Prints: id, type, name, vendor and profile of the device
    ---
    Commit 7f5384dcc authored by Alexandre Passos<apassos@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Making load() work for resource variables.
    
    PiperOrigin-RevId: 158205361
    
    ---
    Commit 05412bd36 authored by Mark Heffernan<meheff@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [XLA] Simplify Shape traversal visitors.
    Simplify shape traversal visitors in ShapeUtil and ShapeTree. Add a non-Status form because most uses of the traversal methods do not use it, and remove is_leaf parameter from ShapeTree.ForEach* as it is not frequently used.
    
    PiperOrigin-RevId: 158201574
    
    ---
    Commit 69c9365b4 authored by Mustafa Ispir<ispir@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Extracted linear estimator testing utils to be reused by dnn-linear-combined.
    Added tests for linear part of dnn-linear-combined estimator.
    
    PiperOrigin-RevId: 158200827
    
    ---
    Commit 65ce8c723 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add arrowheads to dataflow edges.
    Make reference edges orange.
    Remove animations from tooltips in the graph documentation.
    
    Previously, arrowheads were only added to reference edges (because we assumed users knew about the convention that arrowless edges flow upwards). That decision nicely reduces clutter. However, recently, some internal and external folks have expressed confusion, and so I want to try adding arrowheads to all data flow edges. And make the reference edges starkly different.
    
    See #10428
    
    PiperOrigin-RevId: 158195388
    
    ---
    Commit bf4c3dd6b authored by gunan<gunan@google.com>
    Committed by GitHub<noreply@github.com>:
    Revert "Fix patching issue on Windows" (#10472)
    
    This reverts commit 47e6785646a1266f01a1a570bd799f8518ee2997.
    
    ---
    Commit b49515539 authored by David Soergel<soergel@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add only string constants to ASSET_FILEPATHS collection.
    
    PiperOrigin-RevId: 158192152
    
    ---
    Commit 51acad09c authored by Sergio Guadarrama<sguada@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add tests with different delta to huber_loss.
    
    PiperOrigin-RevId: 158191361
    
    ---
    Commit a4e7b7add authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fixes a bug in setting default optimizers for DNNLinearCombinedClassifier.
    
    PiperOrigin-RevId: 158190192
    
    ---
    Commit ddd67e333 authored by Luke Iwanski<luke@codeplay.com>
    Committed by Jonathan Hseu<vomjom@vomjom.net>:
    [OpenCL] Cleans reshape.cc (#10347)
    
    * [OpenCL] Cleans reshape.cc
    
    * Removes half and complex numbers.
    
     Half is extension and complex numbers needs implementation in Eigen first
    
    ---
    Commit 3ca653304 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Update ops-related pbtxt files.
    
    PiperOrigin-RevId: 158186454
    
    ---
    Commit 8cda8660e authored by Luke Iwanski<luke@codeplay.com>
    Committed by gunan<gunan@google.com>:
    [OpenCL] Cleans sendrecv_ops.cc (#10345)
    
    ---
    Commit 6915bb919 authored by Luke Iwanski<luke@codeplay.com>
    Committed by gunan<gunan@google.com>:
    [OpenCL] Cleans Slice op (#10341)
    
    ---
    Commit 54998b45d authored by Michele Colombo<m-colombo@users.noreply.github.com>
    Committed by Jonathan Hseu<vomjom@vomjom.net>:
    BasicRNNCell comment fix (#10467)
    
    ---
    Commit df5906fb7 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Mark saver/restore ops that depend on filesystem as stateful to disable them
    from being folded into a constant by graph optimizer.
    
    PiperOrigin-RevId: 158182282
    
    ---
    Commit 96cb4d182 authored by Sergio Guadarrama<sguada@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add support of scale_l1 == 0. or scale_l2 == 0 to l1_l2_regularizer.
    Added tests.
    
    PiperOrigin-RevId: 158179790
    
    ---
    Commit b65eb3f9b authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Speed up atrous_convolution_test by combining evaluations.
    
    To make this test run faster (and prevent it from timing out under
    certain circumstances), this change combines all evaluations for each
    test method into a single call to Session.run, to eliminate overhead.
    
    This reduces the test time from about 40 seconds to 10 seconds.
    
    RELNOTES: n/a
    PiperOrigin-RevId: 158175227
    
    ---
    Commit b440abce7 authored by Gao, Xiang<qasdfgtyuiop@gmail.com>
    Committed by Rasmus Munk Larsen<rmlarsen@google.com>:
    add Cuda{2D,3D}LaunchConfig that maximizes occupancy (#10032)
    
    * add Cuda{2D,3D}LaunchConfig that max occupancy
    
    * remove default val, check input<=0
    
    * add max size check
    
    * fix typo
    
    * tests, docs, and related changes
    
    * build the test
    
    * buildify
    
    * cudaOccupancy... call check success, and style fix
    
    ---
    Commit 81cf61fdb authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Initialize tensor in graph_properties_test, to avoid msan complaint.
    
    PiperOrigin-RevId: 158169374
    
    ---
    Commit cabc5c35c authored by Eli Bendersky<eliben@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [XLA] Add xla_disable_hlo_passes to DebugOptions
    
    Also add a SetDebugOptions method to ClientLibraryTestBas; this lets us set
    debug options in tests by calling it.
    
    As an example, this CL removes the current way of passing
    xla_disable_hlo_passes programmatically in tests - it used to employ a special
    constructor parameter which is no longer required.
    
    PiperOrigin-RevId: 158169006
    
    ---
    Commit 187d23337 authored by Luke Iwanski<luke@codeplay.com>
    Committed by gunan<gunan@google.com>:
    [OpenCL] Cleans Pad op (#10339)
    
    ---
    Commit e8bc38ef6 authored by gunan<gunan@google.com>
    Committed by GitHub<noreply@github.com>:
    Fix test failures on windows. (#10470)
    
    ---
    Commit 2b3535c64 authored by David Soergel<soergel@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Minor docstring fix for build_parsing_serving_input_receiver_fn
    
    PiperOrigin-RevId: 158163615
    
    ---
    Commit e55f2e036 authored by Benoit Steiner<bsteiner@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Propagates constants through switch nodes.
    
    PiperOrigin-RevId: 158163537
    
    ---
    Commit b01d4b905 authored by Jacques Pienaar<jpienaar@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [XLA] Remove outdated todo.
    
    PiperOrigin-RevId: 158161411
    
    ---
    Commit 7125733d7 authored by William Chargin<wchargin@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Create a set of sample data for the audio plugin
    
    This implements a simple tone generator, with sine waves, square waves,
    and triangle waves, plus two simple combinations of sine waves. The step
    value is used to control the frequency.
    
    PiperOrigin-RevId: 158160889
    
    ---
    Commit dc81a2420 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Updates to the WALSMatrixFactorization estimator:
    - Add a completed_sweeps variable to keep track of sweeps that have been completed during training.
    - Add a StopAtSweepHook, which can request a stop after completing a specified number of sweeps.
    
    PiperOrigin-RevId: 158156347
    
    ---
    Commit 74220616c authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Set device cores and frequency in op_level_cost_estimator_test,
    to avoid asan error about assigning inf to int64 (this comes
    in from a divide-by-0).
    
    PiperOrigin-RevId: 158155488
    
    ---
    Commit 47e678564 authored by Yun Peng<pcloudy@google.com>
    Committed by gunan<gunan@google.com>:
    Fix patching issue on Windows (#10452)
    
    ---
    Commit 6d54f09d9 authored by Yun Peng<pcloudy@google.com>
    Committed by gunan<gunan@google.com>:
    Fix linking errors of lmdb on Windows (#10457)
    
    ---
    Commit 61c8a745b authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Minor cleanup: Add braces around if statement arms; remove redundant "return" and "static".
    
    PiperOrigin-RevId: 158143418
    
    ---
    Commit e9a889c5e authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Pass int parameter by value, not by const reference
    
    PiperOrigin-RevId: 158142102
    
    ---
    Commit 9184726ed authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Avoid unnecessary copying of map data during visitation
    
    PiperOrigin-RevId: 158141962
    
    ---
    Commit 2e7e1d57b authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Small fix for how std::move is used in constructors
    
    PiperOrigin-RevId: 158141564
    
    ---
    Commit 2a61c1652 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    In cpu compiler's CompileAheadOfTime, pass ordering when compiling entry computation.
    
    PiperOrigin-RevId: 158140349
    
    ---
    Commit f3f53e8b3 authored by Derek Murray<mrry@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [tf.contrib.data] Add support for dicts and remove lists from nested structures.
    
    This changes the behavior of constructors like
    `tf.contrib.data.Dataset.from_tensors()` when passed a list. Previously, the
    `nest` utility would recurse into each element of such a list and create a
    separate Dataset component. Now the list will be converted to a tensor, allowing code like:
    
    ```python
    dataset = tf.contrib.data.Dataset.from_tensor_slices(([1, 2, 3], [4, 5, 6]))
    ```
    
    ...to define a dataset with two components (each of shape `()`).
    
    This change also adds support for dictionaries as nested structures, which
    simplifies integration with dictionary-returning ops like `tf.parse_example()`.
    
    Fixes #10151.
    
    RELNOTES: Breaking change to `tf.contrib.data.Dataset` APIs that expect a
    nested structure. Lists are now converted to tf.Tensor implicitly. You may need
    to change uses of lists to tuples in existing code. In addition, dicts are now
    supported as a nested structure.
    PiperOrigin-RevId: 158139467
    
    ---
    Commit b6a8848c1 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Enabling python configuration to use a remotely generated configuration that is located inside of the org_tensorflow repo (previously it *had* to be a remote repo declared in workspace file).
    
    PiperOrigin-RevId: 158138601
    
    ---
    Commit 0fe0bfcc3 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Remove unused protobuf header inclusions
    
    PiperOrigin-RevId: 158120864
    
    ---
    Commit f0c4c6c3f authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    In the CUDA path of depthwise_conv2d, add a fast NCHW backward filter convolution for images smaller than 16x16.
    
    PiperOrigin-RevId: 158111294
    
    ---
    Commit 8dcf37b47 authored by Jon Malmaud<malmaud@gmail.com>
    Committed by gunan<gunan@google.com>:
    Fix typo (#10379)
    
    ---
    Commit 3039d7da2 authored by Androbin<robin.richtsfeld@gmail.com>
    Committed by gunan<gunan@google.com>:
    Remove "bazel clean" (#10318)
    
    Reverting #8880 (see #10236)
    unnecessary since bazelbuild/bazel#2759 was merged
    ---
    Commit ae1c16ae8 authored by Yifei Feng<fengyifei2026@gmail.com>
    Committed by gunan<gunan@google.com>:
    Update docker to cudnn6. (#10307)
    
    * Update docker to cudnn6.
    
    * Update Dockerfile.gpu
    
    * Add --expunge to bazel clean to make cuda_configure run again and update TF_CUDNN_VERSION.
    
    * Remove expunge and set CUDA and CUDNN version default in configure.
    
    * Update configure
    
    * Only set --action_env once
    
    * Update prints for default version.
    
    ---
    Commit 232e9d86d authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    tf_workspace() claims that the tf_repo_name argument is unused.
    temp_workaround_http_archive still requires it.
    This change silences the spurious message.
    
    PiperOrigin-RevId: 158089834
    
    ---
    Commit cc1a02d37 authored by Francois Chollet<fchollet@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add fp16 support to convolutional layers that support it.
    
    PiperOrigin-RevId: 158086284
    
    ---
    Commit 7d3fbba48 authored by Mustafa Ispir<ispir@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Extracted dnn estimator testing utils to be reused by dnn-linear-combined.
    Added tests for dnn part of dnn-linear-combined estimator.
    
    PiperOrigin-RevId: 158084898
    
    ---
    Commit 9d12c629c authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Refactor the document and some polishment
    
    PiperOrigin-RevId: 158083952
    
    ---
    Commit 134138299 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Corrected comment: import_scoped_metagraph does not return a Saver.
    
    PiperOrigin-RevId: 158082288
    
    ---
    Commit a58553e4d authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add function in shape inference to try to infer output tensor content based on
    the input shapes of the op. In some cases (E.g: shape), knowing the shapes of
    the input is all that is necessary to infer the content of the output tensor.
    This improves shape inference.
    
    PiperOrigin-RevId: 158079306
    
    ---
    Commit 0cc851c08 authored by Yuefeng Zhou<yuefengz@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Call maxcut algorithm in the model_based_cost_estimator.
    
    PiperOrigin-RevId: 158078511
    
    ---
    Commit 7d76a90be authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add question marks next to items in the graph legend.
    
    PiperOrigin-RevId: 158076005
    
    ---
    Commit 68fdb7628 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add DNNLinearCombinedClassifier.
    
    PiperOrigin-RevId: 158075939
    
    ---
    Commit 3d52e4cb9 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fix create_meta_graph to respect an empty collection_list.
    
    PiperOrigin-RevId: 158073112
    
    ---
    Commit 54ccc3e5a authored by Mark Heffernan<meheff@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [XLA] Add module-scoped HLO dataflow analysis.
    This is the first step to replacing TuplePointsToAnalysis with a global, module-scoped analysis. This dataflow analysis identifies all values and their defs and uses in the XLA graph. The analysis is currently unused. Follow up CLs will add buffer alias analysis using this dataflow analysis, and incrementally switch the transformation passes (for example, CopyInsertion) to use these new module-scoped analyses.
    
    PiperOrigin-RevId: 158067910
    
    ---
    Commit 93c57c6e4 authored by Benoit Steiner<bsteiner@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Handle control flow logic properly:
     * Don't fold enter/exit nodes since that can interact badly with frames
     * Create proper control dependencies on switch nodes
    
    PiperOrigin-RevId: 158066691
    
    ---
    Commit 9e6899720 authored by Jingyue Wu<jingyue@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [SE] Add cudnnTransformTensor to StreamExecutor.
    
    PiperOrigin-RevId: 158062553
    
    ---
    Commit 827874c30 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    In the CUDA path of depthwise_conv2d, add a fast NCHW backward input convolution for images smaller than 16x16.
    
    PiperOrigin-RevId: 158061669
    
    ---
    Commit bee26215c authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Speed up multinomial_op on CPU by using a vectorized Eigen expression and avoiding unnecessary casts.
    
    Benchmark with AVX+FMA enabled:
    
    Run on <redacted> (12 X 3492 MHz CPUs); 2017-06-05T12:54:07.881672447-07:00
    CPU: Intel Haswell with HyperThreading (6 cores) dL1:32KB dL2:256KB dL3:15MB
    Benchmark                          Base (ns)  New (ns) Improvement
    ------------------------------------------------------------------
    BM_Multinomial_cpu_1_10000_4          250817    172953    +31.0%
    BM_Multinomial_cpu_1_10000_128        273834    187552    +31.5%
    BM_Multinomial_cpu_1_10000_10000     1174175   1130778     +3.7%
    BM_Multinomial_cpu_1_100000_4        2040741   1276761    +37.4%
    BM_Multinomial_cpu_32_10000_4       10221765   4498666    +56.0%
    BM_Multinomial_cpu_32_10000_128     10638159   4994754    +53.0%
    BM_Multinomial_cpu_32_100000_4      100790019  44193314    +56.2%
    BM_Multinomial_cpu_128_100000_1     431269640  182506078    +57.7%
    PiperOrigin-RevId: 158061480
    
    ---
    Commit 515b3ac67 authored by Justine Tunney<jart@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add Clutz to TensorBoard build
    
    This is so we can get JavaScript protobufs. This CL also improves the
    web_aspect and makes some peculiar Closure Compiler errors go away
    relating to externs.
    
    PiperOrigin-RevId: 158061198
    
    ---
    Commit 0df6760fe authored by Benoit Steiner<bsteiner@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Added a test to make sure that graph properties for variables are properly
    reported
    
    PiperOrigin-RevId: 158053084
    
    ---
    Commit 2ccfe8e76 authored by Benoit Steiner<bsteiner@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Added a new method to extract the graph properties from a cost graph without
    having to run the model. This will simplify the process of creating regression
    tests
    
    PiperOrigin-RevId: 158050327
    
    ---
    Commit 27f1b80c2 authored by Alexandre Passos<apassos@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fixes memory leak in py_func when functions return unwrapped strings.
    
    PiperOrigin-RevId: 158046530
    
    ---
    Commit cf238e1f2 authored by Eugene Brevdo<ebrevdo@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fix memory leak in python caused by @tf_should_use.
    
    The issue is that python's GC has trouble collecting objects with __del__ methods.
    
    The solution is two pronged:
    * Keep track of usage state outside of the class, via a dict mapping
      id(object) => state
    * Remove __del__ (this was the source: python's GC couldn't collect wrapped
      objects), and instead use weakref.finalize to emit warnings just as the object
      is being garbage collected.
    * Added tests for garbage collection [they were failing before i fixed the issue]
    
    PiperOrigin-RevId: 158042388
    
    ---
    Commit e6f581863 authored by Bo Wang<david.b.wang@gmail.com>
    Committed by Rasmus Munk Larsen<rmlarsen@google.com>:
    New reader for LMDB databases (#9950)
    
    * Add LMDBReader op and test case
    
    * Add testcase to load LMDB from a folder
    
    * Add tensorflow/core/lib/lmdb/testdata/data.mdb
    
    * Add EOF test
    
    * Add license export
    
    * Blacklist the test data in pip_smoke_test.py
    
    * Address issues with respect to review
    
    * Add LICENSE to BUILD rules
    
    * Remove the prefx of LICENSE
    
    * Wrap key with compat.as_bytes()
    
    * Fixed a compilation flag
    
    * Improve BUILD rules
    
    * Support LMDB build in cmake
    
    * Fix BUILD file format with buildifier
    
    * Add fake unistd.h for lmdb to build on Windows
    
    * Avoid building lmdb tools which depends on unistd.h
    
    * Fix the string encoding issue in Python3
    
    * Update lmdb library name in CMakeList.txt
    
    ---
    Commit cc411f938 authored by Yao Zhang<yaozhang@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    When converting the layout of Conv2DBackpropInput, we need to permute one of
    its inputs, which is a constant node. We permute a copy of this node, instead of the
    original node, because the original node may be used as input to other nodes.
    This kind of sharing of const node could arise if the graph is pre-optimized by common
    subexpression elimination, which is part of the L1 optimizations in
    TensorFlow.
    
    PiperOrigin-RevId: 158037552
    
    ---
    Commit 88bdb6fca authored by Dandelion Man?<dandelion@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Remove all remaining references to non-public TF modules from TensorBoard.
    
    I deleted the PluginAssetUtil tests because that code is deprecated.
    I'll later add manual testing for backcompat in the text plugin.
    
    PiperOrigin-RevId: 158037466
    
    ---
    Commit 6c531eb2f authored by Francois Chollet<fchollet@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add file hash to Keras Boston Housing dataset to force cache update.
    
    PiperOrigin-RevId: 158036587
    
    ---
    Commit afdc38cd3 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Remove deprecated resource handle functions in InferenceContext.
    
    PiperOrigin-RevId: 158034419
    
    ---
    Commit 9f932e6ce authored by Derek Murray<mrry@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Avoid parsing a rendezvous key for Send/Recv ops outside a loop.
    
    For such ops, the rendezvous key will be constant, because
    `ctx->frame_iter()` will always evaluate to `{0, 0}`. Benchmarking
    reveals that this can save between 1 and 2 microseconds per Send or
    Recv op execution. The optimization applies to all cross-process,
    inter-device, and intra-device (host-to/from-device memory) Send/Recv
    ops.
    
    PiperOrigin-RevId: 158032522
    
    ---
    Commit cc2dd4ac8 authored by Shanqing Cai<cais@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    tfdbg: dump debug data from different devices in separate directories
    
    Fixes: #7051
    wherein TFDBG failed to load the data dump from a Session.run() involving multiple GPUs.
    
    The root cause of the bug was that TFDBG previously assumed that node names are unique across all partition graphs. This is however not the case when multiple GPUs exist. The Send/Recv nodes in the partition graphs of the GPUs can have duplicate names. There will potentially be other cases like this in the future due to other reasons (e.g., distributed sessions and/or graph optimization).
    
    This CL relaxes this assumption, by dumping the GraphDef and tensor data from different devices into different sub-directories under the dump root directory.
    
    PiperOrigin-RevId: 158029814
    
    ---
    Commit a5909d643 authored by Toby Boyd<tobyboyd@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fixed triggering create device multiple times
    
    PiperOrigin-RevId: 158025196
    
    ---
    Commit 504a307b7 authored by Martin Wicke<wicke@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Make sure that Adam colocates ops with a consistent variable across workers.
    
    PiperOrigin-RevId: 158022292
    
    ---
    Commit 69ba4d3d4 authored by Asim Shankar<ashankar@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fix #10371
    
    cpuinfo.get_cpu_info() doesn't seem to include the l2_cache_size key on some
    architectures.
    
    PiperOrigin-RevId: 158021008
    
    ---
    Commit a51a9846c authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Performance-related tweaks: Don't copy loop variables; remove ineffective std::move casts.
    
    PiperOrigin-RevId: 158017670
    
    ---
    Commit 009789f74 authored by Peter Hawkins<phawkins@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [XLA] Allow 0-sized slices in DynamicSlice and DynamicUpdateSlice; add tests.
    
    PiperOrigin-RevId: 158015870
    
    ---
    Commit 48a4853eb authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Miscellaneous cleanups
    
    PiperOrigin-RevId: 158012131
    
    ---
    Commit 379ddde24 authored by Chris Song<sjhshy@gmail.com>
    Committed by Chris Song<sjhshy@gmail.com>:
    Fix misspells.
    
    ---
    Commit a0a76da97 authored by Lakshay Garg<lakshay.garg.1996@gmail.com>
    Committed by Lakshay Garg<lakshay.garg.1996@gmail.com>:
    Fixed typo in code
    
    ---
    Commit 7ffc35732 authored by Eugene Brevdo<ebrevdo@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add support for bools in matrix_diag, matrix_diag_part, matrix_set_diag, matrix_band_part.
    
    PiperOrigin-RevId: 157939272
    
    ---
    Commit edf3d5dbe authored by Darren Garvey<darren.garvey@gmail.com>
    Committed by Darren Garvey<darren.garvey@gmail.com>:
    configure: Fix default path when enabling MPI.
    
    Correct showing what the default path is when mpi is installed.
    
    ---
    Commit aad2e3daf authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    In the CUDA path of depthwise_conv2d, add a fast NCHW forward convolution for images smaller than 16x16.
    
    PiperOrigin-RevId: 157915637
    
    ---
    Commit 5cf08d9cb authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Drop blockDim.y for the equivalent in_cols, and slightly improve naming (use 'pixels' instead of 'size' for height*width numbers).
    
    PiperOrigin-RevId: 157906773
    
    ---
    Commit 563f05ff6 authored by Eugene Brevdo<ebrevdo@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [tf contrib seq2seq] Expand tile_batch to handle nested structures.
    
    This allows it to properly tile the initial wrapper state when using
    BeamSearchDecoder with AttentionWrapper.  Unit tests updated to show this use.
    
    PiperOrigin-RevId: 157903115
    
    ---
    Commit 1234e2dda authored by Justine Tunney<jart@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fix Plottable definition
    
    On Mac OS the build directory in the Node package conflicts with BUILD.
    
    PiperOrigin-RevId: 157899970
    
    ---
    Commit bb7a8d8e7 authored by Benoit Steiner<bsteiner@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Don't use the _output_shape attribute in the op_level_cost_estimator since
    there is no guaranty that it will be present or accurate.
    
    PiperOrigin-RevId: 157898989
    
    ---
    Commit 6f4204c3d authored by Justine Tunney<jart@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fix TensorBoard SHA256 in cmake
    
    PiperOrigin-RevId: 157897958
    
    ---
    Commit c9d2f432b authored by Justine Tunney<jart@google.com>
    Committed by Justine Tunney<jart@google.com>:
    Fix TensorBoard SHA256 in cmake
    
    ---
    Commit 1c70fb686 authored by Jianwei Xie<xiejw@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add training test for multi classes (n>2) linear classifier.
    
    PiperOrigin-RevId: 157896002
    
    ---
    Commit 675d36be0 authored by Yao Zhang<yaozhang@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add fused batch norm to tf.layers.
    
    PiperOrigin-RevId: 157893874
    
    ---
    Commit f37d0ea47 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Internal change -- first draft docs
    
    PiperOrigin-RevId: 157891937
    
    ---
    Commit 9b8f6113b authored by Zongheng Yang<zongheng@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    tensor_bundle: fix that the read path forgets to cache file handles.
    
    In a case where a reader is geographically far from the file, this change
    achieves a speedup of end-to-end checkpoint restore by 5.8x.
    
    PiperOrigin-RevId: 157889659
    
    ---
    Commit 0c92dada6 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Use inplace Cholesky factorization and solves to speed up and reduce memory usage in matrix_solve_ls.
    Check succes before copying outputs in cholesky_op.
    
    PiperOrigin-RevId: 157887564
    
    ---
    Commit a4caeb2ea authored by William Chargin<wchargin@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Extract the graphs dashboard to a plugin
    
    This completes the great plugin migration!
    
    The graphs plugin is somewhat different from the plugins considered so
    far. First, it exposes two kinds of data: graph data and run metadata.
    We elect to put both sources of data under the domain of the graphs
    plugin for now, because it's not clear that the run metadata would be
    useful for anything else. Second, the graph data really has no use for
    "tags": a run either has an associated graph or it does not. Thus, we
    expose an endpoint /data/plugin/graphs/runs that is different in format
    from the /tags routes exposed by other plugins (it returns just a list
    instead of a run-to-tag mapping).
    
    This change removes a bunch of tests from application_test.py. The tests
    cover the compresion behavior of the graph endpoint, but the graph
    endpoint doesn't have any special logic in the way of compression. Thus,
    the tests are, apparently, testing that werkzeug (or whatever is
    relevant here) provides good compression defaults. This isn't
    necessarily a bad idea, but it shouldn't be coupled to the graph tests.
    
    To get test data that includes run metadata, you can run this script:
    
        https://raw.githubusercontent.com/tensorflow/tensorflow/326942394e69074d50d5889218a24c9371eff259/tensorflow/examples/tutorials/mnist/mnist_with_summaries.py
    
    PiperOrigin-RevId: 157884714
    
    ---
    Commit 05a6a13f7 authored by Gunhan Gulsoy<gunan@google.com>
    Committed by gunan<gunan@google.com>:
    Make sure all writer caches are closed before deleting directories in dnn_test.
    
    ---
    Commit d0e761f8d authored by Gunhan Gulsoy<gunan@google.com>
    Committed by gunan<gunan@google.com>:
    Disable another test that uses matrix_set_diag on windows.
    
    ---
    Commit 8939b8562 authored by Derek Murray<mrry@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [tf.contrib.data] Re-implement IteratorGetNext as an AsyncOpKernel.
    
    This prevents the op from consuming an inter-op thread pool thread
    when blocked, and fixes a potential deadlock when many IteratorGetNext
    ops are blocked. Fixes #10369.
    
    PiperOrigin-RevId: 157878885
    
    ---
    Commit 9e25c68ad authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add loss_only_head to hold additional loss terms for multi_head setup
    
    PiperOrigin-RevId: 157875934
    
    ---
    Commit 7cdcd0cca authored by Benoit Steiner<bsteiner@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Filter more op types that don't benefit from constant folding.
    
    PiperOrigin-RevId: 157875168
    
    ---
    Commit 366990d92 authored by Kay Zhu<kayzhu@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [XLA] Fix a subtle issue in copy_insertion due the interaction between copy
    overriding logic and RecordIndicesToColocatingBuffers:
    
    - When building instructions ShapeTree to be copy overriden, it is possible
    that we create a single kCopy for two identical instructions. An example can
    be:
    
        %tuple.19 = tuple(%constant.4, %constant.1793, %constant.1793)
    
    where it is used in a while.init operand, and constant.1793 is read-only within
    the loop and also used by another while loop. The copy overriding pass will then
    create the following (logical, not finalized) tuple:
    
        %tuple.19 = tuple(%constant.4, %copy.5, %copy.5)
    
    - In the subsequent pass RecordAmbiguousOrNonDistinctIndices, to add copies to
    ensure point_to set is distinct, the duplicate %copy.5 are ignored because they
    are not yet finalized, and these indices (1 and 2 in the example) are still
    marked as to-be copied.
    
    Therefore distinctiveness is lost.
    
    This fix applies to the override building stage, to explicitly avoid creating
    shared copies for non-distinct buffers.
    
    PiperOrigin-RevId: 157872231
    
    ---
    Commit f4b8d21b8 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Change function parameters to references to avoid copying, or otherwise move from function parameters when moving reduces the amount of copying.
    
    PiperOrigin-RevId: 157867333
    
    ---
    Commit 3eee61caa authored by Drew Hintz<pushespretn@gmail.com>
    Committed by GitHub<noreply@github.com>:
    fix quotes in example code from ? to "
    ---
    Commit 4905c0eae authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Remove TODO - the new tolerance is okay to keep.
    
    PiperOrigin-RevId: 157861020
    
    ---
    Commit 55f6b6ff1 authored by David Soergel<soergel@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add explicit SparseTensor support to SignatureDef.
    
    PiperOrigin-RevId: 157860466
    
    ---
    Commit 79099d677 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Removes default thresholds from BinaryLogisticHead and adds predict and evaluate tests for DNNClassifier.
    
    PiperOrigin-RevId: 157856471
    
    ---
    Commit 54595f0f3 authored by Jianwei Xie<xiejw@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Adds the training test for LinearClassifier with n_classes=2.
    
    PiperOrigin-RevId: 157855473
    
    ---
    Commit cd6c02985 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add 'streaming_curve_points' metric which returns curve [ROC, PR] approximation at specified number of points.
    
    PiperOrigin-RevId: 157851535
    
    ---
    Commit 0f2db7391 authored by Peter Hawkins<phawkins@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [TF:XLA] Split union-find implementation in mark_for_compilation_pass.cc into a separate library, make it more generic.
    
    PiperOrigin-RevId: 157850985
    
    ---
    Commit d5421cf58 authored by Justin Lebar<jlebar@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add additional concat test.
    
    PiperOrigin-RevId: 157844113
    
    ---
    Commit f661128db authored by Geoffrey Irving<geoffreyi@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Remove unused overloads of SummarizeGraphDef and EqualGraphDef
    
    PiperOrigin-RevId: 157843404
    
    ---
    Commit a56d59a84 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Set flow to a value during TensorArray creation,
    Re-enable tensor_array_ops_test in msan.
    
    PiperOrigin-RevId: 157841785
    
    ---
    Commit edcc5cc13 authored by Justine Tunney<jart@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add manual test runner for vz_sorting
    
    PiperOrigin-RevId: 157841098
    
    ---
    Commit 3f6404f20 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Assign a max height of 800px to images in the image dashboard.
    
    The user could always expand to actual dimensions if need be.
    
    PiperOrigin-RevId: 157838046
    
    ---
    Commit c6ea6972a authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Remove debugging LOG(INFO) from previous change.
    
    PiperOrigin-RevId: 157837305
    
    ---
    Commit 07d39f28e authored by freedom" Koan-Sin Tan<koansin.tan@gmail.com>
    Committed by Benoit Steiner<benoitsteiner@users.noreply.github.com>:
    make gcc-5 on Ubuntu 16.04 happy (#10385)
    
    gcc-5 complains of ambiguity and refuses to go when doing something
    like 'bazel build -c opt tensorflow/...'
    ---
    Commit ac66be783 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Minor cleanup: Remove unused BUILD dependencies and unnecessary code.
    
    PiperOrigin-RevId: 157837211
    
    ---
    Commit 4161ccc8e authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Adjust tolerance on dirichlet_multinomial test.
    
    PiperOrigin-RevId: 157834660
    
    ---
    Commit 43c0f52f1 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fix off-by-one error in BoolVector(begin, end) constructor.
    
    PiperOrigin-RevId: 157833086
    
    ---
    Commit 419d437ba authored by Lakshay Garg<lakshay.garg.1996@gmail.com>
    Committed by Lakshay Garg<lakshay.garg.1996@gmail.com>:
    Fixed typo in code comment
    
    ---
    Commit 07710014d authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fix device colocation for KMeans in case of multiple parameter servers.
    
    PiperOrigin-RevId: 157795360
    
    ---
    Commit b659bc39f authored by Justine Tunney<jart@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Simplify TensorBoard build
    
    - Remove tensorboard_typescript_genrule
    - Remove tensorboard_typescript_bundle
    - Introduce ts_web_library Skylark rule which supports seamless
      TypeScript compilation.
    - Use Closure Compiler in semi-advanced mode to compile JavaScript.
      This is done in a way that preserves <script> tag placement, which
      causes pages to load faster and avoid FOUC, thereby making it a
      better solution than the existing vulcanize.
    
    PiperOrigin-RevId: 157794795
    
    ---
    Commit 0503ce09c authored by Benoit Steiner<bsteiner@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Wipe out previous shape inference result when importing a grappler item
    Run graph optimizations last: since they can be expensive it's best to filter invalid items first.
    
    PiperOrigin-RevId: 157792834
    
    ---
    Commit 9ae941c4a authored by Benoit Steiner<bsteiner@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Turn reductions along an empty set of dimensions into identity nodes.
    
    PiperOrigin-RevId: 157792209
    
    ---
    Commit 69075f354 authored by Yangzihao Wang<yangzihao@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add functional support for cudnnConvolutionBiasActivationForward().
    
    PiperOrigin-RevId: 157788425
    
    ---
    Commit 7d7a40309 authored by William Chargin<wchargin@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Extract the distributions dashboard to a plugin
    
    This continues the great plugin migration. The distributions plugin was
    similar to the histograms plugin, but it also purported to allow CSV
    download like the scalars plugin. However, the existing implementation
    of this was flawed, and would always yield a 500 on current prod [1]
    (unless there were actually no data). This indicates that no one is
    actually using it---probably because there isn't a relevant button on
    the frontend, anyway!---so I just removed it.
    
    This also changes most frontend occurrences of "compressedHistograms"
    to "distributions" while we're at it.
    
    [1]: Due to the reference `value.rank_in_bps` in the handler
    `_serve_compressed_histograms`; this field does not exist and throws an
    `AttributeError`.
    
    PiperOrigin-RevId: 157787156
    
    ---
    Commit 23cdf96b8 authored by Brennan Saeta<saeta@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Re-enable session_test.py
    
    A number of CL's have split up session_test.py to be a bit smaller. As a
    result, this CL will re-enable the session_test to see if it remains flaky.
    
    PiperOrigin-RevId: 157786407
    
    ---
    Commit d741d81c5 authored by Dandelion Man?<dandelion@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Expose tf.test.StubOutForTesting in the tf testing api
    
    Also redirect TensorBoard usage to use that endpoint.
    
    This is part of my ongoing effort to have TensorBoard only
    depend on TensorFlow via its public api, so that it can
    be split into a project with a fast external build.
    
    PiperOrigin-RevId: 157784552
    
    ---
    Commit 40411cd5c authored by Dandelion Man?<dandelion@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Refactor projector plugin to only use tf public methods.
    
    Remove all reference to the PluginAsset system, which is deprecated.
    
    Part of an ongoing effort to have TensorBoard only consume the public
    TensorFlow api.
    
    PiperOrigin-RevId: 157784016
    
    ---
    Commit a65a70ea5 authored by Gunhan Gulsoy<gunan@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fix pip tests under contrib/text
    
    PiperOrigin-RevId: 157783952
    
    ---
    Commit fb4bc806a authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fix flakiness in GpuMultiSessionMemoryTest.
    
    PiperOrigin-RevId: 157781368
    
    ---
    Commit f7de292df authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Update placeholder nodes' shapes in the GraphDef to reflect manually specified values for incomplete placeholder shapes. Previously, these overrides were only specified in the feed nodes, which improves estimates when using dynamic shapes but not when using static shapes. With this change, static shapes also benefit.
    
    PiperOrigin-RevId: 157780800
    
    ---
    Commit eebd44123 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add a frontend method for retrieving numeric alerts from the debugger plugin.
    
    This route responds with a list of alerts (occurrences of bad values) in ascending timestamp order.
    
    PiperOrigin-RevId: 157780270
    
    ---
    Commit 5bc685d7f authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [XLA] If an op has a single "large" operand, we want to fuse this op into some of its consumers, even if we can't fuse into all of them.
    
    PiperOrigin-RevId: 157779106
    
    ---
    Commit 2ee09b873 authored by Mark Heffernan<meheff@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [XLA] Various improvements to ShapeTree.
    Add support for holding non-copyable types, operator==, and a
    CopySubtreeFrom method for copying a subtree from one ShapeTree to
    another.
    
    PiperOrigin-RevId: 157777636
    
    ---
    Commit 4f3ae7699 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add beam_search kernels used by BeamSearchDecoder to tensorflow.contrib.
    
    PiperOrigin-RevId: 157775011
    
    ---
    Commit 6b16c33b3 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Make audio-related logic use the audio plugin.
    
    Previously, fetching audio and related data from TensorBoard used handlers within application.py. We now remove those handlers in favor of routes offered by the audio plugin. ML Dash is updated as well.
    
    PiperOrigin-RevId: 157774953
    
    ---
    Commit 8032e1f75 authored by Geoffrey Irving<geoffreyi@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Make function instantiation use std::vector<NodeDef> instead of GraphDef
    
    It's about to turn into std::vector<NodeInfoPtr>; this change gets us partway there.
    
    RELNOTES: n/a
    PiperOrigin-RevId: 157771141
    
    ---
    Commit 2e44be35d authored by Vinu Rajashekhar<vinuraja@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Adds a protected DeleteResourceMgr(...) method in Device.
    
    PiperOrigin-RevId: 157770378
    
    ---
    Commit cc346e690 authored by Benoit Steiner<bsteiner@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Strip the :x suffix when generating control inputs from input names
    
    PiperOrigin-RevId: 157770257
    
    ---
    Commit d6fe47af5 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Use tensorflow::StringPiece in literal_util.
    Use template for RepeatedField assignment.
    
    PiperOrigin-RevId: 157765477
    
    ---
    Commit 7866fa01b authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    This change significantly reduces time and resources used to load large TensorFlow graphs.
    
    For a real-world large graph (13k nodes, 20k edges), this change:
    
    * reduces all heap allocations by 19%
    * reduces retained (final) heap allocations by 2.2%
    * reduces CPU time by 11.2%
    
    In most TF graphs, the set of unique values set to Node::assigned_device_name() is quite small.  This change adds an interning table to the Graph object, which contains all of the unique values used for Node::set_assigned_device_name(), as well as a look-up table.  This is the main source of the reduction in retained heap memory; nearly all nodes are assigned to just one or two unique devices.
    
    This change removes the "string assigned_device_name_" field from the Node class, and replaces it with "int assigned_device_name_index_".  However, because you need both the index and the name table to get the actual value, the Node::assigned_device_name() accessor needs access to the parent Graph.  This requires adding a "Graph* graph_" field to the Node class.
    
    In the future, if all users of this property are converted to use Graph::assigned_device_name(Node*), then the Node::graph_ field can be deleted, and the space reclaimed.  However, doing so is out of the scope of this CL, and even with this new pointer field, the Node class is smaller than it was before, so this is still a net win.
    
    The placement algorithm in simple_placer.cc is one of the main accessors of the Node::assigned_device_name property.  This CL contains significant changes to simple_placer.cc, which directly take advantage of the fact that the property is an index into a name table, rather than treating it simply as a string.  Many temporary allocations are also removed, which is the main source of the reduction in total heap allocations.
    
    This CL also contains a few changes that remove short-lived allocations in unrelated code, such as the changes in op.cc/h, costmodel.cc, etc.  It is extremely easy in C++ to accidentally allocate memory, especially when implicit conversions and copy constructors allocate memory.
    
    All of the changes in this CL were motivated by empirical measurement, using CPU profiling and heap profiling.
    
    PiperOrigin-RevId: 157762909
    
    ---
    Commit fdffafbc1 authored by Benoit Steiner<bsteiner@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add QueueDequeueUpTo to the list of dequeue ops
    
    PiperOrigin-RevId: 157760201
    
    ---
    Commit 7ad0d0698 authored by Mustafa Ispir<ispir@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add type error to start_queue_runners if given session is not a `tf.Session`. Due to semver, we suppress the error if a MonitoredSession is provided.
    
    PiperOrigin-RevId: 157748375
    
    ---
    Commit 7106f9fac authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Implemented an initial version of virtual scheduler unit test.
    
    PiperOrigin-RevId: 157746305
    
    ---
    Commit b020db0c6 authored by Andrew Harp<andrewharp@google.com>
    Committed by Andrew Harp<andrewharp@google.com>:
    revert public visibility
    
    ---
    Commit 5b05728c2 authored by Andrew Harp<andrewharp@google.com>
    Committed by Andrew Harp<andrewharp@google.com>:
    visibility workaround 3
    
    ---
    Commit 15a740ebb authored by Mustafa Ispir<ispir@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Update and Move DNNLinearCombinedRegressor to estimator/canned.
    
    PiperOrigin-RevId: 157744087
    
    ---
    Commit d29bbeca3 authored by Dandelion Man?<dandelion@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fix outdated code ref in TensorBoard README, add link to SO question.
    
    PiperOrigin-RevId: 157743374
    
    ---
    Commit 9fc164225 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fix index_table_from_file to allow vocabulary_file be a Tensor
    
    PiperOrigin-RevId: 157740677
    
    ---
    Commit 0aa3e0194 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Internal change
    
    PiperOrigin-RevId: 157740660
    
    ---
    Commit 02ac85399 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Introduce new class Literal to replace protobuf Literal.
    
    This renames the existing Literal message to LiteralProto and introduces a new
    C++ class named Literal to replace it.
    
    The LiteralProto is only used at RPC boundaries, or when protobuf-specific
    functionality is required.  The Literal class offers a 'ToProto' function to
    generate a new LiteralProto message when necessary.
    
    Currently, all the static functions in class LiteralUtil, just forward to their
    counterparts in class Literal.  This will change in a future CL.
    
    Class Literal implements all the buffers as std::vectors.  The only exception
    is preds(), which given the std::vector<bool> representation, makes it unusable
    for the semantics we require (it's not possible to get the address of the
    underlying vector, for instance).
    
    The CL adds a BoolVector class to work around that issue.
    
    In future CLs, the std::vector representation may be changed to something more
    efficient, if needed.
    
    PiperOrigin-RevId: 157739125
    
    ---
    Commit 207203253 authored by gunan<gunan@google.com>
    Committed by GitHub<noreply@github.com>:
    Python 3.6 support on windows. (#10356)
    
    * Python 3.6 support on windows.
    
    * Fix typo in README.md
    
    * Make environment configurable for windows gpu build.
    
    ---
    Commit 2b75a9a6e authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Go: Update generated wrapper functions for TensorFlow ops.
    
    PiperOrigin-RevId: 157734029
    
    ---
    Commit f60b6bdcb authored by Mustafa Ispir<ispir@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add a warning to documentation of MonitoredSession.
    
    PiperOrigin-RevId: 157728225
    
    ---
    Commit eb10a4c49 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Preallocate vector storage when the ultimate vector size is known in advance
    
    PiperOrigin-RevId: 157724431
    
    ---
    Commit ce32228c4 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add release notes for Intel MKL integration.
    
    PiperOrigin-RevId: 157722003
    
    ---
    Commit a23255bc0 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Adds missing group OP to benchmark
    
    PiperOrigin-RevId: 157716500
    
    ---
    Commit d3e840a6c authored by Asim Shankar<ashankar@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Disable writing of compressed checkpoints.
    
    Snappy compression (and decompression) was enabled after the
    1.1 release (in commit 63b2f999d3f22cfe915b89103faa1b0a1b1b7617).
    This means that checkpoints produced by the 1.2.0 release candidates
    will cause TensorFlow 1.1 (and prior) binaries to crash as they
    CHECK fail when trying to load snappy-compressed tables.
    
    To ease transition, disable writing of compressed checkpoints in
    1.2.0 for now.
    
    Reconsider this in the next release.
    
    PiperOrigin-RevId: 157675189
    
    ---
    Commit 6db400bbc authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Refactoring Python op code generation.
    
    PiperOrigin-RevId: 157675126
    
    ---
    Commit d9620cab8 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add flag to determine whether to do L1 optimizations and inline functions. Default is to do them. In tf_optimizer don't inline or do l1 optimizations.
    
    PiperOrigin-RevId: 157673614
    
    ---
    Commit 25bb504cc authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Make a plugin that serves data for the audio dashboard.
    
    Subsequent changes will make TensorBoard use this audio plugin instead of the previous handlers for audio-related data.
    
    PiperOrigin-RevId: 157673132
    
    ---
    Commit 24623653b authored by James Qin<jamesqin@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fix graph text format serialization
    
    PiperOrigin-RevId: 157669530
    
    ---
    Commit 3aed1735c authored by Andrew Harp<andrewharp@google.com>
    Committed by Andrew Harp<andrewharp@google.com>:
    visibility workaround 2
    
    ---
    Commit fea90f89d authored by Andrew Harp<andrewharp@google.com>
    Committed by Andrew Harp<andrewharp@google.com>:
    visibility workaround
    
    ---
    Commit 732a6b1ae authored by Justine Tunney<jart@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Upgrade TypeScript to v2.3.4
    
    PiperOrigin-RevId: 157667511
    
    ---
    Commit 95d90ab2e authored by Luke Iwanski<luke@codeplay.com>
    Committed by Benoit Steiner<benoitsteiner@users.noreply.github.com>:
    [OpenCL] Fixes Split op (#10322)
    
    * [OpenCL] Fixes Split op
    
      Split should alway go through SYCL device
    
    * [OpenCL] Removes half from registred types
    
    ---
    Commit 963441400 authored by Luke Iwanski<luke@codeplay.com>
    Committed by Benoit Steiner<benoitsteiner@users.noreply.github.com>:
    [OpenCL] Extends softmax op to cover double (#10323)
    
    ---
    Commit a702863e8 authored by Luke Iwanski<luke@codeplay.com>
    Committed by Benoit Steiner<benoitsteiner@users.noreply.github.com>:
    [OpenCL] Extends tile ops to int16 and int32 (#10328)
    
    * [OpenCL] Extends tile ops to int16 and int32
    
    * [OpenCL] Extends tile_ops to cover bool, uint8, int16, int64
    
    ---
    Commit 75385814f authored by cxx<cxxgtxy@gmail.com>
    Committed by cxx<cxxgtxy@gmail.com>:
    Fix comments error in mnist_replica.py where only one ps is used with two works by default.
    
    ---
    Commit 23364e2c6 authored by Andrew Harp<andrewharp@google.com>
    Committed by Andrew Harp<andrewharp@google.com>:
    buildifier fix
    
    ---
    Commit e5088cb82 authored by Yao Zhang<yaozhang@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fix discrepancy between measured and analytical cost graph. Use tf_cuda_library for utils.
    
    PiperOrigin-RevId: 157660745
    
    ---
    Commit 787381ca5 authored by Brennan Saeta<saeta@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Split up session_test.py -> session_clusterspec_prop_test.py
    
    session_test.py has gotten very large. Additionally, recently it has become
    flaky. In order to both (1) improve overall code health, and (2) to facilitate
    root-causing the test flakiness, this CL begins to split apart session_test
    into focused subsets.
    
    I've suffixed the scoping of the session_test in order to preserve filesystem
    sort-order grouping.
    
    PiperOrigin-RevId: 157658981
    
    ---
    Commit b09932d74 authored by Benoit Steiner<bsteiner@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Added PlaceholderWithDefault to the list of known placeholder types
    Use PartialTensorShape instead of TensorShapes to better handle partially known
    shapes
    
    PiperOrigin-RevId: 157657664
    
    ---
    Commit 0462416f6 authored by Dandelion Man?<dandelion@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add make_ndarray, tensor_proto, and MetaGraphDef to tf api.
    
    Since TensorProtos are part of the TensorFlow API, it makes sense
    to also include the methods that generate and parse them.
    
    Similarly, we write out MetaGraphDef protos in the summary writer,
    so we should provide the proto as well.
    
    This is part of an ongoing effort to have TensorBoard only consume
    TensorFlow methods through the public api.
    
    PiperOrigin-RevId: 157657564
    
    ---
    Commit 458f94c12 authored by Wei Ho<weiho@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Open-source skip-gram ops
    
    PiperOrigin-RevId: 157655970
    
    ---
    Commit faac0331c authored by Justine Tunney<jart@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Introduce tensorboard_zip_file build rule
    
    This rule can depend on web_library or tensorboard_html_binary. In
    both cases it will create a .zip file containing all the transitive
    web server paths. This can be used to deploy static assets to web
    servers.
    
    A small change was also made to Vulcanize to support path overriding.
    
    PiperOrigin-RevId: 157655047
    
    ---
    Commit 7ed44f4c9 authored by Brennan Saeta<saeta@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Split up session_test.py -> session_partial_run_test.py
    
    session_test.py has gotten very large. Additionally, recently it has become
    flaky. In order to both (1) improve overall code health, and (2) to facilitate
    root-causing the test flakiness, this CL begins to split apart session_test
    into focused subsets.
    
    I've suffixed the scoping of the session_test in order to preserve filesystem
    sort-order grouping.
    
    PiperOrigin-RevId: 157651813
    
    ---
    Commit 3c7ac46ae authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [XLA] Teach Executable to do its own profiling (patch 4/4).
    
    This CL removes the xla::Service stub for ExecuteOnStreamWrapper so the users call the xla::Executable version directly, and simplifies the function API to simply accept "arguments" as a parameter (with a templated type) rather than requiring the user to capture it into a lambda around the relevant Executable::ExecuteOnStream method.
    
    PiperOrigin-RevId: 157651740
    
    ---
    Commit 626f95ab9 authored by Peter Hawkins<phawkins@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [TF:XLA] Don't enforce that all nodes in an encapsulated subgraph are on the same device.
    Use the assigned device rather than the user-requested device when converting a Graph to a FunctionDef.
    
    PiperOrigin-RevId: 157648977
    
    ---
    Commit 414470329 authored by Jacques Pienaar<jpienaar@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [XLA] Guard stream pool with mutex.
    
    A data race can occur while populating the map.
    
    PiperOrigin-RevId: 157647183
    
    ---
    Commit ccdb30763 authored by Eugene Brevdo<ebrevdo@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Additional colocation options and bugfixes for TensorArray
    
    * colocate_with is now set properly when a TensorArray is passed through a
      while_loop
    * added a new argument, "colocate_with_first_write" (default: True; this is
      the current behavior).  If False, the TensorArray is simply placed on the
      device from the context it's constructed in, and no colocation constraints
      are added.
    
    PiperOrigin-RevId: 157643133
    
    ---
    Commit 03fc7022b authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Update ops-related pbtxt files.
    
    PiperOrigin-RevId: 157642677
    
    ---
    Commit 41b87d6ce authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add a new attribute narrow_range to FakeQuant* operations.  It quantizes into range [1; 255] instead of [0; 255].
    
    PiperOrigin-RevId: 157641054
    
    ---
    Commit c048e2938 authored by Alexandre Passos<apassos@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Adds support to non-placeholder inputs in _graph_to_function_def.
    
    Specifically, supports input ops with more than one output tensor.
    
    PiperOrigin-RevId: 157640908
    
    ---
    Commit d310de4fa authored by Brennan Saeta<saeta@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Split up session_test.py -> session_list_devices_test.py
    
    session_test.py has gotten very large. Additionally, recently it has become
    flaky. In order to both (1) improve overall code health, and (2) to facilitate
    root-causing the test flakiness, this CL begins to split apart session_test
    into focused subsets.
    
    I've suffixed the scoping of the session_test in order to preserve filesystem
    sort-order grouping.
    
    PiperOrigin-RevId: 157640788
    
    ---
    Commit 8e868cf6a authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Remove unused arguments to call_cpp_shape_fn.
    
    PiperOrigin-RevId: 157640125
    
    ---
    Commit 9ddbf31fe authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Use unnamed namespace to effect internal linkage, replace string constructors with array-deducing helper function
    
    PiperOrigin-RevId: 157636308
    
    ---
    Commit 88ffe6276 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Increase cholesky_op_test to medium, bump shard_count 1 more.
    
    PiperOrigin-RevId: 157635774
    
    ---
    Commit bef563dc8 authored by Benjamin Kramer<kramerb@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [XLA] Don't add constraints for computations we're not currently looking at.
    
    TuplePointsToAnalysis is computed globally per module, so we add all
    unconstrained buffers in that module, even if it's outside of the computation
    we're currently running on. Then we proceed to propagate default layouts to all
    those buffers and then throw the constraints away because they don't affect any
    instruction in the current computation.
    
    PiperOrigin-RevId: 157635564
    
    ---
    Commit a980aead8 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Use test_adjusted_name when making the mangled_test_name in
    run_and_gather_logs_lib.py, to avoid duplicate file names when the same test is
    run on multiple GPUs.
    
    PiperOrigin-RevId: 157630193
    
    ---
    Commit 0a84cfd58 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Update ops-related pbtxt files.
    
    PiperOrigin-RevId: 157629497
    
    ---
    Commit 6882effb8 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Make single-parameter constructors explicit
    
    PiperOrigin-RevId: 157628970
    
    ---
    Commit 0b8070253 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Support negative axis for Split op
    
    PiperOrigin-RevId: 157628162
    
    ---
    Commit 289e7bf5b authored by gunan<gunan@google.com>
    Committed by GitHub<noreply@github.com>:
    Fixes and improvements to cmake windows build. (#10354)
    
    * Disable linalg ops tests on windows.
    
    * Do not print the full source code path for logs on windows.
    
    ---
    Commit bc236cfc3 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Passes classification head to LinearClassifier.
    
    PiperOrigin-RevId: 157624020
    
    ---
    Commit cebd7e246 authored by Luke Iwanski<luke@codeplay.com>
    Committed by Shanqing Cai<cais@google.com>:
    [OpenCL] Cleans debug ops (#10334)
    
    * [OpenCL] Cleans debug ops
    
    * Acts on feedback from #10334#discussion_r119452513
    
    * Acts on #10334#discussion_r119459463
    
    ---
    Commit fd6c3c4f1 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fixes flaky test in dnn_linear_combined_test.
    
    PiperOrigin-RevId: 157622951
    
    ---
    Commit c9cc388dc authored by Asim Shankar<ashankar@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Avoid CHECKs in BundleReader, propagate errors instead.
    
    Motivation:
    We'd like to evolve the checkpoint format over time (e.g., enable
    different types of compression). Without this change, a TensorFlow
    version that encounters a format that it doesn't understand would CHECK fail
    with an unhelpful error message.
    
    With this, it propagates a clearer error message up, giving the user some
    hints about what could be wrong.
    
    I don't have a unittest for this - I thought about writing a bundle and
    then strategically corrupting the bytes on disk before reading it back,
    but that seems a bit much. The intention of this change is to enable
    graceful reporting of forward compatibility breakages. Ideas for an
    appropriate unittest are appreciated.
    
    PiperOrigin-RevId: 157620358
    
    ---
    Commit ee05b8b69 authored by Wei Ho<weiho@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fix to remove TF op usage outside of the initializer fn (due to deferred execution of initializer fn, this prevent issues with graph mismatch).
    
    PiperOrigin-RevId: 157620177
    
    ---
    Commit e8d17ea8c authored by Benoit Steiner<bsteiner@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Materialize shapes that are known at graph construction time into constants
    that can be folded
    
    PiperOrigin-RevId: 157619380
    
    ---
    Commit dc0427d48 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Directly depend on the used libraries
    
    Do not rely on transitive dependencies.
    
    PiperOrigin-RevId: 157618184
    
    ---
    Commit 964d1a509 authored by Yuan Yu<yuanbyu@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fix a bug that an erroneous control edge can be introduced when loops are nested in control dependency context.
    
    PiperOrigin-RevId: 157616919
    
    ---
    Commit 2de94bbb8 authored by Eli Bendersky<eliben@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [XLA] Add an option to set the "generate HLO graph" regex without a flag.
    
    Pipes the option through xla.proto ExecutionOptions, to HloModuleConfig, which
    can then be accessed throughout the compiler.
    
    PiperOrigin-RevId: 157615458
    
    ---
    Commit d3c0482e6 authored by My name is<raviqqe@gmail.com>
    Committed by gunan<gunan@google.com>:
    Fix a typo in export_output.py (#9975)
    
    ---
    Commit 0c75d9f52 authored by ddurham2<ddurham@davyandbeth.com>
    Committed by gunan<gunan@google.com>:
    Adding lost documentation to tf.abs from the old tf.complex_abs when it learned how to work on complex data. (#9954)
    
    ---
    Commit 84661fa73 authored by Benoit Steiner<bsteiner@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Propagate control dependencies during constant folding
    
    PiperOrigin-RevId: 157610040
    
    ---
    Commit a3520340e authored by gunan<gunan@google.com>
    Committed by GitHub<noreply@github.com>:
    Improve windows bazel python test suite. (#10305)
    
    * Improve windows bazel python test suite.
    
    - Create new tags, no_windows and no_windows_gpu
    - Instead of a separate maintained list, use bazel tags to exclude tests.
    - Tag all the python tests that are known to have issues in windows.
    
    * Also blacklist neon_depthwise_conv_ops_test in windows.
    
    * Only build tests in CPU windows tests.
    
    * Only build tests in GPU windows tests.
    
    * Also disable session_test on windows.
    
    * Only run py tests on windows, and only build tests that are not
    disabled.
    
    ---
    Commit a6f284ca4 authored by Jianwei Xie<xiejw@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Adds integration tests for LinearRegressor.
    
    PiperOrigin-RevId: 157604107
    
    ---
    Commit d21bf7d75 authored by Francois Chollet<fchollet@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Backport changes from Github master.
    
    PiperOrigin-RevId: 157603238
    
    ---
    Commit 43bfc138c authored by Shanqing Cai<cais@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fix OSS compilation error in tfprof_main.cc
    
    PiperOrigin-RevId: 157602449
    
    ---
    Commit 904a3d075 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fixing issue with cuda compilation related to missing include (exception is only thrown when running with sandboxing on)
    
    PiperOrigin-RevId: 157602401
    
    ---
    Commit f59203c98 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Shard cholesky_op_test.
    
    PiperOrigin-RevId: 157601172
    
    ---
    Commit 3fdbb5579 authored by Amit Patankar<amitpatankar@google.com>
    Committed by Amit Patankar<amitpatankar@google.com>:
    Merging rc1 back into master.
    
    ---
    Commit be5d98a8b authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Adds integration tests for DNNClassifier.
    
    PiperOrigin-RevId: 157592010
    
    ---
    Commit a05de6cd2 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Change reporting feature importances in RandomForestEstimator to run at the end of training, instead of part of the inference graph.
    
    PiperOrigin-RevId: 157591575
    
    ---
    Commit e96f1142f authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Remove unnecessary casts
    
    PiperOrigin-RevId: 157591439
    
    ---
    Commit 5f8571a6b authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fix missing namespace comments
    
    PiperOrigin-RevId: 157591364
    
    ---
    Commit eeb0b4067 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Go: Update generated wrapper functions for TensorFlow ops.
    
    PiperOrigin-RevId: 157573997
    
    ---
    Commit 7f9674217 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Update ops-related pbtxt files.
    
    PiperOrigin-RevId: 157573723
    
    ---
    Commit 473a590c9 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Allow complex valued input for Cholesky decomposition.
    
    PiperOrigin-RevId: 157572536
    
    ---
    Commit 2d1860859 authored by Blake Hechtman<blakehechtman@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fix test name in array_elementwise_ops_test.
    
    PiperOrigin-RevId: 157552402
    
    ---
    Commit a7fff05e0 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    tfprof multi-step profiling.
    
    This allows users to fill in RunMetadata across different steps.
    1. It is useful for RL model which runs a subset of graph each step.
    2. It also gets averages of multi-step stats.
    
    PiperOrigin-RevId: 157552388
    
    ---
    Commit fe589d9e7 authored by Luke Iwanski<luke@codeplay.com>
    Committed by Benoit Steiner<benoitsteiner@users.noreply.github.com>:
    [OpenCL] Implementation improvements (#9117)
    
    * OpenCL Improvements
    
    * Registers Scatter and ScatterNd Ops for SYCL
    
    * Registers Stack op for SYCL
    
    * Fixes No sycl buffer found error for debug ops
    
    * Registers MatMul and Transpose Ops to SYCL device for double
    
    * Extends analyzer_cli_test.py test to cover SYCL
    
    * Fixes Transpose Op for double when on SYCL
    
    * Bumps Eigen version to fix double precision issue on SYCL
    
    * Extends SessionDebugTestBase to cover SYCL
    
    * Register SYCL implementations for random ops
    
    * Avoid functions that might not be defined on SYCL device (#51)
    
    * Avoid functions that might not be defined on SYCL device
    
    * Simplify by using Eigen math functions
    
    * OpenCL improvements
    
     - Bumps Eigen Version
     - Refactors Ops registration
     - Introduces workaround for Const Op related to the difference between
       CUDA which uses pointers and OpenCL that uses buffers/accessors
     - Extends memory types to cover DEVICE_SYCL as well
     - Introduces  GetSYCLDevice() method that returns list of supported devices
       with GPU device having the highest priority ( doesn't include blacklisted devices )
     - ::internal::Transpose -> tensorflow::internal::Transpose in order to
       avoid compilation reported error
     - re-introduces fix for bugged string replacement causing a lot of compilation
       warnings -c -> --include
     - Adds sycl_runtime to bazels ARRAY_DEPS
     - Replicates TF_CALL_GPU_PROXY_TYPES for SYCL
    
    * [OpenCL] Fixes an issue caused by switch to aligned allocator for sycl buffer (#53)
    
    * [Build] Use gcc/g++ as a host compiler to avoid #8394 (#54)
    
    * [OpenCL] Fixes Scatter Op
    
    * Fix testSimple and testConst in stack_op_test (#3)
    
    * Fix testSimple and testConst in stack_op_test
    
    * Create a specialisation of DoParallelConcatUpdate for SyclDevice and
    register it
    
    * Guard all code in TENSORFLOW_USE_SYCL
    
    * Do not use sycl device for int32
    
    * Registration of the Sycl version is now looking like the one for the GPU
    
    * Remove added empty line
    
    * Register batch normalization kernels for OpenCL (#61)
    
    * [OpenCL] RandomGamma has no GPU friendly implementation (#57)
    
    * [OpenCL] Compatibility fixes for TensorFlow 1.1.0-rc1
    
    * [OpenCL] Implements BatchMatmul Op for SYCL
    
    * Lowercase the device name when GPU or SYCL returned
    
    * [OpenCL] kernel_estimator_test.py assertEqual-> assertAlmostEqual due to floating point representation on the device
    
    * [Eigen] Version bump
    
    * GPU device name string manipulation is not needed anymore
    
    * [OpenCL] Adds SYCL to device backwards compatibility
    
    * [OpenCL] Extends core_rnn_test.py to run for SYCL device
    
    * [OpenCL] Minor optimizations for build script
    
    * [OpenCL] Enables skip folder list in build script
    
    * [OpenCL] Fixes ApplyAdamOp for Sycl device
    
    * [OpenCL] SYCL device improvements
    
    * [OpenCL] Fixes debug_ops's SEGFAULT for SYCL device
    
    * [Build] Adds hexagon to skipped folders list
    
    * [OpenCL] Removes EnterLameDuckMode from SYCL device and allocator
    
    * [OpenCL] Registers Unique Op for SYCL device
    
    * [OpenCL][Temporary] Disables tests for SYCL target due to features not being implemented yet
    
      Tests affected:
        - tensorflow/contrib/memory_stats/python/kernel_tests/memory_stats_ops_test.py
        - tensorflow/contrib/rnn/python/kernel_tests/core_rnn_test.py
        - tensorflow/python/kernel_tests/conv_ops_test.py
        - tensorflow/python/kernel_tests/depthwise_conv_op_test.py
        - tensorflow/python/kernel_tests/pooling_ops_3d_test.py
        - tensorflow/python/kernel_tests/pooling_ops_test.py
        - tensorflow/python/kernel_tests/scatter_nd_ops_test.py
        - tensorflow/python/training/adam_test.py
        - tensorflow/python/training/localhost_cluster_performance_test.py
        - tensorflow/python/training/training_ops_test.py
    
    * [OpenCL][Temporary] Disables failing tests for SYCL in order to establish regression baseline
    
      Tests affected:
        - tensorflow/python/debug/cli/analyzer_cli_test.py
        - tensorflow/python/debug/lib/session_debug_testlib.py
        - tensorflow/python/debug/lib/stepper_test.py
        - tensorflow/python/kernel_tests/unstack_op_test.py
        - tensorflow/python/ops/image_ops_test.py
    
    * [OpenCL] Take options.config.device_count() into consideration
    
    * [OpenCL] Fixes compilation warning
    
    * [OpenCL] device:SYCL:0 -> sycl:0
    
    * [OpenCL] Removes unwanted flags in building script
    
    Removes flags given to computecpp that enable SIMD instructions
    Removes duplicate flags
    
    * bool -> const bool
    
    * [OpenCL] sycl in test_util.gpu_device_name() -> is_sycl_enabled()
    
    * [OpenCL][Temporary] Disables failing tests for SYCL in order to establish regression baseline
    
      Test affected:
        - tensorflow/contrib/stateless/python/kernel_tests/stateless_random_ops_test.py
    
    * Imports test_util from tensorflow.python.framework
    
    * [OpenCL] Fixes formatting in Python code
    
    * [OpenCL] Extends session_test.py to cover SYCL device
    
    * [OpenCL] Cleans singleton class
    
    * [OpenCL] Keeping CUDA happy
    
    * [OpenCL][Temporary] Disables failing tests for SYCL in order to establish regression baseline
    
      Test affected:
       - tensorflow/contrib/rnn/python/kernel_tests/core_rnn_cell_test.py
       - tensorflow/contrib/seq2seq/python/kernel_tests/beam_search_ops_test.py
    
    * Added support for building with SYCL on ARM.
    
    * Acts on the review feedback from:
     - #9117#discussion_r113608975
     - #9117#discussion_r113609173
    
    * [OpenCL] Fixes scatter_nd_op_test
    
    * Fixes auto-merge mistake
    
    * [OpenCL] struct SyclDevice -> class SyclDevice
    
    * Revert "[OpenCL] struct SyclDevice -> class SyclDevice"
    
    This reverts commit addd43348c374a5379f67bb1e5ad084715722fc2.
    
    * [OpenCL] Reverting refactoring commit.
    
      As requested in the review #9117#issuecomment-298454466
      This change set will be re-introduced in smaller chunks.
    
    * Revert "[OpenCL] device:SYCL:0 -> sycl:0"
    
    This reverts commit cf16e60340b62d16c3764d71b716fe03d35f87a9.
    
    * Revert "[OpenCL] Adds SYCL to device backwards compatibility"
    
    This reverts commit b8401b5164199b7a169be1c1d8dea5001195c390.
    
    * Acts on the feedback from #9117#discussion_r115036905
    
    * control_flow_ops_py_test.py expects device name to be lower cased
    
    * Acts on the feedback from #9117#discussion_r115037222
    
    * Removes debug print
    
    * Removes not needed partial specialisation
    
    * [OpenCL] Registers ScatterNdFunctor for SYCL device
    
    * [OpenCL] Make it compile
    
    * [OpenCL] Follow gpu_device changes
    
    * [OpenCL] Adds cxx_builtin_include_directory for python lib
    
      Fixes bazels missing undeclared inclusions that appeared after
      merge with TensorFlow upstream
    
    * [OpenCL] Fixes Constant Op
    
    * [OpenCL] gXX-4.8 -> gXX
    
    * [OpenCL] Removes -D_GLIBCXX_USE_CXX11_ABI=0 as it breaks default compiler setup for Ubuntu 16.04
    
    * Revert "[OpenCL] kernel_estimator_test.py assertEqual-> assertAlmostEqual due to floating point representation on the device"
    
    This reverts commit 06c50c0a485f40c30a436f02c3fa7794e370c49d.
    
    * [OpenCL] CPU allocator is a singleton we should not delete it
    
    ---
    Commit 7aac2395c authored by Blake Hechtman<blakehechtman@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Merge a copies of copies.
    
    PiperOrigin-RevId: 157549434
    
    ---
    Commit 37d9d5f0e authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add some routines for managing summaries to slim.
    
    PiperOrigin-RevId: 157541902
    
    ---
    Commit d58cd2962 authored by Justine Tunney<jart@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fix weblas license mirror URL
    
    PiperOrigin-RevId: 157537115
    
    ---
    Commit 5c13ee13b authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Make images-related logic use the images plugin.
    
    Previously, fetching images and related data from TensorBoard used handlers within application.py. We now remove those handlers in favor of routes offered by the images plugin. ML Dash is updated as well.
    
    PiperOrigin-RevId: 157536471
    
    ---
    Commit 60394a3d1 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Reduce size of the no-winograd tests, but still large enough that
    ShouldIncludeWinogradNonfusedAlgo returns true.
    
    PiperOrigin-RevId: 157535386
    
    ---
    Commit 9501c4104 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Replace protobuf CopyFrom with assignment
    
    PiperOrigin-RevId: 157534272
    
    ---
    Commit 96698f7fd authored by Eugene Brevdo<ebrevdo@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [tf contrib seq2seq] Improve BeamSearchDecoder's ability to handle unknown shapes.
    
    Updated unit tests to contain inputs of unknown shape (at graph build time).
    Found an issue in the gather helper that stops it from properly propagating
    the batch size of the output shape.  This caused problems with tf.while_loop.
    Fixed.
    
    PiperOrigin-RevId: 157533937
    
    ---
    Commit 5c73d0102 authored by Neal Wu<wun@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Batch norm docs fix applied to _fused_batch_norm as well
    
    PiperOrigin-RevId: 157530527
    
    ---
    Commit abd4aa49a authored by Jonathan Hseu<jhseu@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fix docs for tf.abs() and tf.pow().
    
    PiperOrigin-RevId: 157528475
    
    ---
    Commit dd5ad6917 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Declarations of operators to support batch norm in xla
    
    PiperOrigin-RevId: 157527596
    
    ---
    Commit bbeaa1307 authored by Jianwei Xie<xiejw@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fix the expand_dim for label and weight for classifier heads.
    
    PiperOrigin-RevId: 157524909
    
    ---
    Commit 346021ab4 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Cleanup: Use C++ casts, remove redundant casts, use CHECK_OK
    
    PiperOrigin-RevId: 157522142
    
    ---
    Commit e405b0f6b authored by Francois Chollet<fchollet@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Refactoring of layer name autogeneration, to remove a graph serialization warning.
    
    PiperOrigin-RevId: 157520123
    
    ---
    Commit 5784e1e35 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add HasOutputProperties to check for pruned ops; Return
    device name instead of casting it to a short name (GPU:0/CPU:0); VLOG(2) when printing op device placement since it is a lot of output.
    
    PiperOrigin-RevId: 157519077
    
    ---
    Commit 2994444bf authored by Peter Hawkins<phawkins@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Issue a more user-friendly error message if a variable's initializer is from inside a control-flow scope, such as tf.cond() or tf.while_loop().
    
    Fixes #8604.
    
    PiperOrigin-RevId: 157516279
    
    ---
    Commit da2daf068 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Remove unused using declarations
    
    PiperOrigin-RevId: 157513772
    
    ---
    Commit 8b2e8b566 authored by Derek Murray<derek.murray@gmail.com>
    Committed by gunan<gunan@google.com>:
    Exclude Python test files from CMake PIP package. (#10302)
    
    * Exclude *_test.py files from the CMake-built PIP package.
    
    * Add stray _test.py file to the PIP package.
    
    * Nit. Convert tabs to spaces in tf_python.cmake
    
    ---
    Commit 2249a4ea8 authored by Dan Ringwalt<ringwalt@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fix control reaching the end of ProjectiveGenerator.
    
    PiperOrigin-RevId: 157510013
    
    ---
    Commit 040e2e20f authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Remove unneeded check for has properties in grappler.
    
    PiperOrigin-RevId: 157507665
    
    ---
    Commit 684006955 authored by Yun Peng<pcloudy@google.com>
    Committed by gunan<gunan@google.com>:
    Windows: Remove session_test from bazel_test_lib.sh (#10274)
    
    It was disabled in 49b17146d2e4f04192d16ed67574142de167f3a1
    ---
    Commit 890a0a407 authored by Gunhan Gulsoy<gunan@google.com>
    Committed by Gunhan Gulsoy<gunan@google.com>:
    Upgrade TF ci build and docker files to use bazel 0.5.0
    
    ---
    Commit 46db634e5 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Only run the no-winograd tests once each.
    Only run the no-winograd tests on GPU; this also fixes
    timeouts in asan and msan.
    
    PiperOrigin-RevId: 157505317
    
    ---
    Commit a6cd4e735 authored by Dandelion Man?<dandelion@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Remove all TB build references that circumvent TF's public API.
    
    This doesn't actually remove all the code references, lots of code references continue to work despite the BUILD references being removed. I think this is because depending on the public api transitively makes all of TensorFlow's guts available too.
    
    PiperOrigin-RevId: 157502987
    
    ---
    Commit dcc3cdce8 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Remove redundant get() calls and string conversions
    
    PiperOrigin-RevId: 157497932
    
    ---
    Commit af2b9d875 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fix the trace inputs functionality of the graph explorer.
    
    After migrating to d3 v4, the graph can no longer directly index into d3.Selections to obtain elements. Instead, we must use the nodes method of d3.Selection to generate an array of selected elements.
    
    PiperOrigin-RevId: 157493509
    
    ---
    Commit 5cf484584 authored by Jacques Pienaar<jpienaar@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [XLA] Small test that performs A*B+A and A*B+B.
    
    PiperOrigin-RevId: 157492992
    
    ---
    Commit b2355913b authored by Androbin<robin.richtsfeld@gmail.com>
    Committed by drpngx<drpngx@users.noreply.github.com>:
    remove some invalid entries (#10294)
    
    I noticed that some entries don't exist (anymore).
    This seems to be some kind of a consistency issue.
    
    More specifically:
    `tensorflow/contrib/ios_examples/camera/data`
    `tensorflow/contrib/session_bundle/testdata/saved_model_half_plus_two`
    `tensorflow/contrib/session_bundle/testdata/saved_model_half_plus_two/variables`
    
    This is the continuation of PR #10264
    ---
    Commit 367ec84f8 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add SampleEmbeddingHelper to do sampling at inference time
    
    PiperOrigin-RevId: 157487623
    
    ---
    Commit a3ba225d5 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add BatchMatMul execution cost prediction
    
    PiperOrigin-RevId: 157487507
    
    ---
    Commit 34a29fc3b authored by Eric Liu<ioeric@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [TF:XLA] preserve metadata when replacing HLO instructions.
    
    The motivation is to add metadata for HLO instructions that are created to replace existing HLO instructions during optimizations. The assumption is that the old instruction and the new instruction would perform the same function, and that they would be correlated to the same TF op. This might not always be correct since HLO optimizations can cross TF op boundaries. But still this seems to be better than nothing.
    
    Note that this still doesn't fully resolve missing OpMetadata after HLO optimizations; new instructions might be added without using ReplaceInstruction.
    
    PiperOrigin-RevId: 157484394
    
    ---
    Commit 092a7b6e6 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Disable keras lstm test in tsan.
    
    PiperOrigin-RevId: 157484268
    
    ---
    Commit 7280dafca authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Use "empty" member function to test for emptiness
    
    PiperOrigin-RevId: 157483181
    
    ---
    Commit 6c3b15915 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Expands integration tests in dnn_test.
    
    PiperOrigin-RevId: 157476608
    
    ---
    Commit 727193b1f authored by Androbin<robin.richtsfeld@gmail.com>
    Committed by drpngx<drpngx@users.noreply.github.com>:
    add missing import for `signal` package (#10264)
    
    * add missing import for `signal` package
    
    * add missing dependency for `signal` package
    
    * Update tf_python.cmake
    
    ---
    Commit 21461213d authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Remove unused BUILD dependencies
    
    PiperOrigin-RevId: 157473460
    
    ---
    Commit 4788ca2be authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fix handling of Infinity/NaN in line chart domain
    
    Test Plan:
      - Use the script listed below to generate data that has enough
        infinities for these values to not be treated as outliers.
      - Load the data into TensorBoard (`--logdir /tmp/infbug`) and look at
        the scalars plot; also look at the console.
      - Before this change, the chart is completely blank, and there is a
        console warning: "QuantitativeScales cannot take NaN or Infinity as
        a domain value. Ignoring."
      - After this change, there is no console output, and the chart appears
        as intended: a reasonable domain is shown, and the infinities just
        shoot off the chart.
    
    Generating script:
    ```py
    import tensorflow as tf
    
    LOGDIR = '/tmp/infbug'
    STEPS = 134
    
    def main():
      x = tf.Variable(3.1415)
      y = x.assign_add(x)
      tf.summary.scalar('y', y)
      summ = tf.summary.merge_all()
    
      sess = tf.Session()
      writer = tf.summary.FileWriter(LOGDIR)
      writer.add_graph(sess.graph)
      sess.run(tf.global_variables_initializer())
      for step in xrange(STEPS):
        writer.add_summary(sess.run(summ), step)
      writer.close()
    
    if __name__ == '__main__':
      main()
    ```
    
    PiperOrigin-RevId: 157472340
    
    ---
    Commit 49476a62c authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Remove unused namespace aliases
    
    PiperOrigin-RevId: 157468609
    
    ---
    Commit d83074847 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Use "nullptr" for null pointer values
    
    PiperOrigin-RevId: 157468186
    
    ---
    Commit b73fea6e2 authored by Tim Harley<tharley@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Refactor `tf.Operation.traceback` implementation in to methods of tf.Graph.
    
    Adds an `_extract_frame_info` method to allow derived classes to extend the
    information available in each op traceback, if desired. The default result of
    `tf.Operation.traceback` is unchanged.
    
    Also fixes a poorly scoped `pylint disable=line-too-long`, so adds the necessary
    enable/disable blocks to silence pylint for the offending docstrings.
    
    PiperOrigin-RevId: 157466174
    
    ---
    Commit f7ca8db7d authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [XLA] Improve shape inference error messages for DynamicSlice/DynamicUpdateSlice.
    
    PiperOrigin-RevId: 157461335
    
    ---
    Commit 8c2a079ec authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Adding a slot / accumulator warmstart initializer that overrides the provided partitioner at call time with one passed at construction time.  This is intended to be used for slot Variables (such as accumulators) associated with Optimizers, since these Variables are created in a fashion that relies on replicating the exact shape of the associated primary variables (see slot_creator).
    
    PiperOrigin-RevId: 157453498
    
    ---
    Commit 73d10599f authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Default CUDNN_HOME to CUDA_TOOLKIT_TARGET_DIR. The cuDNN distro is most naturally installed in the same directory as the CUDA SDK, so try to find it there if the user doesn't specify any other directory.
    
    PiperOrigin-RevId: 157436253
    
    ---
    Commit eb7cf9331 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Go: Update generated wrapper functions for TensorFlow ops.
    
    PiperOrigin-RevId: 157429266
    
    ---
    Commit 346dcc0a4 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Update ops-related pbtxt files.
    
    PiperOrigin-RevId: 157429078
    
    ---
    Commit 3d5ede131 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Update documentation for sparse_matmul op to reflect gradient calculation.
    
    PiperOrigin-RevId: 157428135
    
    ---
    Commit 822d64f0c authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fix embedding_lookup() bug where normalization did not work with ids of rank != 1.
    
    PiperOrigin-RevId: 157422220
    
    ---
    Commit 8cad6b824 authored by Jianwei Xie<xiejw@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Improve the error message for live set memory check.
    
    PiperOrigin-RevId: 157415647
    
    ---
    Commit 34dcd5b49 authored by Eugene Brevdo<ebrevdo@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    [tf contrib seq2seq] Bugfixes to BeamSearchDecoder
    
    Implementation by Cinjon Resnick.  He can't push this since he's traveling.
    I just copied the fix and added some small syntax tweaks to make the unit
    tests pass.  More comprehensive unit tests will come in the near future.
    
    Fixes at least part of #9904.
    
    BeamSearchDecoder:
    1. Fix the bug where we don't pass the next cell state through.
    2. Gather the cell state (and attention if that's a part of the model
       as an AttentionWrapper on the cell) according to the next_beam_ids.
    PiperOrigin-RevId: 157415564
    
    ---
    Commit f7ae1461c authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fix oversampling in the GPU version of multinomial due to an error in generating
    gumbel noise.  -log(-log(U)) gives infinity if U draws a hard 0.  Adds a tiny
    offset to U (2e-30) to avoid log(U) = -inf.
    
    The CPU sampling algorithm depends on the order of the logits which is
    undesirable and can also oversample the first logit if it is smaller than the
    smallest random float larger than 0 (~1e-7).  Switching to double precision
    internally mitigates these problems, although it doesn't fix them.  Slowdown
    is ~35% in the worst case.
    
    Also adds various tests that we would like the sampling to pass.
    
    CPU Benchmark before:
    
    32 10000 1 0.060 0.069 0.87
    32 10000 4 0.229 0.074 3.10
    32 10000 32 2.180 0.059 37.09
    32 100000 1 0.430 0.480 0.90
    32 100000 4 2.322 0.449 5.17
    32 100000 32 31.508 0.471 66.96
    128 10000 1 0.168 0.235 0.71
    128 10000 4 0.965 0.246 3.93
    128 10000 32 7.989 0.225 35.51
    128 100000 1 1.681 1.539 1.09
    128 100000 4 9.012 1.57 35.73
    128 100000 32 126.222 1.626 77.60
    
    CPU Benchmark after:
    
    32 10000 1 0.054 0.112 0.48
    32 10000 4 0.206 0.093 2.21
    32 10000 32 1.826 0.091 20.12
    32 100000 1 0.292 0.636 0.46
    32 100000 4 2.086 0.606 3.44
    32 100000 32 28.496 0.633 45.03
    128 10000 1 0.125 0.266 0.47
    128 10000 4 0.759 0.258 2.94
    128 10000 32 7.362 0.254 29.03
    128 100000 1 1.550 2.18 10.71
    128 100000 4 8.712 2.22 23.92
    128 100000 32 122.585 2.213 55.39
    
    PiperOrigin-RevId: 157414849
    
    ---
    Commit 62cf561f1 authored by Jianwei Xie<xiejw@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add numpy_input_fn integration for LinearRegressor and fix the expand_dim for label and weight.
    
    PiperOrigin-RevId: 157405237
    
    ---
    Commit 40c7e0dd7 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Go: Update generated wrapper functions for TensorFlow ops.
    
    PiperOrigin-RevId: 157402364
    
    ---
    Commit 2726c00ce authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Update ops-related pbtxt files.
    
    PiperOrigin-RevId: 157402063
    
    ---
    Commit e9d2fba8f authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fix comment describing ignore_longer_outputs_than_inputs.
    
    PiperOrigin-RevId: 157400110
    
    ---
    Commit 5f097217f authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    An initial step of eliminating all implicit broadcast at the HLO level.
    Guard the shape inference for binary ops behind a flag.
    
    PiperOrigin-RevId: 157373647
    
    ---
    Commit e78e5ec8a authored by Yangzihao Wang<yangzihao@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Set winograd nofused flag to be true by default.
    
    Disable winograd nonfused conv for certain input params to avoid a known bug in cuDNNv5 and cuDNNv6.
    
    PiperOrigin-RevId: 157352847
    
    ---
    Commit 3f9b69a50 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    In the CUDA path of depthwise_conv2d, add a fast variant for forward convolution when the input images are smaller than 16x16.
    
    PiperOrigin-RevId: 157347823
    
    ---
    Commit 848123e61 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fix incorrect condition to instantiate depthwise_ops introduced in commit 15d9f00fa. The change should have excluded depthwise_conv2d for doubles on windows debug builds, but it excluded it for all windows and all debug builds.
    
    PiperOrigin-RevId: 157345929
    
    ---
    Commit 060d67b34 authored by Taehoon Lee<taehoonlee@snu.ac.kr>
    Committed by Taehoon Lee<taehoonlee@snu.ac.kr>:
    Fix typos
    
    ---
    Commit 409419bcc authored by Mark Daoust<markdaoust@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    add closing code quotes
    
    PiperOrigin-RevId: 157339360
    
    ---
    Commit d20d0a623 authored by Jonathan Hseu<jhseu@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Fix the contrib estimator_test by updating the global step in all the appropriate spots.
    
    PiperOrigin-RevId: 157328239
    
    ---
    Commit d1144d3a9 authored by Juang, Yi-Lin<b02901026@ntu.edu.tw>
    Committed by Juang, Yi-Lin<b02901026@ntu.edu.tw>:
    Fix typos
    
    ---
    Commit fa8bb43b1 authored by lanhin<lanhin1@gmail.com>
    Committed by lanhin<lanhin1@gmail.com>:
    Fixed a comment typo in GraphView:InitializeNode(), executor.cc.
    
    ---
    Commit 9f13ae93f authored by Asim Shankar<ashankar@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Java: Update Maven release to 1.2.0-rc1
    
    PiperOrigin-RevId: 157294719
    
    ---
    Commit c8256769c authored by Gunhan Gulsoy<gunan@google.com>
    Committed by Gunhan Gulsoy<gunan@google.com>:
    Address comments and sanity check failures.
    
    ---
    Commit 344225a60 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Update ops-related pbtxt files.
    
    PiperOrigin-RevId: 157292254
    
    ---
    Commit eb2f6d041 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    VLOG(2) instead of VLOG(1) for detailed op printouts.
    
    PiperOrigin-RevId: 157291238
    
    ---
    Commit b4466279a authored by Shanqing Cai<cais@google.com>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    tfdbg: add runtime shape and dtype info to DebugNumericSummary
    
    PiperOrigin-RevId: 157291215
    
    ---
    Commit 4fb2425f8 authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    Add GraphOptimizer to Grappler item builder to do L1 optimizations and
    inlining.
    
    Op Counts Comparison (BNMT)
    Counts: Profile vs Grappler
    Op: Add, 968 vs 965
    Op: AddN, 2228 vs 2228
    Op: ApplyGradientDescent, 84 vs 84
    Op: BatchMatMul, 998 vs 998
    Op: Identity, 142 vs 105
    Op: MatMul, 63 vs 63
    Op: Mul, 10318 vs 10306
    Op: OneHot, 1 vs 1
    Op: Reshape, 8421 vs 8422
    Op: Select, 488 vs 488
    Op: Shape, 8132 vs 8131
    Op: Sigmoid, 942 vs 942
    Op: Softmax, 19 vs 19
    Op: StridedSlice, 58 vs 74
    Op: Sub, 1398 vs 1394
    Op: Tanh, 333 vs 333
    Op: Tile, 21 vs 21
    Op: Transpose, 39 vs 39
    PiperOrigin-RevId: 157288420
    
    ---
    Commit 8918fa9ef authored by A. Unique TensorFlower<gardener@tensorflow.org>
    Committed by TensorFlower Gardener<gardener@tensorflow.org>:
    BEGIN_PUBLIC
    Automated g4 rollback of changelist 157272843
    
    PiperOrigin-RevId: 158534336

commit 02ac85399d4fb35d5055ecf426632b9446a70041
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Thu Jun 1 11:30:36 2017 -0700

    Introduce new class Literal to replace protobuf Literal.
    
    This renames the existing Literal message to LiteralProto and introduces a new
    C++ class named Literal to replace it.
    
    The LiteralProto is only used at RPC boundaries, or when protobuf-specific
    functionality is required.  The Literal class offers a 'ToProto' function to
    generate a new LiteralProto message when necessary.
    
    Currently, all the static functions in class LiteralUtil, just forward to their
    counterparts in class Literal.  This will change in a future CL.
    
    Class Literal implements all the buffers as std::vectors.  The only exception
    is preds(), which given the std::vector<bool> representation, makes it unusable
    for the semantics we require (it's not possible to get the address of the
    underlying vector, for instance).
    
    The CL adds a BoolVector class to work around that issue.
    
    In future CLs, the std::vector representation may be changed to something more
    efficient, if needed.
    
    PiperOrigin-RevId: 157739125

commit 904a3d075dd3e241913e196fbe6f71bd30c870fb
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Wed May 31 10:27:03 2017 -0700

    Fixing issue with cuda compilation related to missing include (exception is only thrown when running with sandboxing on)
    
    PiperOrigin-RevId: 157602401

commit 931fd84bb72df0500f512d5d92ec0bef2ea461be
Author: Fei Sun <sunfei.china@outlook.com>
Date:   Thu May 18 02:00:48 2017 +0800

    fix numpy.prod and GatherGrad overflow for large tensors inside windows (#9780)
    
    * fix numpy.prod overflow for windows
    
    * fix GatherGrad large shape exception for windows
    
    * add __long__ for Dimension; modify comment according to review

commit 27c89207d2f31fe4b4b42c789b96d62cde4e2133
Author: Justine Tunney <jart@google.com>
Date:   Wed May 10 20:49:53 2017 -0700

    Migrate forked TensorBoard build to webfiles
    
    bazel run tensorflow/tensorboard/components/tf_tensorboard_d3v4:index
    
    This will bring up a local web server and display a vulcanized
    TensorBoard that is 95% working, with the exception of tf-graph, which
    isn't included.
    
    PiperOrigin-RevId: 155708877

commit b0ab95c7af7c051d78dd74bd0a3032ce35273ea6
Author: Shane <sffc@sffc1.com>
Date:   Wed May 3 20:38:21 2017 -0700

    Catch exception on tf_session.TF_NewStatus() (#9575)
    
    * Catch exception on tf_session.TF_NewStatus()
    
    "try" and "finally" without "except" is not sufficient to catch the exception.  The exception makes TensorFlow appear to be broken.  Fixes #8652
    
    * Catching an AttributeError instead of broad exception type

commit 1457d7ffdcee6a18619a74bdc465ffa60c0fd1ff
Author: Ian Langmore <langmore@google.com>
Date:   Wed May 3 14:31:45 2017 -0800

    sparse_ops:  Preserving static shape info in sparse_reshape, sparse_reorder, sparse_add, sparse_reset_shape in the cases where all input shapes are known and do not contain implicit "-1" dimensions.  Exceptions are raises when appropriate, preventing a dishonest static shape from being set.
    Change: 155013345

commit e184562ea5234e84592ee78f964522ffe1c2cbd6
Author: Alexandr Baranezky <admin@asterai.com>
Date:   Tue May 2 07:59:03 2017 +0300

    Added output information with path to  wrong JPEG file (#9555)
    
    * Added output information about wrong JPEG file
    
    * Identation
    
    * Switch from logging.fatal to raising runtime exception

commit 95f37ebf0bd46c328266f65bbd16d319c0efab3d
Author: Yong Tang <yong.tang.github@outlook.com>
Date:   Mon May 1 13:01:53 2017 -0700

    Fix build issue when `/usr/bin/python` path is not available (#9547)
    
    This fix tries to fix the build error where `PYTHON_BIN_PATH` is not
    used in `tf_version_info_genrule()` (which will cause build error
    if `python` is not available in the `PATH`).
    
    This could be an issue even if `python` is available yet a different
    python location is used in `./configure`.
    
    This fix fixes the issue by passing `$(PYTHON_BIN_PATH)` explicitly
    so that same python version could be used:
    ```udiff
    -      "$(location //tensorflow/tools/git:gen_git_source.py) --generate $(SRCS) \"$@\"",
    +      "$(PYTHON_BIN_PATH) $(location //tensorflow/tools/git:gen_git_source.py) --generate $(SRCS) \"$@\"",
    ```
    
    See issue description:
    
    In one of the build machines (Ubuntu 16.04) only python3 is available
    (/usr/bin/python3) without python 2:
    ```
    ubuntu@ubuntu:~/tensorflow$ python --version
    python: command not found
    ubuntu@ubuntu:~/tensorflow$ python3 --version
    Python 3.5.2+
    ubuntu@ubuntu:~/tensorflow$ which python3
    /usr/bin/python3
    ```
    
    After configure with `/usr/bin/python3`:
    ```
    Please specify the location of python. [Default is /usr/bin/python3]:
    ...
    ```
    
    The following is the error:
    ```
    ubuntu@ubuntu:~/tensorflow$ bazel build --config=opt //tensorflow/tools/pip_package:build_pip_package
    WARNING: /home/ubuntu/tensorflow/tensorflow/contrib/learn/BUILD:15:1: in py_library rule //tensorflow/contrib/learn:learn: target '//tensorflow/contrib/learn:learn' depends on deprecated target '//tensorflow/contrib/session_bundle:exporter': Use SavedModel Builder instead.
    WARNING: /home/ubuntu/tensorflow/tensorflow/contrib/learn/BUILD:15:1: in py_library rule //tensorflow/contrib/learn:learn: target '//tensorflow/contrib/learn:learn' depends on deprecated target '//tensorflow/contrib/session_bundle:gc': Use SavedModel instead.
    INFO: Found 1 target...
    ERROR: /home/ubuntu/tensorflow/tensorflow/core/BUILD:1363:1: Executing genrule //tensorflow/core:version_info_gen failed: bash failed: error executing command /bin/bash -c ... (remaining 1 argument(s) skipped): com.google.devtools.build.lib.shell.BadExitStatusException: Process exited with status 127.
    /usr/bin/env: 'python': No such file or directory
    Target //tensorflow/tools/pip_package:build_pip_package failed to build
    Use --verbose_failures to see the command lines of failed build steps.
    INFO: Elapsed time: 3.548s, Critical Path: 0.20s
    ```
    
    Signed-off-by: Yong Tang <yong.tang.github@outlook.com>

commit 9e7bf403817a3acd4e8d865b041f37609564076e
Author: drpngx <drpngx@users.noreply.github.com>
Date:   Mon Apr 10 13:55:56 2017 -0700

    Branch 152703253 (#9112)
    
    * Improve py_func error handling.
    
    Automatically translate some python errors into corresponding TF errors at runtime.
    Change: 152156821
    
    * Update interaction with libpng so that we use the public API instead of
    knowledge of the internal libpng data structures.
    Change: 152167754
    
    * TensorBoard plugins now contain their own name/route prefix.
    Change: 152167807
    
    * Passes trainable flag to separable_conv2d biases.
    Change: 152170239
    
    * Saving resource variables with a caching device.
    Change: 152171539
    
    * Drop loss from estimator_spec.eval_metric_ops, as required by core Estimator.
    Change: 152179924
    
    * sample_stats.percentile DOCFIX.
    Change: 152182295
    
    * Added a memory optimizer to grappler.
    Change: 152184170
    
    * Change default behavior of the tf runs selector:
    
    - If there are fewer than 41 runs, enable them all by default
    - If there are 41 runs or more, disable them all by default
    
    This is in response to user complaints that having it enable only the first ten runs by default was confusing, because it was not obvious to users that some runs had been disabled.
    However, it still solves the initial user complaint that having very many runs simultaneously enabled would lag the UI.
    
    I also changed the "toggle all runs" button to try to turn everything off before turning everything on.
    Also, I improved the logic for detecting when the runs selection is back in the default state, so that we can avoid generating long URI strings wherever possible.
    Change: 152188948
    
    * Autogenerated Change: Change TensorBoard TAG to 52
    Change: 152189000
    
    * Remove warning that only happening with config cuda.
    Change: 152189205
    
    * Make resource variable shared name consistent with non-resource variables.
    
    Remove colocation constraint from resource variable cached value with the
    variable itself.
    Change: 152192203
    
    * Add a way to specify the optimization order; refactor and add constant folding to meta optimizer.
    Change: 152193646
    
    * Backport fixes and improvements from external Keras.
    Change: 152198296
    
    * Merge changes from github.
    Change: 152200430
    
    * Go: Update generated wrapper functions for TensorFlow ops.
    Change: 152200754
    
    * Update ops-related pbtxt files.
    Change: 152203174
    
    * Make ImportGraphDef() work with functions.
    
    In addition to modify graph_constructor.cc, this patch adds some other
    functionality to enable importing fucntions:
    * Ability to add FunctionDefLibraries to Graphs and
      FunctionLibraryDefinitions (in addition to existing functions)
    * FunctionDefsEqual() utility function
    Change: 152205258
    
    * Expand contrib test to more than just test targets.
    Change: 152206822
    
    * Preserve graph version during optimization
    Change: 152213262
    
    * Exclude enter and exit nodes from shape refiner's constant folding.
    Change: 152213637
    
    * Allow reshape_mover and algebraic_simplifier to make multiple mutations, by avoiding the short-circuit
    std::any_of.
    Change: 152232810
    
    * Fix dynamic_rnn transpose bug (can input/output non-3d tensors).
    
    Also a few cleanups to RNN code.
    Change: 152267628
    
    * Fix flaky tests
    Change: 152272801
    
    * Add an auto parallelization grappler optimization pass.
    Change: 152276787
    
    * Change json.decode.JSONDecodeError to ValueError.  JSONDecodeError seems to be
    the exception used in the simplejson module, not the json module.
    Change: 152278012
    
    * Internal change.
    Change: 152281471
    
    * [XLA] Force buffer sharing of separate while instructions.
    Change: 152288540
    
    * replica_device_setter should work for resource variables
    Change: 152289915
    
    * Fix ./configure script
    1. Add %workspace% in .bazelrc file when using import statement
    2. Write action_env into bazelrc file for required environment variables for OpenCL support
    Change: 152290700
    
    * Pointing a number of Tensorboard graph visualization-related help links to the new locations for the correspondent API documentation.
    Change: 152293459
    
    * Restore most of pull request #8606
    
    Pull request #8606 added str(Label(...)) for most dependencies in
    tensorflow.bzl, allowing most functions to be used from repositories which
    include TensorFlow as a submodule.  Unfortunately, it broke when pulled into
    Google and was removed in cl/152200430.  This CL restores the change, except
    for two Android-only functions; these were the only problematic bits.
    Change: 152297413
    
    * Removed dead code in Estimator.
    Change: 152297597
    
    * Assert rank is at least equal to new_rank for `_sparse_inner_flatten`.
    Change: 152303319
    
    * Extend quantization ranges to include 0.0f.
    Change: 152304380
    
    * Remove Keras config file saving.
    Change: 152306552
    
    * API backwards compatibility tests.
    Change: 152310869
    
    * [TF:XLA] Add a test for an R3 -> R4 broadcast.
    Change: 152313967
    
    * Fix the problem that no enough placeholders for persistent tensor
    batch delete
    
    The deleter_key is always a device_name, hence there is only one
    of it. Hence, we cannot delete >1 handles at one time.
    
    In the fix, it creates delete placeholder on demand, the max
    number of placeholders is _DEAD_HANDLES_THRESHOLD.
    Change: 152322770
    
    * [XLA] Add several reduction tests.
    Change: 152323510
    
    * Added the memory optimizer to the meta optimizer.
    Change: 152323689
    
    * Started a set of utilities to categorize op types
    Change: 152329057
    
    * Add AudioSpectrogram op to TensorFlow for audio feature generation
    Change: 152332221
    
    * Update ops-related pbtxt files.
    Change: 152332812
    
    * Automated rollback of change 152332221
    Change: 152333917
    
    * Call Py_CLEAR on dead fields during TF_RESOURCE-to-ndarray conversion
    Change: 152338333
    
    * [TF contrib seq2seq] Initial, incomplete implementation of beam search decoder.
    
    **DOES NOT WORK, pushed for collaboration only**
    Change: 152343927
    
    * [XLA] Change HloPassPipeline to disallow Add* calls after Run.
    Change: 152345578
    
    * Automated rollback of change 152332812
    Change: 152349057
    
    * Remove all 64/32 bit compiler warnings from core/ops.
    Change: 152353506
    
    * libtensorflow.so: Don't export private symbols.
    
    With this change, libtensorflow.so will only export
    functions defined in c_api.h. This also results in
    a decreased binary size of libtensorflow.so.
    
    On Linux the decrease was from roughly 150MB to 67MB.
    On OS X it was from roughly 101MB to 82MB.
    
    Also fixes #8923
    Change: 152366053
    
    * Add Elu ops in XLA.
    Change: 152383201
    
    * Fixed test. ('broadcast_dims' has size 1)
    Change: 152383633
    
    * Add more detailed error message for rank assertion in _sparse_inner_flatten.
    Change: 152397909
    
    * tensor_bundle: propagrates errors related to directory creation.
    Change: 152401909
    
    * matrix_adjoint added to contrib/linalg/linear_operator_util
    Change: 152404828
    
    * Add an is_active method to plugins
    
    This method determines whether a plugin is active. A plugin may be inactive if say it lacks data. This new is_active method allows us to add a route to TensorBoard noting which plugins are active. The frontend could then avoid querying routes of inactive plugins.
    Change: 152406232
    
    * Replace a gather op for shapes by a stack op so dilated convolutions can be
    placed on GPU even with strict placing (before the gather went to CPU).
    Change: 152411159
    
    * [TF:XLA] Implement BatchToSpace, BatchToSpaceND, SpaceToBatch, SpaceToBatchND.
    Fix crashes in core implementations of the same operators for zero-sized blocks.
    Change: 152416903
    
    * Estimator saves relative paths in checkpoint.
    Change: 152420211
    
    * Fix layers_test exception regex matching.
    Change: 152422855
    
    * Unhide bijectors. Correct TransformedDistribution docstring.
    Change: 152424418
    
    * Choosing a saner default for min_eval_frequency in the constructor for Experiment for the GCS file system, because the default of 1 causes performance problems.
    Change: 152439984
    
    * Inherit use_resource from scope for partitioned variables.
    Change: 152442103
    
    * Support quantized reshape in hexagon runtime
    Change: 152445539
    
    * tfdbg CLI: add command list_source (ls) + UI fixes and improvements
    
    The new list_source (shorthand: ls) command lists Python source files responsible for constructing the nodes and tensors encountered in the run() call.
    
    It divides the source files into two categories and list them separately.
    1) files that are not part of the TensorFlow Python library, and
    2) files that are a part of it.
    
    The list contains information about how many nodes, tensors and dumps of tensors the files is responsible for. The file paths contain clickable links to the existing print_source/ps command.
    
    The list_source/ls command supports filtering by file-path and node-name regex patterns.
    
    UI fixes:
    * Fixed inconsistent black vs. transparent background color that made the layout look messy on some terminal types. Now using the transparent color for default font color consistently.
    * In the print_source command output, add clickable links to expand source lines and graph elements.
    Change: 152446002
    
    * tfcompile: Be a little more verbose about missing required flags.
    
    Fixes #9014
    Change: 152446338
    
    * Disable failing test cases in pooling_ops_test.
    Change: 152447322
    
    * Register more types for tf.image_crop_and_resize(). Resolves #9020.
    Change: 152448160
    
    * Automated rollback of change 152439984
    Change: 152450929
    
    * Add a route to TensorBoard for fetching plugin names
    
    Specifically, we add a /data/plugins_listing route to the TensorBoard application. This route responds with an object mapping the name of each initialized plugin to whether it is active.
    
    This route could help the frontend avoid issuing requests to inactive plugins.
    
    Ordered the listing of routes within application.py so there is a little more organization.
    
    Refactored the test for application to use a fake plugin.
    Change: 152451390
    
    * Added the ability to retrieve the amount of usable gpu memory
    Change: 152453470
    
    * Allow to set session ConfigProto in RunConfig and use it in Estimator.
    Change: 152454548
    
    * Colocate ResourceVariable reads with their handles.
    Change: 152455939
    
    * tfdbg: update doc for new command list_source/ls
    Change: 152456128
    
    * Make rnn directions slightly easier to follow.
    Change: 152456296
    
    * Internal change
    Change: 152458104
    
    * Adds batch renormalization.
    
    NOTE: if you use renormalization, you might want to use faster moving average updates, i.e. lower `decay` values.
    Change: 152458872
    
    * When using ImportGraphDef with a passed in ShapeRefiner, use the
    producer version of the GraphDef when importing; the ShapeRefiner
    may be initialized with a different graph_def_version, so we need
    to be able to override it.
    
    The test failed without the change to graph_constructor and passes with it.
    The test uses a legacy graph that is supported (reduction shape).
    Change: 152459169
    
    * Allow any iterable for `export_strategies` arg.
    Change: 152461826
    
    * Log steps/sec every 100 steps in MonitoredSession, as before.
    Change: 152465320
    
    * Fixes documentation to note that the in case of ties the identity of the return value of ArgMin and ArgMaxis not guaranteed .
    Change: 152465346
    
    * Automated rollback of change 152465346
    Change: 152465844
    
    * Fix shape inference fn on _ParallelConcatStart.
    Change: 152466076
    
    * Fix getting started guide
    
    Explain numerical differences in loss
    fix one example to print
    Change: 152466119
    
    * Remove superfluous mode argument.
    Change: 152467334
    
    * Add a tool that converts HLO computations to tensorflow GraphDef which can be visualized on Tensorboard.
    
    This CL defines basic tensorflow::OpDef for each HLO instruction/node. More attributes (e.g. shapes, colors) will be added in the future.
    Change: 152477918
    
    * [TF:XLA] Increase shard count of //third_party/tensorflow/compiler/tests:spacetobatch_test to reduce flakiness when built under ASAN.
    Change: 152496244
    
    * Make projector plugin backend read assets saved via the PluginAssets API.
    
    At the same time, keep backwards compatibility with the old way of looking up assets.
    Change: 152504793
    
    * Move MNIST pointers to mirror hosted by the CVDF on Google Cloud.
    Fixes: #9031
    Change: 152504901
    
    * Merge changes from github.
    Change: 152508170
    
    * Update API after changing default step couter frequency before.
    Change: 152517535
    
    * Move a few random op helper functions to header files
    
    1. shape_inference::RandomShape
    2. OpKernel::MakeShape(Tensor, TensorShape*)
    Change: 152522156
    
    * addresses the divide by zero bug
    Change: 152522488
    
    * Clarify doc on tf.assign.
    Change: 152523909
    
    * Sparse adam for resource variables.
    Change: 152525327
    
    * Automated rollback of change 152310869
    Change: 152528732
    
    * Add an env_var tf_sync_on_finish_bool that block until device has finished all queued operations in a step if true.
    Change: 152533676
    
    * Add more node attributes for HloInstruction on Tensorboard e.g. shape and layout etc.
    Change: 152534472
    
    * Add tf.complex64 GPU support to tf.gather.
    
    Also add ldg specializations for std::complex.
    Change: 152537848
    
    * Formatting changes
    Change: 152544842
    
    * Upgrade TensorBoard TypeScript to 2.2.1
    
    See also: #8326
    Change: 152545950
    
    * TEST:  Getting reasonable test sizes on linalg library, removing need for
    sharding.
    Change: 152546409
    
    * Disabling _testSourceUtilModuleReturnsTrue as its causing opensource issues.
    Change: 152548721
    
    * Fix race due to unsafe buffer forwarding in maxpooling second order gradients added in #6664.
    Re-enable previously flaky tests.
    Clean up a few minor things in maxpooling_op_gpu.cu.cc
    Change: 152550050
    
    * LinearOperator:  adjoint_arg kwarg added to all operators.  Now,
    operator.apply(x, adjoint_arg=True) means that the adjoint of 'x' is taken
    before application of operator.  Sometimes this is done more efficiently than
    simply taking adjoint.
    Change: 152560471
    
    * Adds weighted_average_loss metric key.
    Change: 152560999
    
    * Documentation: Fix bug in manual device placement example
    Change: 152563392
    
    * Change for internal compatibility.
    
    * Use std::vector for storage instead of map.
    Do the sorting inplace and return the same vector to avoid any copies.
    On larger streams it is about 50% faster.
    Change: 152576112
    
    * Add tf.add_n GPU support for complex64/complex128.
    
    Also adds a unit test for tf.add_n.
    Change: 152577190
    
    * - Adds support for nested types in tf.case and tf.cond.
    - Adds a "strict" mode which disables silent unpacking of singleton lists.
    - Adds shape inference to tf.case.
    - Adds a lot of unit tests.
    Change: 152581097
    
    * [XLA] Add support for folding transpose into convolution
    Change: 152581336
    
    * Add a smoke test to ensure that the doc generator runs.
    Change: 152592164
    
    * Add tensorboard to the _do_not_descend_map of the PublicAPIVisitor.
    Change: 152592268
    
    * Add auto parallelization to meta optimizer. Enable MetaOptimizer if any one of the optimizers is on.
    Change: 152598517
    
    * Update ops-related pbtxt files.
    Change: 152629248
    
    * Prevent the renorm_weight from being updated too early.
    Change: 152631776
    
    * Automated rollback of change 152528732
    Change: 152652473
    
    * Construct TensorBoard dashboards in a JS list
    
    Previously, adding a dashboard to TensorBoard involved changing logic in several places.
    
    As part of this effort, added constructors to dashboards. Tweaked logic in various dashboards to preserve original behavior. For instance, the graph dashboard can only perform fitting after the dashboard is attached to the DOM.
    Change: 152658532
    
    * Make CheckpointSaverListener visible next to CheckpointSaverHook.
    Change: 152662945
    
    * tfdbg CLI: minor bug fixes
    
    1: The calculation of the scroll command in the scroll bar didn't take into account that the y-coordinate of the scroll block is in the ScrollBar coordinate system, while the mouse click y-coordinate is in the screen coordinate system.
    
    2: The y position of the ScrollBar was off by one.
    
    3: The command box is not re-created after mouse-triggered commands, leading to strange-looking cursor position.
    Change: 152684294
    
    * Remove obsolete use of validate_indices from embedding_ops.py
    
    validate_indices is ignored, so it shouldn't appear in new code.
    Change: 152691948
    
    * Preparation of using GMock matchers in XLA tests.
    Change: 152691970
    
    * Replace RuntimeException by RuntimeError in coordinator documentation.
    Change: 152697758
    
    * Move the TensorBoard debugger plugin to be internal.
    
    This feature is currently not open-source anyway.
    Change: 152700267
    
    * Add a single-machine tf.learn Estimator implementation for the WALS solver.
    Change: 152700915
    
    * Add tf.contrib.training.python_input -- making it easy to feed data into
    TensorFlow from python coroutines.
    Change: 152701623
    
    * Show that QuantizeToFloat consistently introduces a small error. The
    error is equal to
      range_min - round(range_min / range_scale) * range_scale
    Change: 152702015
    
    * Internal Changes
    Change: 152703253
    
    * Remove tensorflow/tensorboard/plugins/debugger, as part of merge resolution.

commit 2ec3e137898d05cc3013b61241b16ee93e66beca
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Mon Apr 10 08:46:05 2017 -0800

    Replace RuntimeException by RuntimeError in coordinator documentation.
    Change: 152697758

commit 52dcb2590bb9274262656c958c105cb5e5cc1300
Author: Rohan Jain <rohan100jain@gmail.com>
Date:   Fri Apr 7 18:04:26 2017 -0700

    Branch 152550050 (#9059)
    
    * Improve py_func error handling.
    
    Automatically translate some python errors into corresponding TF errors at runtime.
    Change: 152156821
    
    * Update interaction with libpng so that we use the public API instead of
    knowledge of the internal libpng data structures.
    Change: 152167754
    
    * TensorBoard plugins now contain their own name/route prefix.
    Change: 152167807
    
    * Passes trainable flag to separable_conv2d biases.
    Change: 152170239
    
    * Saving resource variables with a caching device.
    Change: 152171539
    
    * Drop loss from estimator_spec.eval_metric_ops, as required by core Estimator.
    Change: 152179924
    
    * sample_stats.percentile DOCFIX.
    Change: 152182295
    
    * Added a memory optimizer to grappler.
    Change: 152184170
    
    * Change default behavior of the tf runs selector:
    
    - If there are fewer than 41 runs, enable them all by default
    - If there are 41 runs or more, disable them all by default
    
    This is in response to user complaints that having it enable only the first ten runs by default was confusing, because it was not obvious to users that some runs had been disabled.
    However, it still solves the initial user complaint that having very many runs simultaneously enabled would lag the UI.
    
    I also changed the "toggle all runs" button to try to turn everything off before turning everything on.
    Also, I improved the logic for detecting when the runs selection is back in the default state, so that we can avoid generating long URI strings wherever possible.
    Change: 152188948
    
    * Autogenerated Change: Change TensorBoard TAG to 52
    Change: 152189000
    
    * Remove warning that only happening with config cuda.
    Change: 152189205
    
    * Make resource variable shared name consistent with non-resource variables.
    
    Remove colocation constraint from resource variable cached value with the
    variable itself.
    Change: 152192203
    
    * Add a way to specify the optimization order; refactor and add constant folding to meta optimizer.
    Change: 152193646
    
    * Backport fixes and improvements from external Keras.
    Change: 152198296
    
    * Merge changes from github.
    Change: 152200430
    
    * Go: Update generated wrapper functions for TensorFlow ops.
    Change: 152200754
    
    * Update ops-related pbtxt files.
    Change: 152203174
    
    * Make ImportGraphDef() work with functions.
    
    In addition to modify graph_constructor.cc, this patch adds some other
    functionality to enable importing fucntions:
    * Ability to add FunctionDefLibraries to Graphs and
      FunctionLibraryDefinitions (in addition to existing functions)
    * FunctionDefsEqual() utility function
    Change: 152205258
    
    * Expand contrib test to more than just test targets.
    Change: 152206822
    
    * Preserve graph version during optimization
    Change: 152213262
    
    * Exclude enter and exit nodes from shape refiner's constant folding.
    Change: 152213637
    
    * Allow reshape_mover and algebraic_simplifier to make multiple mutations, by avoiding the short-circuit
    std::any_of.
    Change: 152232810
    
    * Fix dynamic_rnn transpose bug (can input/output non-3d tensors).
    
    Also a few cleanups to RNN code.
    Change: 152267628
    
    * Fix flaky tests
    Change: 152272801
    
    * Add an auto parallelization grappler optimization pass.
    Change: 152276787
    
    * Change json.decode.JSONDecodeError to ValueError.  JSONDecodeError seems to be
    the exception used in the simplejson module, not the json module.
    Change: 152278012
    
    * Internal change.
    Change: 152281471
    
    * [XLA] Force buffer sharing of separate while instructions.
    Change: 152288540
    
    * replica_device_setter should work for resource variables
    Change: 152289915
    
    * Fix ./configure script
    1. Add %workspace% in .bazelrc file when using import statement
    2. Write action_env into bazelrc file for required environment variables for OpenCL support
    Change: 152290700
    
    * Pointing a number of Tensorboard graph visualization-related help links to the new locations for the correspondent API documentation.
    Change: 152293459
    
    * Restore most of pull request #8606
    
    Pull request #8606 added str(Label(...)) for most dependencies in
    tensorflow.bzl, allowing most functions to be used from repositories which
    include TensorFlow as a submodule.  Unfortunately, it broke when pulled into
    Google and was removed in cl/152200430.  This CL restores the change, except
    for two Android-only functions; these were the only problematic bits.
    Change: 152297413
    
    * Removed dead code in Estimator.
    Change: 152297597
    
    * Assert rank is at least equal to new_rank for `_sparse_inner_flatten`.
    Change: 152303319
    
    * Extend quantization ranges to include 0.0f.
    Change: 152304380
    
    * Remove Keras config file saving.
    Change: 152306552
    
    * API backwards compatibility tests.
    Change: 152310869
    
    * [TF:XLA] Add a test for an R3 -> R4 broadcast.
    Change: 152313967
    
    * Fix the problem that no enough placeholders for persistent tensor
    batch delete
    
    The deleter_key is always a device_name, hence there is only one
    of it. Hence, we cannot delete >1 handles at one time.
    
    In the fix, it creates delete placeholder on demand, the max
    number of placeholders is _DEAD_HANDLES_THRESHOLD.
    Change: 152322770
    
    * [XLA] Add several reduction tests.
    Change: 152323510
    
    * Added the memory optimizer to the meta optimizer.
    Change: 152323689
    
    * Started a set of utilities to categorize op types
    Change: 152329057
    
    * Add AudioSpectrogram op to TensorFlow for audio feature generation
    Change: 152332221
    
    * Update ops-related pbtxt files.
    Change: 152332812
    
    * Automated rollback of change 152332221
    Change: 152333917
    
    * Call Py_CLEAR on dead fields during TF_RESOURCE-to-ndarray conversion
    Change: 152338333
    
    * [TF contrib seq2seq] Initial, incomplete implementation of beam search decoder.
    
    **DOES NOT WORK, pushed for collaboration only**
    Change: 152343927
    
    * [XLA] Change HloPassPipeline to disallow Add* calls after Run.
    Change: 152345578
    
    * Automated rollback of change 152332812
    Change: 152349057
    
    * Remove all 64/32 bit compiler warnings from core/ops.
    Change: 152353506
    
    * libtensorflow.so: Don't export private symbols.
    
    With this change, libtensorflow.so will only export
    functions defined in c_api.h. This also results in
    a decreased binary size of libtensorflow.so.
    
    On Linux the decrease was from roughly 150MB to 67MB.
    On OS X it was from roughly 101MB to 82MB.
    
    Also fixes #8923
    Change: 152366053
    
    * Add Elu ops in XLA.
    Change: 152383201
    
    * Fixed test. ('broadcast_dims' has size 1)
    Change: 152383633
    
    * Add more detailed error message for rank assertion in _sparse_inner_flatten.
    Change: 152397909
    
    * tensor_bundle: propagrates errors related to directory creation.
    Change: 152401909
    
    * matrix_adjoint added to contrib/linalg/linear_operator_util
    Change: 152404828
    
    * Add an is_active method to plugins
    
    This method determines whether a plugin is active. A plugin may be inactive if say it lacks data. This new is_active method allows us to add a route to TensorBoard noting which plugins are active. The frontend could then avoid querying routes of inactive plugins.
    Change: 152406232
    
    * Replace a gather op for shapes by a stack op so dilated convolutions can be
    placed on GPU even with strict placing (before the gather went to CPU).
    Change: 152411159
    
    * [TF:XLA] Implement BatchToSpace, BatchToSpaceND, SpaceToBatch, SpaceToBatchND.
    Fix crashes in core implementations of the same operators for zero-sized blocks.
    Change: 152416903
    
    * Estimator saves relative paths in checkpoint.
    Change: 152420211
    
    * Fix layers_test exception regex matching.
    Change: 152422855
    
    * Unhide bijectors. Correct TransformedDistribution docstring.
    Change: 152424418
    
    * Choosing a saner default for min_eval_frequency in the constructor for Experiment for the GCS file system, because the default of 1 causes performance problems.
    Change: 152439984
    
    * Inherit use_resource from scope for partitioned variables.
    Change: 152442103
    
    * Support quantized reshape in hexagon runtime
    Change: 152445539
    
    * tfdbg CLI: add command list_source (ls) + UI fixes and improvements
    
    The new list_source (shorthand: ls) command lists Python source files responsible for constructing the nodes and tensors encountered in the run() call.
    
    It divides the source files into two categories and list them separately.
    1) files that are not part of the TensorFlow Python library, and
    2) files that are a part of it.
    
    The list contains information about how many nodes, tensors and dumps of tensors the files is responsible for. The file paths contain clickable links to the existing print_source/ps command.
    
    The list_source/ls command supports filtering by file-path and node-name regex patterns.
    
    UI fixes:
    * Fixed inconsistent black vs. transparent background color that made the layout look messy on some terminal types. Now using the transparent color for default font color consistently.
    * In the print_source command output, add clickable links to expand source lines and graph elements.
    Change: 152446002
    
    * tfcompile: Be a little more verbose about missing required flags.
    
    Fixes #9014
    Change: 152446338
    
    * Disable failing test cases in pooling_ops_test.
    Change: 152447322
    
    * Register more types for tf.image_crop_and_resize(). Resolves #9020.
    Change: 152448160
    
    * Automated rollback of change 152439984
    Change: 152450929
    
    * Add a route to TensorBoard for fetching plugin names
    
    Specifically, we add a /data/plugins_listing route to the TensorBoard application. This route responds with an object mapping the name of each initialized plugin to whether it is active.
    
    This route could help the frontend avoid issuing requests to inactive plugins.
    
    Ordered the listing of routes within application.py so there is a little more organization.
    
    Refactored the test for application to use a fake plugin.
    Change: 152451390
    
    * Added the ability to retrieve the amount of usable gpu memory
    Change: 152453470
    
    * Allow to set session ConfigProto in RunConfig and use it in Estimator.
    Change: 152454548
    
    * Colocate ResourceVariable reads with their handles.
    Change: 152455939
    
    * tfdbg: update doc for new command list_source/ls
    Change: 152456128
    
    * Make rnn directions slightly easier to follow.
    Change: 152456296
    
    * Internal change
    Change: 152458104
    
    * Adds batch renormalization.
    
    NOTE: if you use renormalization, you might want to use faster moving average updates, i.e. lower `decay` values.
    Change: 152458872
    
    * When using ImportGraphDef with a passed in ShapeRefiner, use the
    producer version of the GraphDef when importing; the ShapeRefiner
    may be initialized with a different graph_def_version, so we need
    to be able to override it.
    
    The test failed without the change to graph_constructor and passes with it.
    The test uses a legacy graph that is supported (reduction shape).
    Change: 152459169
    
    * Allow any iterable for `export_strategies` arg.
    Change: 152461826
    
    * Log steps/sec every 100 steps in MonitoredSession, as before.
    Change: 152465320
    
    * Fixes documentation to note that the in case of ties the identity of the return value of ArgMin and ArgMaxis not guaranteed .
    Change: 152465346
    
    * Automated rollback of change 152465346
    Change: 152465844
    
    * Fix shape inference fn on _ParallelConcatStart.
    Change: 152466076
    
    * Fix getting started guide
    
    Explain numerical differences in loss
    fix one example to print
    Change: 152466119
    
    * Remove superfluous mode argument.
    Change: 152467334
    
    * Add a tool that converts HLO computations to tensorflow GraphDef which can be visualized on Tensorboard.
    
    This CL defines basic tensorflow::OpDef for each HLO instruction/node. More attributes (e.g. shapes, colors) will be added in the future.
    Change: 152477918
    
    * [TF:XLA] Increase shard count of //third_party/tensorflow/compiler/tests:spacetobatch_test to reduce flakiness when built under ASAN.
    Change: 152496244
    
    * Make projector plugin backend read assets saved via the PluginAssets API.
    
    At the same time, keep backwards compatibility with the old way of looking up assets.
    Change: 152504793
    
    * Move MNIST pointers to mirror hosted by the CVDF on Google Cloud.
    Fixes: #9031
    Change: 152504901
    
    * Merge changes from github.
    Change: 152508170
    
    * Update API after changing default step couter frequency before.
    Change: 152517535
    
    * Move a few random op helper functions to header files
    
    1. shape_inference::RandomShape
    2. OpKernel::MakeShape(Tensor, TensorShape*)
    Change: 152522156
    
    * addresses the divide by zero bug
    Change: 152522488
    
    * Clarify doc on tf.assign.
    Change: 152523909
    
    * Sparse adam for resource variables.
    Change: 152525327
    
    * Automated rollback of change 152310869
    Change: 152528732
    
    * Add an env_var tf_sync_on_finish_bool that block until device has finished all queued operations in a step if true.
    Change: 152533676
    
    * Add more node attributes for HloInstruction on Tensorboard e.g. shape and layout etc.
    Change: 152534472
    
    * Add tf.complex64 GPU support to tf.gather.
    
    Also add ldg specializations for std::complex.
    Change: 152537848
    
    * Formatting changes
    Change: 152544842
    
    * Upgrade TensorBoard TypeScript to 2.2.1
    
    See also: #8326
    Change: 152545950
    
    * TEST:  Getting reasonable test sizes on linalg library, removing need for
    sharding.
    Change: 152546409
    
    * Disabling _testSourceUtilModuleReturnsTrue as its causing opensource issues.
    Change: 152548721
    
    * Fix race due to unsafe buffer forwarding in maxpooling second order gradients added in #6664.
    Re-enable previously flaky tests.
    Clean up a few minor things in maxpooling_op_gpu.cu.cc
    Change: 152550050

commit 5fc14e22172722a115a282cbde8c4770e305aef5
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Thu Apr 6 12:48:33 2017 -0800

    Fix layers_test exception regex matching.
    Change: 152422855

commit 1f3a46868ddf4572b1b7c312da2f4ca229a2eb95
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Wed Apr 5 09:55:32 2017 -0800

    Change json.decode.JSONDecodeError to ValueError.  JSONDecodeError seems to be
    the exception used in the simplejson module, not the json module.
    Change: 152278012

commit 2de2d52164e2b3d0ddb69b7c1037452419de25ce
Author: Andrew Harp <andrewharp@google.com>
Date:   Thu Mar 23 14:20:36 2017 -0800

    Android: update TensorFlowInferenceInterface: replace error code returns with exceptions, use longs for dimensions, and simplify method signatures where possible.
    
    Note this is a breaking change and will cause the TF demo in tensorflow/examples/android to not work with older jars/.so binaries built from tensorflow/contrib/android
    Change: 151061702

commit 464ed246571a0da5d1fb5eca13b8dce0fce6f384
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Wed Mar 22 15:55:25 2017 -0800

    Add comments for how after_run() and end() behave if session.run() raises
    exception.
    Change: 150947137

commit 039c74293abfc8e9263ca80ab4facdde658dfb03
Author: Shanqing Cai <cais@google.com>
Date:   Wed Mar 22 09:24:00 2017 -0800

    tfdbg: Let LocalCLIDebugWrapperSession error out when OpErrors happen prior to graph execution
    
    Previously, LocalCLIDebugWrapperSession attempts to continue running and provide user with error information, instead of erroring out, even when OpError subtypes (e.g. FailedPreconditionError, InvalidArgumentError) occurred during the underlying Session.run() call. This works for errors that happen in the middle of the graph execution (e.g., most dimension mismatch errors). But if an OpError happens before any debug dump is generated, e.g., during partition graph construction due to invalid device names, LocalCLIDebugWrapperSession will mask the OpError and generate confusing error messages. The error messages complain about missing debug dump directory.
    
    For details, see the referred GitHub issue #8507.
    
    This CL fixes this issue by letting LocalCLIDebugWrapperSession raise the same exception as the unwrapped tf.Session does in case of this type of pre-graph execution OpErrors.
    
    Fixes: #8507
    Change: 150894042

commit 90d964f3382faf30d291aa3fbdb509844e1f042a
Author: Derek Murray <mrry@google.com>
Date:   Wed Mar 15 16:19:56 2017 -0800

    Avoid raising an exception when we fail to delete a session on shutdown.
    
    Fixes #3388.
    Change: 150265211

commit 90c5838c5d8fc672b020e4baa3d5138f3940cd03
Author: Vijay Vasudevan <vrv@google.com>
Date:   Wed Mar 15 14:33:34 2017 -0800

    Add the tensor shape to the Exception string when the image doesnt match.
    Change: 150251692

commit 85002f5be5c8d8b411af36e4f214f0de898fc1d4
Author: Sean Papay <person594@users.noreply.github.com>
Date:   Wed Mar 15 04:21:03 2017 +0100

    fixed a bug in tensordot (#8282)
    
    when one operand had a partially known shape, and the other
    operand had only one dimension, the function would incorrectly throw an exception

commit 23e1c11ed98b9b283dbe3d8b22a2194cb7af0c2a
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Tue Mar 14 10:59:01 2017 -0800

    Silence exception thrown by graph explorer when an op lacks a value for the "_output_shapes" attribute.
    
    This is in line with how the graph explorer shows nothing about the shape if the shape cannot be determined.
    
    Also, fix awkward indentation of 1.
    Change: 150095236

commit 98620314c6391e4a292ffa545af5337c88ae3bfc
Author: Martin Wicke <wicke@google.com>
Date:   Fri Mar 10 16:44:01 2017 -0800

    Add operators to classes in docs.
    
    Enables all names looking like __XXXX__. It also excludes all the symbols defined in "uninteresting" base classes such as Exception, type, object, etc., as well as everything
    defined by protobuf, and methods (but not properties) defined by namedtuple.
    
    Sorts methods to have __init__ and __new__ first.
    
    Corrects links to _pb2.py files to point to .proto files instead.
    
    Removes redundant separate pages for class and static methods.
    Change: 149813108

commit 25d24466a4c7e602202ab1464f19ac745c661f97
Author: Asim Shankar <ashankar@google.com>
Date:   Fri Mar 10 15:13:47 2017 -0800

    Java: Address a TODO on exception throwing.
    Change: 149803872

commit e73ceaebb209a1e577e7240fba41c692c89143d0
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Fri Mar 10 14:42:48 2017 -0800

    Log exception.
    Change: 149800303

commit d2fa8eaf544df43492b668c39df6ff32bec25629
Author: Andrew Harp <andrewharp@google.com>
Date:   Fri Mar 10 12:03:39 2017 -0800

    Android: Improve exception handling and logging during TensorFlow initialization:
    * improve logging during native library loading to reduce chance of RunStats error message being misleading
    * catch NPE for unfound ops during Graph loading to make bad node name issues easier to track down
    * catch IOException locally in TensorFlowImageClassifier.create() to give better error message
    * reduce camera preview size spam by adding all accepted/rejected entries on single lines
    * move onPreviewSizeChosen callback outside of try block so that NPE errors don't get interpreted as camera2 problems
    * correctly calculate initialization time
    * print nodes being used for input/output on inference failure to assist in debugging
    Change: 149783208

commit 3fbfdd5b9a0ddd86104a3bc696746f2d386463be
Author: Jiaming Liu <memono.liu@gmail.com>
Date:   Sun Mar 5 14:49:50 2017 -0800

    Fix a bug of initializing
    
    Prevent the exceptional illegal call of "initializer.__init__(shape, dtype, partition_info)" appears when the param "initializer" is an init_ops class instead of its instance.

commit 3a0924bc29940f334711d096cd10737af30cff43
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Fri Mar 3 13:47:31 2017 -0800

    Fix the error message returned from _init_from_args function in QueueRunner to state that the input argument queue_closed_exception_types, if passed, should be of type 'tuple'.
    Change: 149149270

commit 1092bfd98c1533a8f04cdc4178d1dea15137599e
Author: Asim Shankar <ashankar@google.com>
Date:   Mon Feb 27 13:35:15 2017 -0800

    Java: Memory leak fix and Windows friendliness.
    
    - Delete memory allocated for exception error messages.
    - Use vsnprintf instead of vasprintf for allocating exception error messages
      since the latter doesn't seem to be easily available on Windows.
    Change: 148687623

commit fd87896df545baf1ba4ff1c6983680af3829fdc0
Author: Javi Ribera <jprat@purdue.edu>
Date:   Sun Feb 19 12:10:53 2017 -0500

    make training compatible with python3
    
    In python 3, ints cannot be compared with None, raising an exception.
    This fix avoids the comparison when 'max_number_of_evaluations' is None, thus
    making it compatible with both py2 and py3

commit 67d5327f1e04dcd97f73ce1cf28ef9cb4d3e6b5e
Author: Asim Shankar <ashankar@google.com>
Date:   Tue Feb 7 10:42:34 2017 -0800

    Java: Bugfix: Handle multiple outputs of a session run correctly.
    
    Also, plug a path where env->GetArrayLength() might have been called after an
    exception was thrown.
    Change: 146804085

commit 4a80e9f59f2ac4b042537901f9396ac59febc851
Author: Rizwan Asif <rizasif@gmail.com>
Date:   Fri Feb 3 23:41:12 2017 +0500

    Adding checks for broken bottleneck files (#7131)
    
    * Adding checks for broken bottleneck files
    
    An exception is raised when a broken cached bottleneck files is read. Such a file can be created as a result of sudden system failure. This commit refers the issue #2296
    
    * handling broken bottleneck files by recreating
    
    The patch detects the broken bottleneck files (might be created as a result of sudden system shut down) and recreates them if required.
    
    * minor changes for broken bottleneck handling
    
    Reverting some part of code for bottleneck handling changes
    
    * Resolved indentation errors
    
    This commit refers to the issue #2296
    
    * Indentation issue for broken bottleneck script
    
    This commit refers to pull request #7131 and issue #2296

commit e7322afe1c462371edb2f9bf6dbbf44c6caf4fcf
Author: Yuan (Terry) Tang <terrytangyuan@users.noreply.github.com>
Date:   Thu Feb 2 13:14:14 2017 -0600

    Catch dnn_hidden_units to avoid obsture error message (#7176)
    
    * Catch dnn_hidden_units to avoid obsture error message
    
    * Move the ValueError into the correct else block
    
    * Added new line to EOF dnn_linear_combined.py
    
    * Added unit test for NoDnnHiddenUnits exception

commit 433e706bfe0145845911bce0d26e44c9a821b4d4
Author: Milan Straka <milan@strakovi.com>
Date:   Wed Feb 1 22:27:13 2017 +0100

    Remove errorneous squeeze in `tf.contrib.losses.sparse_softmax_cross_entropy_loss` (#7021)
    
    * Remove errorneous squeeze.
    
    The tf.contrib.losses.sparse_softmax_cross_entropy_loss has an weights
    parameter which can be used to weight the individual batch elements.
    The weights parameter can have various shape, which are all taken care
    of in compute_weighted_loss.
    
    However, the sparse_softmax_cross_entropy_loss methods contains an
    errorneous squeeze of the weights. If some dimension of weights is not
    known, the number of dimensions after the squeeze is unknown, which
    causes the compute_weighted_loss method to throw an exception.
    However, if the squeeze in sparse_softmax_cross_entropy_loss is not
    called, compute_weighted_loss can deal even with unknown dimensions of
    weights.
    
    Note that tf.contrib.losses.softmax_cross_entropy_loss does not contain
    the squeeze of the weights, even if it uses the weights argument in an
    equal way.
    
    Should fix #6846.
    
    * Add tests for #6846 (dynamically shaped weights).
    
    Add tests for #6846 -- dynamically shaped weights of the
    contrib.losses.softmax_cross_entropy and
    contrib.losses.sparse_softmax_cross_entropy losses.

commit c7e0b4dae4f91f25b56aa7f53d8cca6e7ee0e0e5
Author: Eron Wright <ewright@live.com>
Date:   Mon Jan 30 14:54:32 2017 -0800

    [Java] Bulk data transfer for Tensor class (#6577)
    
    * [Java] Bulk data transfer for Tensor class
    
    Introduces bulk data-access pattern to `Tensor`, with tests.
    - `Tensor::create(DataType dt, long[] shape, Buffer data)` method
    - `Tensor::getDataByteSize()` method
    - `Tensor::readData(Buffer data)` method
    
    Details:
    - rename `allocate` to `allocateNDArray` since it is designed for the
    NDarray scenario.
    - introduce a native `allocate` method that accepts the data size in
    bytes, rather than computing the size with shape information (which
    isn’t always sufficient, e.g. TF_STRING).
    - introduce a private `buffer` accessor to access the TF data as a
    direct `ByteBuffer`.
    - implement `create` and `readData` methods to read and write data
    using a variety of `Buffer` variants.   Supports typed buffers and
    direct buffers.
    
    * [Java] Bulk data transfer for Tensor class
    
    - rename readData to writeTo
    - implement writeTo overloads for typed buffers
    - implement create overloads for typed buffers
    - rename byteSize, add numElements
    - consolidate allocate methods, use static_cast
    - rework incompatibleBuffer helper
    - rename getBuffer
    - test improvements
    - formatting
    
    * [Java] Bulk data transfer for Tensor class
    
    - comment fix
    
    * [Java] Bulk data transfer for Tensor class
    
    - removed datatype parameter
    - strict check for buffer overflow or underflow
    - improved exception messages
    - moved source code for ‘create’
    - reworked tests for ‘create’

commit df98794b3e0ca765814809056fbf246e504ef6c5
Author: Asim Shankar <ashankar@google.com>
Date:   Thu Jan 12 11:27:40 2017 -0800

    Android: Use the Classifier interface in the activities.
    
    Change the member variable to be of type Classifier interface
    instead of the implementation (TensorFlowImageClassifier) in the
    activity class.
    
    My intention is to create new Classifier implementations that use
    the TensorFlow Java API (org.tensorflow.Graph, Session etc.) instead
    of the Android contrib API
    (org.tensorflow.contrib.android.TensorFlowInferenceInterface). This
    re-organization will make the switch between Classifier implementations
    easier during testing.
    
    While at it, some minor cleanups:
    - Get rid of unnecessary "throws IOException"
    - Use a factory function instead of an initializer function.
    Change: 144348772

commit b7a6a82c35330c1e32f4a3051a2332515fdceaeb
Author: Vijay Vasudevan <vrv@google.com>
Date:   Thu Jan 5 16:30:18 2017 -0800

    Use 'priority' field in device registration to allow
    external devices to register custom priority orderings.  By default,
    external devices are prioritized below CPU and GPU (maintaining
    existing behavior as of recently), but can choose to register a higher
    number if desired.
    
    The default priority is set to 50, and our existing CPU and GPU
    devices have registrations that have higher values.  A custom device
    registration can choose an even higher value than any of ours, if they
    want to be preferred by the simple_placer.  Note that in the future,
    better placement algorithms may decide to just ignore this field, so
    it's not a particularly good ordering to rely on.
    
    Changed the test to not rely on device registrations of existing devices,
    registering dummy factories instead.
    
    This maintains the existing within-DeviceType priority ordering, and also maintains the previously existing DeviceSet ordering, with one exception that SYCL is preferred below GPU but still above CPU.  There were no guarantees about SYCL vs. GPU ordering before (it was pointer ordering before), so this is more deterministic and not harmful.
    Change: 143723649

commit 9f360c9ae4822b1082580f396b53637ce7ade3a0
Author: Shanqing Cai <cais@google.com>
Date:   Fri Dec 30 17:22:07 2016 -0800

    tfdbg CLI: fix bugs related to terminal size
    
    * Bug fix 1: Previously, if a wrapped line has a mouse-clickable link, the wrapped link in the first line will disappear. This CL fixes that.
    * Bug fix 2: Previously, the open-source version will crash on mouse-wheel scrolls, because it is an unsupported mouse event type in the external version of curses. This CL catches such exceptions (curses.error).
    * Bug fix 3: Previously, on terimnal resizing, a sufficiently long main menu bar on the top can cause the CLI to crash. This CL fixes that.
    Change: 143271319

commit 2fd8088f0f999dee046c42dc040456acd0d6feec
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Tue Dec 27 13:50:07 2016 -0800

    Changed the order of null checking, otherwise the exception isn't raised (we reference a null pointer).
    Change: 143054450

commit 1d1a98d0001480a28f21be18b17746695f8fa24a
Author: SeongAhJo <seongside@gmail.com>
Date:   Wed Dec 21 07:46:27 2016 +0900

    Fix typo on exception message (#6372)
    
    * Fix typo on exception message
    
    * make exception message clear

commit 1ac9cf460e4b76e99a67be9003870ca18c0853df
Author: Jonathan Hseu <jhseu@google.com>
Date:   Thu Dec 8 12:00:54 2016 -0800

    Fix FileIO.read() to match file.read() behavior and not raise an exception on EOF
    Change: 141466762

commit 502675bc775700fb1fa53edde377ba65de6d2897
Author: Asim Shankar <ashankar@google.com>
Date:   Mon Dec 5 13:35:54 2016 -0800

    Java: Bugfix: Avoid segfault when a Tensor is used after being close()d.
    
    There were two bugs:
    - The string constant kNullPointerException had a typo in its value
    - The scalar value accessors weren't checking for a valid handle
    
    Fixed those, added tests and moved the utility function throwException
    to its own file since I plan to use that in JNI files for the other
    Java classes in the future.
    
    Another step in the journey that is #5
    Change: 141091613

commit 5edc960ab2ae91a977033721f922012a2a5a33cd
Author: Joshua V. Dillon <jvdillon@google.com>
Date:   Fri Dec 2 08:22:52 2016 -0800

    Fix cache exception condition. When caching it is sometimes the case that we dont know both of x,y. I.e., if there's a direct implementation of the {forward,inverse}_log_det_jacobian then we won't bother computing the x or y.
    
    Also made several style fixes.
    Change: 140851970

commit dc0e46d237e6326c798ee42551e6986a9584922a
Author: Jonathan Hseu <jhseu@google.com>
Date:   Tue Nov 29 11:46:30 2016 -0800

    Throw an exception on failure to read records in tf_record_iterator
    Change: 140506546

commit 66e69e28ca912a9f379e8dc8aa9445986001945f
Author: Martin Wicke <wicke@google.com>
Date:   Tue Nov 8 01:02:08 2016 -0800

    Fix MetricSpec errors for non-functions as metrics.
    
    This fixes a failure where a non-function is used as a metric, fails, but raises an exception during error logging, hiding the real exception.
    Change: 138488393

commit 8f9493858a5a89fcda5ace0b86b0f964dc470d20
Author: Asim Shankar <ashankar@google.com>
Date:   Fri Nov 4 12:33:37 2016 -0800

    C++ QueueRunner: Bug fixes.
    
    Three bug fixes:
    (1) There was a thread-unsafe access to runs_ which could result in the
        queue close operation being invoked multiple times.
    
    (2) The Run() loop would not exit when there were multiple threads
        and the queue was closed (i.e., the enqueue failed with a
        queue_closed_exception_types_ error).
    
        Without this fix, the changed QueueRunnerTest.QueueCloseCode
        test would fail with a timeout since qr->Join() would be blocked
        on the never-exiting Run() call
    
    (3) Errors in invoking the close operation were being ignored.
        Without this fix, the added QueueRunnerTest.QueueCloseFails
        test would fail as Join() would return OK instead of NOT_FOUND
    
    Two other minor changes:
    - Slight simplification to QueueRunner::Run() so that
      runs_ is manipulated only once and the body of the loop
      is clearer
    - Avoid starting an extra thread which will not be used
      when there is no Coordinator. (Though in practice I
      suppose we always intend to have a coordinator).
    Change: 138228243

commit 879e0accd1c833771c8058d3eb5f2d4f06f895d4
Author: Jonathan Hseu <jhseu@google.com>
Date:   Fri Nov 4 11:53:50 2016 -0800

    Change FileExists to return tensorflow::Status.
    
    Also done separately by @llhe at github.com/tensorflow/tensorflow/pull/5370. We needed to do this change internally to fix all callers.
    
    Motivation: The existing FileExists interface doesn't allow callers to distinguish between file not found vs. filesystem errors.
    
    Semantics changes:
    - gfile.Exists in Python now throws an exception for filesystem errors. It continues to return true/false if it can accurately determine whether a file exists.
    - RecursivelyCreateDir now returns errors for filesystem errors when calling FileExists.
    Change: 138224013

commit cfccd7ce1b9092eec98bb0989eb55a11e9d2b894
Author: Vijay Vasudevan <vrv@google.com>
Date:   Thu Nov 3 16:38:13 2016 -0800

    GPUDevice: if enabling peer access fails, log a warning but do not
    return an error.
    
    On some systems and GPUs, the driver may report being able to enable
    peer access between two devices, but trying to do so still fails.
    
    The system can still run, though possibly slower than if peer access
    were enabled.  Since we cannot disambiguate between supported
    and unsupported cases in which this happens, we demote this
    to a warning, with the exception being that if *no* device
    could enable peering even though it should be possible, we
    still return an error.
    
    Fixes #5362, hopefully.
    Change: 138141024

commit cf2eb4cd9a5f8fe0cc7e9ccaf7d2e32c808af703
Author: Vijay Vasudevan <vrv@google.com>
Date:   Thu Oct 27 13:44:29 2016 -0800

    Add a few more ops with incorrect shape functions to exception.
    Change: 137443699

commit 07a219002ace8b68048f9d584f6bf9b543a03d61
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Thu Oct 20 13:28:37 2016 -0800

    Comparing Dimension to anything that cannot be cast to int should return NotImplemented, not raise an exception.
    Change: 136760708

commit 97933ba4eb6c4fcff56d274d1e40836c6b220f13
Author: Shanqing Cai <cais@google.com>
Date:   Mon Oct 10 09:40:14 2016 -0800

    tfdbg: various TODO-shooting and improvements
    
    - Remove some unused BUILD dependencies
    - Let framework.BaseDebugWrapperSession inherit session.SessionInterface properly, so it can be used with, e.g., Savers.
    - Refactor command handlers, so that they can raise a special type of Exception to let the CLI exit, with an optional exit token.
    - Curses UI: Handle Ctrl+C SIGINT gracefully.
    - Curses UI: Cut off screen output consisting of too many lines.
    - Add an option to command print_tensor/pt to print the entire tensor (instead of using ellipses for large tensors as the numpy default).
    Change: 135692140

commit 5f072e3cab9b697419a00d33eb75d842af1d826e
Author: Zongheng Yang <zongheng@google.com>
Date:   Thu Oct 6 14:39:31 2016 -0800

    Remove an obsolete assertion in tf.learn's graph_actions.
    
    Reasons for removal:
    (1) We should use exceptions instead of assertions.
    (2) It becomes a false alarm when Saver's write_version arg is switched to V2.
    Change: 135414487

commit 412ae46894b42c76e8222a3dfa52fe333ce58706
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Wed Sep 21 09:21:48 2016 -0800

    Move gather_op's CPU implementation out of the kernel file.
    
    Mkae test_util.py print the actual exception type when there is a mismatch
    between actual exception and expected exception.
    Change: 133845037

commit a39ff40824642fa1a295055d6bea0129add6dad3
Author: Jonathan Hseu <jhseu@google.com>
Date:   Tue Sep 20 09:17:06 2016 -0800

    Propagate the tensorflow::Status as a Python exception for various file open
    operations.
    
    Note that this changes the exception type of file not found errors from IOError to errors.NotFoundError.
    Change: 133720319

commit 2ea8bb15a6c7cefe5380169e91a011064a30891b
Author: Eugene Brevdo <ebrevdo@google.com>
Date:   Mon Sep 19 15:36:18 2016 -0800

    MonitoredSession: Add error handling for modified exceptions.
    
    Enqueueing on a closed queue used to raise an AbortedError (a bug) which was
    handled incorrectly.  Now this raises a CancelledError.  Adding support for
    handling a CancelledError the same way as an OutOfRangeError to MonitoredSession
    and friends.
    Change: 133647975

commit 76a1101eb3ca1138d0dba8621837a3929894a14f
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Fri Sep 16 23:07:54 2016 -0800

    Fixed a bug in which a server was trying to start even when master was the empty string (and therefore a direct session was needed); the result was an exception.
    Change: 133464309

commit dc4bf5a513893baff298a24b372203b054931420
Author: Charles Nicholson <nicholsonc@google.com>
Date:   Fri Sep 16 13:03:49 2016 -0800

    Remove unused variable from fragment shader. Delete some redundant comments
    from private methods. Fix an exception when the page is loaded while the mouse is on the GL canvas.
    Change: 133424898

commit 151037d34898c838d5b1a6647f32aeba17e4ac34
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Thu Sep 15 11:42:35 2016 -0800

    Fix an exception for set + list in with_dependencies, caused by the removal of the no-op "update_barrier" in previous change.
    Change: 133295036

commit 3c0acaddc64acea700ceac960b14552b2ccec309
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Thu Sep 8 11:25:38 2016 -0800

    Fix bug in `tf.get_variable` and `variable_scope.get_variable` that silently ignores `dtype` if `initializer` is present.
    Now, `get_variable` will raise an exception is they are mismatched.
    Change: 132586125

commit 7e7e0d68ceca42900ddf378a07fff2bec6dec88d
Author: Eugene Brevdo <ebrevdo@google.com>
Date:   Tue Aug 30 20:55:49 2016 -0800

    Add new QueueRunner optional argument: queue_closed_exception_types.
    
    * This is a backwards compatible change.
    * Includes some extra helper functions in the tf.errors module.
    * Includes extension to the QueueRunner proto
    * Includes tests that QueueRunner.{from,to}_proto are backwards compatible.
    Change: 131791267

commit 2d79c218296b6744fcb6fea05e0600728765474e
Author: Jingtian Peng <pjt73651@gmail.com>
Date:   Sun Aug 28 11:33:22 2016 +0800

    Update mnist_replica.py
    
    1. Delete the redundant argument 'FLAGS.num_workers'
    2. Change:'num_gpu' to 'num_gpus', and support to use'/cpu:0' instead of '/gpu:#' when setting 'num_gpus=0'
    3. Combine the 'if FLAGS.sync_replicas' statement to `SyncReplicasOptimizer` block.
    4. Add `FLAGS.job_name`, 'FLAGS.task_index' and 'FLAGS.num_gpus' available check. It will raise an exception if any of them is not set, or unknown

commit b21c69a266b9058133827d12f8915829ae07cd9a
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Mon Aug 22 17:13:47 2016 -0800

    Exceptions thrown in the session destructor get ignored and reported to STDERR. For example calling session.Reset causes the session destructor to throw an error on sess.close() which gets reported in STDERR as:
    
    "Exception google3.third_party.tensorflow.python.framework.errors.AbortedError: AbortedError() in <bound method Session.__del__ of <google3.third_party.tensorflow.python.client.session.Session object at 0x7f7f020e1750>> ignored".
    
    Since the exception is always ignored, catching and passing on the exception in the destructor will make for clean STDERR logs.
    Change: 131006510

commit 016512c156d39bc830e1331f56bee0197b3cf521
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Sun Aug 21 15:00:29 2016 -0800

    Fix 2 bugs where errors reported directly to the coordinator were not propagated
    out of a "with tf.MonitoredSession()" block.
    
    1: If the _CoordinatedSession detected a request for stop during a call to run() the
       request was not honored.  (Missing a finally: clause)
    2: If a thread requested a stop but the with.MonitoredSession block terminated without
       calling run() the coordinated threads where not joined and the optional exception
       was not raised.
    
    Added 2 tests, one for each bug.
    
    Modernize the code to take benefit of the fact that the threads now register themselves
    with the Coordinator directly.
    Change: 130890075

commit 37000ef3b5a63a8cf9b6e8fd3dd8059aba0e6ddc
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Thu Aug 18 21:40:25 2016 -0800

    Some OSes return filenames as Unicode, some as UTF-8.
    Attempting to encode('utf-8') a non-Unicode string raises an exception.
    This CL changes the behavior to encode('utf-8') iff the filename is a Unicode string.
    Change: 130720340

commit bf1d87d0477f29adc25c958cae443e6af0039156
Author: Eugene Brevdo <ebrevdo@google.com>
Date:   Thu Aug 18 13:43:22 2016 -0800

    Fix an embarassing bug in SQSS:
    
    When the barrier is closed, the user allows small batch, and
    **no elements are left anywhere in the barrier**, an exception should be raised.
    
    The current, buggy, behavior is to simply return an output with 0 elements.
    Change: 130683881

commit 4235124d985978061aa1a1f4dde18f96bdbd0dd7
Author: Nathan Howell <nhowell@alphaheavy.com>
Date:   Mon Aug 15 15:32:19 2016 -0700

    ZlibInputBuffer::Inflate() incorrectly considers Z_STREAM_END an error (#3783)
    
    When reading compressed records produced by something other than
    TFRecordWriter it is possible to produce valid files that are not
    readable by Tensorflow.
    
    This fix adds a test that creates a deflate file using the builtin zlib
    module that previously caused TFRecordReader to raise an exception:
    
    `DataLossError: inflate() failed with error 1`
    
    Full stack is below:
    
    ```
    ======================================================================
    ERROR: testZLibFlushRecord (__main__.TFRecordWriterZlibTest)
    ----------------------------------------------------------------------
    Traceback (most recent call last):
      File "/source/tensorflow/tensorflow/python/kernel_tests/reader_ops_test.py", line 495, in testZLibFlushRecord
        k, v = sess.run([key, value])
      File "/Users/nhowell/.virtualenvs/tensorflow/lib/python2.7/site-packages/tensorflow/python/client/session.py", line 710, in run
        run_metadata_ptr)
      File "/Users/nhowell/.virtualenvs/tensorflow/lib/python2.7/site-packages/tensorflow/python/client/session.py", line 908, in _run
        feed_dict_string, options, run_metadata)
      File "/Users/nhowell/.virtualenvs/tensorflow/lib/python2.7/site-packages/tensorflow/python/client/session.py", line 958, in _do_run
        target_list, options, run_metadata)
      File "/Users/nhowell/.virtualenvs/tensorflow/lib/python2.7/site-packages/tensorflow/python/client/session.py", line 978, in _do_call
        raise type(e)(node_def, op, message)
    DataLossError: inflate() failed with error 1
             [[Node: ReaderRead = ReaderRead[_class=["loc:@fifo_queue", "loc:@test_reader"], _device="/job:localhost/replica:0/task:0/cpu:0"](test_reader, fifo_queue)]]
    ```

commit c5b3ea14c0fc93032a8d31afa4546d7add1ed25e
Author: Eugene Brevdo <ebrevdo@google.com>
Date:   Wed Aug 3 11:06:18 2016 -0800

    Ensure custom GPU kernels are properly registered.
    
    This change ensures that GOOGLE_CUDA=1 when compiling .cc files with --config=cuda enabled (also includes other important copts like -fno-exceptions.)
    Change: 129242223

commit 9e74e20e7ce624204e1cb3a84d121c136e1b6a09
Author: Mustafa Ispir <ispir@google.com>
Date:   Fri Jul 29 12:22:48 2016 -0800

    Raise exception if there is more than one cached items in Scaffold.
    Change: 128839863

commit 160bdfe4d4d4620781f96584b3706852593215e6
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Thu Jul 28 07:57:23 2016 -0800

    Fix for the Dtype __eq__ raising exceptions when comparing against some non-tf
    types, like "tf.int32 == int" or "tf.int32 == 2.1".
    Change: 128704213

commit 8611951ee2d9f9ceedba058ea1f0ab6923029caa
Author: Mustafa Ispir <ispir@google.com>
Date:   Tue Jul 26 10:16:15 2016 -0800

    SupervisedSession should not return in case of any exception (including OutOfRange) since return value is not valid.
    Change: 128492878

commit 5bfa4aa142b4ed535b962dc50bdbe1c98fe36988
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Mon Jul 25 12:24:58 2016 -0800

    In Coordinator.request_stop(ex) just re-raise the exception immediately if the
    coordinator had already been stopped.
    This occur in an anti-pattern where you continue to use a session after the
    coordinator threads have been stopped and joined.  In that case the reported
    exception would be ignored and never reported anywhere.
    Change: 128392626

commit 81b26083e15d4f79c4033343840c08d09b97ec56
Author: Geoffrey Irving <geoffreyi@google.com>
Date:   Wed Jul 20 16:31:45 2016 -0800

    A few debugging-related tweaks
    
    1. Fix an exception in compat for tuple values.
    2. Produce a nice error message when converting Operation to Tensor.
    Change: 128009255

commit e24388242026245244435235ea66fd3693942c67
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Wed Jul 13 13:46:46 2016 -0800

    Fixes a bug in TensorFlow quantization, where a negative constant node
    had its min and max values erroneously calculated, causing an exception
    to be raised.
    Change: 127362133

commit e40bbecdfd1116468d162cf2ef8d4bb8f879c5e9
Author: Suharsh Sivakumar <suharshs@google.com>
Date:   Mon Jul 11 11:18:47 2016 -0800

    When an invalid op is registered, ensure that tf.load_op_library returns
    a nice error rather than silently generating invalid python code.
    
    Fixes:
    - On linux, a fatal log that should be triggered in C++ seems to be ignored
      causing the tf.load_op_library call to fail and exit.
      We fix this by propagating the status from op registration to raise an
      exception from python rather than print a fatal log.
      The reason why the fatal log is being ignored on linux is unclear, my
      theory is some sort of SWIG issue, but online research provided no results.
    - Op registrations that fail are still added to the OpDef registration.
      This is only an issue when the Fatal log is ignored, but we fix this
      anyways.
    Change: 127114085

commit 6a61255cc3f22db55da68ef6d26a1aa477dc0cf3
Author: A. Unique TensorFlower <gardener@tensorflow.org>
Date:   Thu Jun 30 17:07:22 2016 -0800

    Allow to specify the list of "clean termination" exceptions when creating a
    Coordinator
    Change: 126366456

commit 43830c432f6b02bb710237b0fc61f1e549f997d2
Author: Ian Langmore <langmore@google.com>
Date:   Wed Jun 29 10:30:37 2016 -0800

    strict_statistics flag added to all distributions.  If True, statistics must be defined for all batch members else an exception is raised.  If False, NaN values will be returned for undefined batch members.
    Change: 126214071

commit c9e8343e48f201220ec61ca8fdea6bed9bc00b1c
Author: Illia Polosukhin <ipolosukhin@google.com>
Date:   Tue Jun 21 00:45:48 2016 -0800

    Quick fixes:
    * Consume Aborted exception, because it happens on PS restarts. Keep training the model.
    * Make sure to stop session before coordinator stop, to abort the queues blocked on enqueue op.
    * Consume exception when coordinator is asked to stop, if threads didn't stop yet.
    Change: 125427252

commit 60b0f7014fe30db3fe77f16c83daeb0ecb3a678c
Author: Eugene Brevdo <ebrevdo@google.com>
Date:   Wed Jun 15 15:57:22 2016 -0800

    Add batchwise KL to tf.contrib.distributions.
    
    * Includes registration decorator RegisterKL.
    * Includes distributions.kl() for calculating.
    * Includes implementation for KL(Normal || Normal).
    * distributions.kl() accepts the argument exceptions.  If true (default),
      then the output of the KL is tested for NaNs.  If any are there,
      a runtime exception is thrown.  If false, no runtime checks are performed.
    Change: 125008908

commit 48f2522176f0e2b3d30304b247658c240d81fc88
Author: A. Unique TensorFlower <nobody@tensorflow.org>
Date:   Thu Jun 9 13:56:54 2016 -0800

    Add basic_train_loop() as an example for higher level frameworks to copy or
    reuse.  It can also be used directly for simple training.
    
    Fix Coordinator.clear_stop() to also clear the exception to raise.  Add test.
    
    Add SummaryWriter.reopen(), with tests. This is needed to properly handle
    summaries when create a session more than once in a Supervior.
    
    In Supervisor.prepare_or_wait_for_session() reopen the summary writer.
    
    At then end of Supervisor.managed_session() correctly close the summary write
    and clear the running threads even if an exception was reported.
    Change: 124500982

commit f1ef5927cb742ab433b5d9f816f805562bf73500
Author: A. Unique TensorFlower <nobody@tensorflow.org>
Date:   Thu May 19 11:41:11 2016 -0800

    Make managed_session(close_summary_writer=False) actually work:
     - Pass the close_summary_writer argument to the stop() method instead of
       the close() method.
     - Fix the unittest.
    
    Additionaly, change the Supervisor to only write the graph once in a given
    event file.  This makes the event files much smaller when reusing a
    SummaryWriter across runs, as you often do for evals.
    
    Add tests for that behavior in the Supervisor.managed_session tests.
    
    The bug went unnoticed because of several factors:
     - We do ignore exceptions from close() so the bogus keyword arg was ignored.
     - The corresponding unittest was starting the supervisor summary_thread
       accidently, which caused it to enqueue the summary twice: the test saw the
       summary twice as expected, but from the wrong source.
    Change: 122758728

commit 0cc9ab5ca4330f0ffa0389332b9996de8b41f2c4
Author: A. Unique TensorFlower <nobody@tensorflow.org>
Date:   Thu May 12 07:18:33 2016 -0800

    Fix graph_actions.train() to avoid ignoring exceptions.
    Change: 122158814

commit d02e9d0b3cca3b8a74ab26c6a362b8cb5a3e8c3f
Author: A. Unique TensorFlower <nobody@tensorflow.org>
Date:   Tue May 10 08:37:09 2016 -0800

    Add an option to not close the summary_writer when stopping the coordinator
    in managed_session().
    
    This is useful when writing generic evaluation loops where the eval code just
    wants to continue appending events to the same event files across runs.
    
    Also log the exception class when reporting an exception from the Coordinator.
    Change: 121955254

commit 94d27b6852b3e331fd9d64a0533f0fc27af05bfd
Author: A. Unique TensorFlower <nobody@tensorflow.org>
Date:   Thu May 5 20:09:53 2016 -0800

    Next pass at converting all return statuses to errors.OpError exceptions
    in Python.
     - Add a tf_status util file to convert between Status and TF_Status.
     - Use TF_Status for the swigged APIs in session, checkpoint_reader, and server_lib.
     - Converts all these tf_status to exceptions in Python with the new context handler.
     - Remove the old StatusNotOK exception.
    Change: 121644982

commit b80a4a8732dfcbbeb348b9f8470aa420bab3931b
Author: A. Unique TensorFlower <nobody@tensorflow.org>
Date:   Tue May 3 15:44:08 2016 -0800

    Raise proper tensorflow exceptions in a few more places:
      - Add a context manager to deal with C apis that want a status object passed
        as an extra argument.
      - Use the context manager in session.py and session.i
      - Update tests.
    Change: 121430994

commit 7233ae61b0e6deb896dd432764e9c0efae340791
Author: Geoffrey Irving <geoffreyi@google.com>
Date:   Mon May 2 12:06:47 2016 -0800

    Make reduction gradients safe on empty tensors
    
    The current gradient routines die with division by zero exceptions (hard
    crashes at the moment) when run on empty tensors.  The mathematical gradients
    are perfectly well defined in this case, so now we do the right think.
    Specific fix courtesy of Josh: instead of x // y we now do x // max(y, 1).
    
    Fixes part of #2163.
    Change: 121301471

commit ae206dd6c6897eb6a3089c15cb6d46f27110d742
Author: A. Unique TensorFlower <nobody@tensorflow.org>
Date:   Wed Apr 27 15:43:59 2016 -0800

    Handle large integer scalars properly.
    Throw exception when the value fed in the feed_dict is out of range of the feed.dtype.
    Change: 120969208

commit bcf3dcb4e7fe571715c61bc841b4e854dbfe47e3
Author: A. Unique TensorFlower <nobody@tensorflow.org>
Date:   Thu Apr 21 16:45:10 2016 -0800

    The example trainer program should call sv.stop(); otherwise exceptions are raised.
    Change: 120504177

commit 30334d28c0ac0c2d0369c4f7f31f5b7ffff06ddd
Author: Geoffrey Irving <geoffreyi@google.com>
Date:   Wed Apr 20 14:58:57 2016 -0800

    Add a .Deprecated method to REGISTER_OP
    
    This replaces the OP_DEPRECATED macro with something declarative, which in
    particular lets us throw exceptions at graph construction time based on
    deprecation.  I've left the OP_DEPRECATED macro around in case uses elsewhere
    can't be expressed in a purely declarative manner.
    Change: 120386133

commit bbce152b48ab4c5ac66ac87979c8db22bff0a2c8
Author: A. Unique TensorFlower <nobody@tensorflow.org>
Date:   Thu Apr 14 11:54:49 2016 -0800

    Add context manager to supervisor to catch errors properly and close the session
    after the managed code terminates.
    
    In the coordinator, ignore OutOfRangeError exceptions as they indicate a queue
    being closed.
    Change: 119881042

commit cc7f05f62659c2582f561ea080d01c8a93070f4e
Author: A. Unique TensorFlower <nobody@tensorflow.org>
Date:   Mon Apr 11 11:55:26 2016 -0800

    Restrict the use of OUT_OF_RANGE to what it was intended to.
    
    Clarify that OUT_OF_RANGE is raised only when reaching the end of
    input for interable contents.
    
    Change the few places where we incorrectly raised OUT_OF_RANGE to raise
    ILLEGAL_ARGUMENT instead.
    
    This will make code that catches the OUT_OF_RANGE exception more robust
    as it won't get confused by spurious uses of the exception class.
    Change: 119560848

commit 7b8c1973ae8ce9bbbd4eed3de350b1207e81c81a
Author: Geoffrey Irving <geoffreyi@google.com>
Date:   Mon Apr 11 08:15:30 2016 -0800

    Add Dimension.__str__ and improve TensorShape.merge_with errors
    
    Dimension.__str__ now spits out ? for unknown dimensions and an integer
    otherwise.  Previously this logic was contained in TensorShape.__str__.
    
    In addition, the exception produced TensorShape.merge_with now encodes all of
    the two shapes, so something like
    
        Dimensions 2 and 9 are not compatible
    
    becomes
    
        Shapes (?, 2) and (4, 9) are not compatible
    Change: 119536897

commit bc5d429432ea22d03ff50faca47319dbdcdb4c29
Author: Wenjian Huang <nextrush@163.com>
Date:   Tue Mar 29 07:39:30 2016 +0800

    solve a serious bug which cause you fail to build
    
    last night update on "third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc" made me failed to build tensorflow.
    The error is as follow:
    ```
    ERROR: /home/wenjian/pkgs/tensorflow/tensorflow/core/BUILD:985:1: C++ compilation of rule '//tensorflow/core:gpu_runtime' failed: crosstool_wrapper_driver_is_not_gcc failed: error executing command third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc -U_FORTIFY_SOURCE '-D_FORTIFY_SOURCE=1' -fstack-protector -fPIE -Wall -Wunused-but-set-parameter -Wno-free-nonheap-object ... (remaining 85 argument(s) skipped): com.google.devtools.build.lib.shell.BadExitStatusException: Process exited with status 1.
    Traceback (most recent call last):
      File "third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc", line 49, in <module>
        PREFIX_DIR = os.path.dirname(GCC_HOST_COMPILER_PATH)
    NameError: name 'GCC_HOST_COMPILER_PATH' is not defined
    Target //tensorflow/tools/pip_package:build_pip_package failed to build
    Use --verbose_failures to see the command lines of failed build steps.
    ```
    
    
    I found the GCC_HOST_COMPILER_PATH is defined behind where it is used. This is the reason why it can't work.
    I moved it before usage and configure again, the problem solved.

commit d4987d43287e90e82c59c764a3a2ba4afb26e112
Author: Vijay Vasudevan <vrv@google.com>
Date:   Thu Mar 24 14:15:41 2016 -0800

    TensorFlow: make direct_session a publicly linkable library.
    
    Also change DirectSessionTest to use the public Session constructor when
    possible, to discourage use of DirectSession as anything but an opaque
    object that implements the Session API.  The one exception is the experimental
    API, which requires a known down_Cast.
    Change: 118072249

commit 81536a33ebc7a4354f0c31969720f49a9e6590bf
Merge: c1a40c7b908 011fb47db9c
Author: Martin Wicke <wicke@google.com>
Date:   Sun Mar 6 22:16:53 2016 -0800

    Merge pull request #1400 from dongjoon-hyun/fix_raising_wrong_exception.

commit 011fb47db9c64e00244e7ebb6cf18baee32fb819
Author: Dongjoon Hyun <dongjoon@apache.org>
Date:   Sun Mar 6 00:32:12 2016 -0800

    Fix raising wrong exception.

commit 31757e11afd319639c1da9c19ca367d51dcd1940
Author: A. Unique TensorFlower <nobody@tensorflow.org>
Date:   Thu Mar 3 10:59:19 2016 -0800

    Only expose documented symbols from the tf package, plus current whitelisted
    exceptions.
    
    Qualified names removed by this change:
      tf.DESCRIPTOR
      tf.absolute_import
      tf.division
      tf.print_function
      tf.xrange
    Change: 116268941

commit 6becc9eabeb7ff18a7f055374cbfe5d7bdf5855c
Author: J Yegerlehner <jyegerlehner@yahoo.com>
Date:   Sun Feb 28 02:44:39 2016 -0600

    Assign graph to cpu in example/udacity/assignment5.
    
    This was required so the code will execute on tensorflow
    installations with gpu support. SparseApplyAdagrad op has
    no gpu implementation at this time and causes exception to be
    thrown.

commit 993c77de77ec311f4f68f756fdccb5e27e2b6345
Author: Dongjoon Hyun <dongjoon@apache.org>
Date:   Fri Feb 19 15:19:04 2016 -0800

    Avoid copying invalid large constant data.
    
    Tensorflow cannot create an operation with a NodeDef larger than 2GB.
    (Python Unit Test Case: ConstantTest.testTooLargeConstant)
    However, before throwing a meaningful exception, it consumes lots of memory
    to copy the invalid input data. This causes `std::bad_alloc` errors sometimes.
    
    This PR prevents those invalid copying. The allocated memory for the following
    testcase decreases from over 4GB into less than 1GB.
    
    bazel-bin/tensorflow/python/constant_op_test ConstantTest.testTooLargeConstant

commit ff4e52b28dac0533d613973fe58a4b5b2888d349
Author: A. Unique TensorFlower <nobody@tensorflow.org>
Date:   Mon Feb 8 11:25:44 2016 -0800

    Fix exception re-raising code. Exception instance e cannot be called to construct a new exception.
    Change: 114131158

commit bf20a3a53296c0cc4a2c03e2d0b9a81703b7e8d6
Author: A. Unique TensorFlower <nobody@tensorflow.org>
Date:   Mon Feb 1 17:09:37 2016 -0800

    Print out the Python error if an exception occurred during evaluation of a
    py_func node.
    Change: 113584977

commit 42154f858198fadb3d660e7d9f300b7eb665b583
Author: Niklas Riekenbrauck <nikriek@users.noreply.github.com>
Date:   Sat Jan 23 10:52:18 2016 +0100

    Fix Undefined Error on Exception

commit 6cc49690efd9b1017dc9b7b3659ec02431fca490
Author: Derek Murray <mrry@google.com>
Date:   Wed Jan 20 14:40:27 2016 -0800

    Improve exception message when `TensorShape.with_rank()` fails
    
    Previously this would pass on the exception message from
    `TensorShape.merge_with()`, which is cryptic for users who don't (and
    shouldn't need to) understand how shape inference works. This would
    arise, for example, in the error message for `tf.matmul()` when passed
    a non-matrix, as noted here:
    
    http://stackoverflow.com/questions/34908033/tensorflow-exception-with-matmul
    Change: 112621185

commit 7a73630e276e5bc36d89d75cfdd33d1d3a5f865b
Author: Dongjoon Hyun <dongjoon@apache.org>
Date:   Mon Jan 18 23:05:33 2016 -0800

    Add missing arguments.
    
    * For `docs.py`, add `name` for exception message generation.
    * For `rnn_cell.py` and `rnn_test.py`, add `scope=None` for inheritance.

commit adf57cf86b82cd0a1f0c9e9bef8fb9837c8f343b
Author: Derek Murray <mrry@google.com>
Date:   Fri Jan 15 14:05:35 2016 -0800

    Fix broken exception message in the shape function for conv2d.
    Change: 112281623

commit 5b68a7e8703ea58c603a0be3b6aea4e097ffbc81
Author: A. Unique TensorFlower <nobody@tensorflow.org>
Date:   Tue Jan 12 12:28:57 2016 -0800

    Fixes 674 from github: Use of deprecated (Py2.6) / removed (Py3) BaseException.message
    Change: 111964187

commit 93ce2b3f62fd5c5c5400235dffbf21b170ed0348
Author: prolearner <riccardo.grazz@gmail.com>
Date:   Sun Dec 20 11:45:39 2015 +0100

    resolved syntax error on python3
    
    Exception, -> Exception as

commit 11a939e5546a2d5a2fb06accbf0feaec7e86db03
Author: A. Unique TensorFlower <nobody@tensorflow.org>
Date:   Thu Dec 17 13:23:28 2015 -0800

    Make it easier to catch exceptions when using the Coordinator by
    adding a context handler 'stop_on_exception()'
    Change: 110473257

commit 6622a46b6bd19c2a901451face278b2a976fa70f
Author: Alex Vig <jalexvig@gmail.com>
Date:   Sun Dec 13 15:16:28 2015 -0500

    Corrected exception syntax
    
    Change-Id: Ic8e1b075560e7fc5f898e1e4351c3d8cfc69d10c

commit 5de908567355337fdebd997fb5c60993cbe9ba2e
Author: Vijay Vasudevan <vrv@google.com>
Date:   Tue Dec 8 16:11:23 2015 -0800

    TensorFlow: Upstream changes to git.
    
    Change 109738410
            Don't crash if an attribute contains an invalid shape
    
            Using GetAttr to retrieve a TensorShape caused a process crash if the shape
            contained negative entries or was too large.  Instead, produce useful error
            messages (and Python exceptions).
    
            Fixes https://github.com/tensorflow/tensorflow/issues/449.
    Change 109737915
            TensorFlow: fix build failures and some warnings when built with clang
            on OS X.
    Change 109737559
            Fix bad paragraphing
    Change 109735757
            Fix OSX installation instructions.
    Change 109733797
            Adds buttons to toggle the display of all runs.
    
    Base CL: 109739474

commit ddd4aaf5286de24ba70402ee0ec8b836d3aed8c7
Author: Vijay Vasudevan <vrv@google.com>
Date:   Tue Dec 8 09:58:59 2015 -0800

    TensorFlow: upstream changes to git.
    
    Change 109695551
            Update FAQ
    Change 109694725
            Add a gradient for resize_bilinear op.
    Change 109694505
            Don't mention variables module in docs
    
            variables.Variable should be tf.Variable.
    Change 109658848
            Adding an option to create a new thread-pool for each session.
    Change 109640570
    
            Take the snapshot of stream-executor.
            + Expose an interface for scratch space allocation in the interface.
    
    Change 109638559
            Let image_summary accept uint8 input
    
            This allows users to do their own normalization / scaling if the default
            (very weird) behavior of image_summary is undesired.
    
            This required a slight tweak to fake_input.cc to make polymorphically typed
            fake inputs infer if their type attr is not set but has a default.
    
            Unfortunately, adding a second valid type to image_summary *disables* automatic
            implicit conversion from np.float64 to tf.float32, so this change is slightly
            backwards incompatible.
    Change 109636969
            Add serialization operations for SparseTensor.
    Change 109636644
            Update generated Op docs.
    Change 109634899
            TensorFlow: add a markdown file for producing release notes for our
            releases.  Seed with 0.5.0 with a boring but accurate description.
    Change 109634502
            Let histogram_summary take any realnumbertype
    
            It used to take only floats, not it understands ints.
    Change 109634434
            TensorFlow: update locations where we mention python 3 support, update
            them to current truth.
    Change 109632108
            Move HSV <> RGB conversions, grayscale conversions, and adjust_* ops back to tensorflow
            - make GPU-capable version of RGBToHSV and HSVToRGB, allows only float input/output
            - change docs to reflect new size constraints
            - change HSV format to be [0,1] for all components
            - add automatic dtype conversion for all adjust_* and grayscale conversion ops
            - fix up docs
    Change 109631077
            Improve optimizer exceptions
    
            1. grads_and_vars is now a tuple, so must be wrapped when passed to format.
            2. Use '%r' instead of '%s' for dtype formatting
    
    Base CL: 109697989

commit 961fd75d9243092d8279db0c48107e5c94b633cc
Author: dresimpelo <dresimpelo@gmail.com>
Date:   Fri Nov 20 13:38:26 2015 -0800

    Resolve Merge Conflict
    
            Very minor fix to clean up comment, erased blank line (line 209 basic_usage.md)
            Added a session close the Interactive Session in the 'Getting Started' tutorial
                    -so that no exceptions are thrown when a user tests later examples in the same python kernel.
            Highlighted 't[i,j,k]' for read consistency in tutorial (line 21, resources/dim_types.md)
    
    Change-Id: I9c0d8a6f6651bbb6a00bddecc0977b512e394669

